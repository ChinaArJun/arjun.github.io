(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{540:function(s,t,a){"use strict";a.r(t);var e=a(44),o=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-compose-学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-学习"}},[s._v("#")]),s._v(" Docker Compose 学习")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#docker-compose-%e5%ad%a6%e4%b9%a0"}},[s._v("Docker Compose 学习")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%e7%bc%96%e6%8e%92%e6%8a%80%e6%9c%af"}},[s._v("编排技术")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#compose-%e4%bb%8b%e7%bb%8d"}},[s._v("Compose 介绍")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#compose%e5%ae%89%e8%a3%85"}},[s._v("Compose安装")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#compose%e4%bd%bf%e7%94%a8"}},[s._v("Compose使用")])])])])]),s._v(" "),a("h2",{attrs:{id:"编排技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编排技术"}},[s._v("#")]),s._v(" 编排技术")]),s._v(" "),a("p",[s._v("Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用")]),s._v(" "),a("p",[s._v("把全部东西堆到一个容器里面是典型的虚拟机的使用方式，不是 Docker 的正确打开方式")]),s._v(" "),a("p",[s._v("正确的做法是让一个容器做一件事：\n数据库、Nginx、Python 应用、缓存等等都是独立的容器，分别启动它们，这些容器组成了一个集群，需要某种方法把它们关联起来。")]),s._v(" "),a("p",[s._v("这个关联有一个非常专用、形象的称呼「编排」，我最早了解这个词是通过「Ansbile Playbooks」，而 Docker Compose 大家可以猜到就是负责实现对 Docker 容器集群编排的。")]),s._v(" "),a("h2",{attrs:{id:"compose-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose-介绍"}},[s._v("#")]),s._v(" Compose 介绍")]),s._v(" "),a("p",[s._v("Dockerfile 可以让用户管理一个单独的应用容器，而 Compose 则允许用户在一个模板 (YAML 格式) 中定义一组相关联的应用容器")]),s._v(" "),a("p",[s._v("Compose 非常适合构建开发和测试环境，但如果你想在生产中使用你的容器，应该选择 Kubernetes 来编排容器")]),s._v(" "),a("p",[s._v("Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。\n因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。")]),s._v(" "),a("h2",{attrs:{id:"compose安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose安装"}},[s._v("#")]),s._v(" Compose安装")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m`-o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n")])])]),a("h2",{attrs:{id:"compose使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose使用"}},[s._v("#")]),s._v(" Compose使用")]),s._v(" "),a("p",[s._v("Compose 中有两个重要的概念：")]),s._v(" "),a("ul",[a("li",[s._v("服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。")]),s._v(" "),a("li",[s._v("项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。")])]),s._v(" "),a("p",[s._v("Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。")]),s._v(" "),a("p",[s._v("1.这里使用flask 框架来搭建一个简单的web应用")]),s._v(" "),a("p",[s._v("demo/app.py:")]),s._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" flask "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Flask\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" redis "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Redis\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Flask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__name__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nredis "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("route")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\tcount "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("incr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hits'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello World! 该页面已被访问 {} 次。\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\tapp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.0.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" debug"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("2.编写dockerfile文件")]),s._v(" "),a("p",[s._v("在app.py 外面一层")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('FROM python:3.6-alpine\nADD  demo/ /code\nWORKDIR /code\nRUN pip install redis flask\nCMD ["python", "app.py"]\n')])])]),a("p",[s._v("3.编写docker-compose.yml 文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('version: \'3\'\nservices:\nweb:\nbuild: .\nports:\n- "5000:5000"\nredis:\nimage: "redis:alpine"\n')])])]),a("p",[s._v("4.运行下面命令开启服务")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker-compose up\n")])])]),a("p",[s._v("up 命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。")]),s._v(" "),a("p",[s._v("可以说，大部分时候都可以直接通过该命令来启动一个项目。")]),s._v(" "),a("p",[s._v("默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。")]),s._v(" "),a("p",[s._v("当通过 Ctrl-C 停止命令时，所有容器将会停止。")]),s._v(" "),a("p",[s._v("如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。")]),s._v(" "),a("p",[s._v("5.此时访问本地 5000 端口，每次刷新页面，计数就会加 1。")])])}),[],!1,null,null,null);t.default=o.exports}}]);