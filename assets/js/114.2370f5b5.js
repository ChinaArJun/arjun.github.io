(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{553:function(a,e,t){"use strict";t.r(e);var s=t(44),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"docker常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker常用命令"}},[a._v("#")]),a._v(" docker常用命令")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4"}},[a._v("docker常用命令")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF"}},[a._v("服务开启")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4"}},[a._v("帮助命令")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4"}},[a._v("镜像命令")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4"}},[a._v("容器命令")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8"}},[a._v("新建并启动容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E6%89%80%E6%9C%89%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8"}},[a._v("列出当前所有正在运行的容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E9%80%80%E5%87%BA%E5%AE%B9%E5%99%A8"}},[a._v("退出容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8"}},[a._v("启动容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8"}},[a._v("重启容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8"}},[a._v("停止容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BC%BA%E5%88%B6%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8"}},[a._v("强制停止容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%88%A0%E9%99%A4%E5%B7%B2%E5%81%9C%E6%AD%A2%E7%9A%84%E5%AE%B9%E5%99%A8"}},[a._v("删除已停止的容器")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%80%E6%AC%A1%E6%80%A7%E5%88%A0%E9%99%A4%E5%A4%9A%E4%B8%AA%E5%AE%B9%E5%99%A8"}},[a._v("一次性删除多个容器")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%90%AF%E5%8A%A8%E5%AE%88%E6%8A%A4%E5%BC%8F%E5%AE%B9%E5%99%A8"}},[a._v("启动守护式容器")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97"}},[a._v("查看容器日志")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B"}},[a._v("查看容器内运行的进程")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8%E7%BB%86%E8%8A%82"}},[a._v("查看容器内部细节")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92"}},[a._v("命令行交互")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6"}},[a._v("拷贝文件")])])])])])])]),a._v(" "),t("h2",{attrs:{id:"服务开启"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务开启"}},[a._v("#")]),a._v(" 服务开启")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# systemctl start docker.service \n")])])]),t("p",[a._v("使用普通用户执行docker命令会报错")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[jian@laptop ~]$ docker run busybox echo \"hello world\"\ndocker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create: dial unix /var/run/docker.sock: connect: permission denied.\nSee 'docker run --help'.\n\n解决的办法：\n1.使用root用户\n\n2.如果不想使用root， 可以执行下面步骤\n\n1> 先使用root赋予普通用户权限：\n[root@laptop ~]# setfacl -m user:jian:rw /var/run/docker.sock\n\n-m  user:用户名:rw (rw表示可读可写）\n\n\n或者也可以吧普通用户放到docker组\n\nusermod -a -G docker $USER\n\n\n2> 然后就可以使用普通用户进行docker操作了\n")])])]),t("h2",{attrs:{id:"帮助命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#帮助命令"}},[a._v("#")]),a._v(" 帮助命令")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker version\ndocker info\ndocker --help\n")])])]),t("h2",{attrs:{id:"镜像命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[a._v("#")]),a._v(" 镜像命令")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker images  列出本地的镜像列表\n[root@laptop ~]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nhello-world latest fce289e99eb9 10 months ago 1.84kB\n\ndocker  search 某个xxx镜像名字\ndocker pull xxx  下载镜像\ndocker rmi  xxx  删除镜像\n\n删除单个 docker rmi -f 镜像ID\n删除多个  docker rmi -f 镜像名1:TAG 镜像2:TAG\n删除全部  docker rmi -f $(docker images -qa)\n")])])]),t("h2",{attrs:{id:"容器命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[a._v("#")]),a._v(" 容器命令")]),a._v(" "),t("p",[t("strong",[t("code",[a._v("有镜像才能创建容器，这是前提")])])]),a._v(" "),t("h3",{attrs:{id:"新建并启动容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建并启动容器"}},[a._v("#")]),a._v(" 新建并启动容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\ncentos latest 0f3e07c0138f 6 weeks ago 220MB\n[root@laptop ~]# docker run -it centos\n[root@eff6100b601e /]#\n")])])]),t("h3",{attrs:{id:"列出当前所有正在运行的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列出当前所有正在运行的容器"}},[a._v("#")]),a._v(" 列出当前所有正在运行的容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\neff6100b601e centos "/bin/bash" 3 minutes ago Up 3 minutes peaceful_rubin\n')])])]),t("h3",{attrs:{id:"退出容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#退出容器"}},[a._v("#")]),a._v(" 退出容器")]),a._v(" "),t("p",[a._v("两种退出方式：")]),a._v(" "),t("ul",[t("li",[a._v("exit 容器停止退出")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@eff6100b601e /]# exit \nexit\n")])])]),t("ul",[t("li",[a._v("容器不停止退出   快捷键 "),t("strong",[t("code",[a._v("Ctrl+P+Q")])])])]),a._v(" "),t("h3",{attrs:{id:"启动容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[a._v("#")]),a._v(" 启动容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\ne0e72d00e0e5 centos "/bin/bash" 2 minutes ago Up 2 minutes awesome_banach\n[root@laptop ~]# docker start e0e72d00e0e5\ne0e72d00e0e5\n')])])]),t("h3",{attrs:{id:"重启容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重启容器"}},[a._v("#")]),a._v(" 重启容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker restart e0e72d00e0e5\ne0e72d00e0e5\n")])])]),t("h3",{attrs:{id:"停止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#停止容器"}},[a._v("#")]),a._v(" 停止容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker stop e0e72d00e0e5\ne0e72d00e0e5\n")])])]),t("h3",{attrs:{id:"强制停止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制停止容器"}},[a._v("#")]),a._v(" 强制停止容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker kill be6bb678e724\nbe6bb678e724\n")])])]),t("h3",{attrs:{id:"删除已停止的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除已停止的容器"}},[a._v("#")]),a._v(" 删除已停止的容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker ps -l\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\nbe6bb678e724 centos "/bin/bash" About a minute ago Exited (137) 47 seconds ago modest_newton\n[root@laptop ~]# docker rm be6bb678e724\nbe6bb678e724\n')])])]),t("h3",{attrs:{id:"一次性删除多个容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一次性删除多个容器"}},[a._v("#")]),a._v(" 一次性删除多个容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker rm -f $(docker ps -a -q)\nc1b03eed297c\na725bb916b70\ne0e72d00e0e5\neff6100b601e\n5729d1fd4990\n\n\n# 或者使用这个命令\n[root@laptop ~]# docker ps -a -q |xargs docker rm\n\n")])])]),t("h2",{attrs:{id:"启动守护式容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动守护式容器"}},[a._v("#")]),a._v(" 启动守护式容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\ncentos latest 0f3e07c0138f 6 weeks ago 220MB\n[root@laptop ~]# docker run -d centos\n032e471a76f72e4eae171ff0a3eb574144e15b6e6ce061bfffd3ef3f5496b2dc\n\n\n[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n")])])]),t("p",[a._v("这里发现容器已经退出，原因在于：\n"),t("strong",[t("code",[a._v("Docker 容器后台运行，必须有一个前台进程")])])]),a._v(" "),t("p",[a._v("容器运行的命令如果不是那些一直挂起的命令（如top, tail)， 就是会自动退出的")]),a._v(" "),t("p",[t("strong",[a._v("这是docker的机制问题")])]),a._v(" "),t("blockquote",[t("p",[a._v("比如web容器 以nginx为例\n正常情况下，我们配置启动服务 只需要启动服务， 如service nginx start\n但是这样做，nginx为后台进程模式运行，这就导致docker前台没有运行的应用\n这样容器后台启动后，会立即自杀因为他觉得他没事可做了")])]),a._v(" "),t("p",[a._v("所以，最佳的方案是将你要运行的程序以前台进程的形式运行")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker run -it centos\n[root@e3e2159b1a89 /]#\n")])])]),t("h3",{attrs:{id:"查看容器日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器日志"}},[a._v("#")]),a._v(" 查看容器日志")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker run -d centos /bin/sh -c "while true;do echo hello;sleep 2;done"\n\n[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n1ba1e8801c18 centos "/bin/sh -c \'while t…" 18 seconds ago Up 17 seconds vigilant_matsumoto\ne3e2159b1a89 centos "/bin/bash" 3 minutes ago Up 3 minutes gracious_hofstadter\n\n[root@laptop ~]# docker logs -t -f 1ba1e8801c18 #容器ID\n2019-11-15T01:06:18.309763627Z hello\n2019-11-15T01:06:20.311834609Z hello\n\n')])])]),t("h3",{attrs:{id:"查看容器内运行的进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器内运行的进程"}},[a._v("#")]),a._v(" 查看容器内运行的进程")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[root@laptop ~]# docker top 1ba1e8801c18 #容器ID\nUID PID PPID C STIME TTY TIME CMD\nroot 21677 21660 0 09:06 ? 00:00:00 /bin/sh -c while true;do echo hello;sleep 2;done\nroot 21981 21677 0 09:09 ? 00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 2\n")])])]),t("h3",{attrs:{id:"查看容器内部细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器内部细节"}},[a._v("#")]),a._v(" 查看容器内部细节")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker inspect 1ba1e8801c18 #容器ID\n\n"Id": "1ba1e8801c185ae89f35a169181af040442d539987269ec4f54a5e581ee6966b",\n"Created": "2019-11-15T01:06:17.947483399Z",\n....\n')])])]),t("h3",{attrs:{id:"命令行交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行交互"}},[a._v("#")]),a._v(" 命令行交互")]),a._v(" "),t("p",[a._v("进入正在运行的容器并以命令行交互")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\na7b5e40289de centos "/bin/bash" 16 seconds ago Up 15 seconds practical_tu\n[root@laptop ~]# docker attach a7b5e40289de\n[root@a7b5e40289de /]#\n\n[root@laptop ~]# docker exec -t a7b5e40289de ls -l /tmp\ntotal 8\n-rwx------ 1 root root 1379 Sep 27 17:13 ks-script-0n44nrd1\n-rwx------ 1 root root 671 Sep 27 17:13 ks-script-w6m6m_20\n')])])]),t("p",[a._v("这两个命令的区别：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("attach 直接进入容器启动命令的终端，不会启动新的进程\nexec 是在容器中打开新的终端，并且可以启动新的进程\n")])])]),t("h3",{attrs:{id:"拷贝文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拷贝文件"}},[a._v("#")]),a._v(" 拷贝文件")]),a._v(" "),t("p",[a._v("从容器内拷贝文件到主机上")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker cp 容器ID:容器内路径  目的主机路径\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);