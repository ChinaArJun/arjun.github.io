(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{556:function(t,o,r){"use strict";r.r(o);var a=r(44),e=Object(a.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"docker镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像"}},[t._v("#")]),t._v(" docker镜像")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#docker%E9%95%9C%E5%83%8F"}},[t._v("docker镜像")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E9%95%9C%E5%83%8F%E6%98%AF%E4%BB%80%E4%B9%88"}},[t._v("镜像是什么")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#unionfs%E8%81%94%E5%90%88%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F"}},[t._v("UnionFS联合文件系统")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86"}},[t._v("Docker镜像加载原理")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%88%86%E5%B1%82%E7%9A%84%E9%95%9C%E5%83%8F"}},[t._v("分层的镜像")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%87%E7%94%A8%E8%BF%99%E7%A7%8D%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84"}},[t._v("为什么要采用这种分层结构")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E7%89%B9%E7%82%B9"}},[t._v("特点")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#docker%E9%95%9C%E5%83%8Fcommit%E6%93%8D%E4%BD%9C%E8%A1%A5%E5%85%85"}},[t._v("Docker镜像commit操作补充")])])])])]),t._v(" "),r("h2",{attrs:{id:"镜像是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#镜像是什么"}},[t._v("#")]),t._v(" 镜像是什么")]),t._v(" "),r("p",[t._v("镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件")]),t._v(" "),r("p",[t._v("它包含运行某个软件所需要的所有内容，包括代码、运行库、库、环境变量和配置文件")]),t._v(" "),r("h2",{attrs:{id:"unionfs联合文件系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unionfs联合文件系统"}},[t._v("#")]),t._v(" UnionFS联合文件系统")]),t._v(" "),r("p",[t._v("是一种**"),r("code",[t._v("分层、轻量级并且高性能")]),t._v("**的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。")]),t._v(" "),r("p",[r("strong",[t._v("UnionFS文件系统 是docker镜像的基础")]),t._v("，镜像可以通过分层来进行继承，基于基础镜像（没有父镜像),可以制作各种具体的应用镜像")]),t._v(" "),r("p",[r("strong",[r("code",[t._v("类似 花卷")])])]),t._v(" "),r("p",[t._v("特征：\n一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录")]),t._v(" "),r("p",[t._v("##Docker镜像加载原理")]),t._v(" "),r("p",[t._v("docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS")]),t._v(" "),r("p",[t._v("bootfs(boot file system)主要包含bootloader和kernel")]),t._v(" "),r("p",[t._v("bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统")]),t._v(" "),r("p",[t._v("在Docker镜像的最底层就是bootfs. 这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核，当boot加载完成后整个内核就都在内存中，此时内存的使用权已由bootfs转交给内核，此时系统会卸载bootfs")]),t._v(" "),r("p",[t._v("rootfs(root file system), 在bootfs之上，包含就是典型的Linux系统中的/dev, /proc, /bin, /etc等标准目录和文件，rootfs就是各种不同的操作系统发行版，比如centos, ubuntu等")]),t._v(" "),r("p",[t._v("对于一个精简的OS,  rootfs可以很小，只需要包括最基本的命令，工具和程序库就可以了，因此底层直接用host的kernel，自己只需要提供rootfs就可以了。")]),t._v(" "),r("p",[t._v("因此对于不同的Linux发行版，bootfs基本是一致的，rootfs就会有差别，所以不同的发行版可以公用bootfs")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/Syncma/Figurebed/master/img/20200110091127.png",alt:"enter image description here"}})]),t._v(" "),r("h2",{attrs:{id:"分层的镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分层的镜像"}},[t._v("#")]),t._v(" 分层的镜像")]),t._v(" "),r("p",[t._v("以pull为例子，在下载的过程中可以看到docker的镜像好像是一层一层的在下载")]),t._v(" "),r("p",[r("strong",[t._v("关于docker是如何安装的？会在后面的文章中介绍")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("[root@laptop ~]# docker pull tomcat\n\nUsing default tag: latest\nlatest: Pulling from library/tomcat\n9a0b0ce99936: Pull complete\ndb3b6004c61a: Pull complete\nf8f075920295: Pull complete\n6ef14aff1139: Pull complete\n962785d3b7f9: Pull complete\n631589572f9b: Pull complete\nc55a0c6f4c7b: Pull complete\n379605d88e88: Pull complete\ne056aa10ded8: Pull complete\n6349a1c98d85: Pull complete\nDigest: sha256:77e41dbdf7854f03b9a933510e8852c99d836d42ae85cba4b3bc04e8710dc0f7\nStatus: Downloaded newer image for tomcat:latest\ndocker.io/library/tomcat:latest\n")])])]),r("h2",{attrs:{id:"为什么要采用这种分层结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要采用这种分层结构"}},[t._v("#")]),t._v(" 为什么要采用这种分层结构")]),t._v(" "),r("p",[r("strong",[t._v("最大的好处 就是"),r("code",[t._v("共享资源")])])]),t._v(" "),r("p",[t._v("比如：\n有多个镜像都从相同的base镜像构建而来，那么宿主机只需要在磁盘保存一份base镜像\n同时内存中也需加载一份base镜像，就可以为所有容器服务了。\n而且镜像的每一层都可以被共享")]),t._v(" "),r("h2",{attrs:{id:"特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),r("p",[r("strong",[t._v("Docker镜像都是只读的")])]),t._v(" "),r("p",[t._v("当容器启动时，一个新的可写层被加载到镜像的顶部\n这一层通常被称为"),r("strong",[t._v("容器层")]),t._v("，容器层之下的都叫"),r("strong",[t._v("镜像层")])]),t._v(" "),r("p",[t._v("##Docker镜像commit操作补充")]),t._v(" "),r("p",[r("strong",[r("code",[t._v("docker commit提交容器副本使之成为一个新的镜像")])]),t._v(" "),r("strong",[r("code",[t._v('docker commit -m="提交的描述信息“ -a="作者" 容器ID 要创建的目标镜像名:[标签名]')])])]),t._v(" "),r("p",[t._v("1.docker数据默认都存在 /var/lib/docker 这里")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[root@laptop ~]# docker info |grep "Docker Root Dir"\nDocker Root Dir: /var/lib/docker\n')])])]),r("p",[t._v("如果想修改可以按照下面步骤进行设置:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[root@laptop docker]# pwd\n/var/lib/docker\n[root@laptop docker]# ll\ntotal 48\ndrwx------ 2 root root 4096 Oct 23 11:19 builder\ndrwx--x--x 4 root root 4096 Oct 23 11:19 buildkit\ndrwx------ 9 root root 4096 Nov 15 09:24 containers\ndrwx------ 3 root root 4096 Oct 23 11:19 image\ndrwxr-x--- 3 root root 4096 Oct 23 11:19 network\ndrwx------ 18 root root 4096 Nov 15 10:11 overlay2\ndrwx------ 4 root root 4096 Oct 23 11:19 plugins\ndrwx------ 2 root root 4096 Nov 15 08:23 runtimes\ndrwx------ 2 root root 4096 Oct 23 11:19 swarm\ndrwx------ 2 root root 4096 Nov 15 10:01 tmp\ndrwx------ 2 root root 4096 Oct 23 11:19 trust\ndrwx------ 2 root root 4096 Oct 23 11:19 volumes\n\n[root@laptop ~]# cat /etc/docker/daemon.json\n{\n"registry-mirrors":["https://1664le6h.mirror.aliyuncs.com"],\n"data-root":"/home/jian/prj/docker"\n}\n\n')])])]),r("p",[t._v("使用root用户重启服务：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[root@laptop ~]# systemctl daemon-reload\n[root@laptop ~]# systemctl restart docker\n[root@laptop ~]# docker info |grep "Docker Root Dir"\nDocker Root Dir: /home/jian/prj/docker\n')])])]),r("p",[t._v("例子：")]),t._v(" "),r("p",[t._v("1.从Hub上下载tomcat镜像到本地并运行")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("[root@laptop image]# docker pull tomcat\n\nUsing default tag: latest\nlatest: Pulling from library/tomcat\n\n\n[root@laptop image]# docker images\n\nREPOSITORY TAG IMAGE ID CREATED SIZE\ntomcat latest 882487b8be1d 3 weeks ago 507MB\n")])])]),r("p",[t._v("2.运行")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(' # -p 主机端口:docker容器端口\n # -i 表示以“交互模式”运行容器\n # -t 表示容器启动后会进入其命令行\n # -P 随机分配端口\n\n[root@laptop image]# docker run -it  -p 8080:8080 tomcat \n[root@laptop image]# docker run -it -P tomcat\n\n# -d 后台运行\n[root@laptop image]#docker run --name tomcat  -p 8080:8080 -d \n\n\n[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\nbcc3a519b844 tomcat "catalina.sh run" 25 seconds ago Up 24 seconds 0.0.0.0:32768->8080/tcp brave_bouman\n')])])]),r("p",[t._v("3.故意删除上一步镜像产生tomcat容器文档")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[root@laptop ~]# docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n0c26f645c079 tomcat "catalina.sh run" 10 seconds ago Up 9 seconds 8080/tcp serene_cannon\n\n[root@laptop ~]# docker exec -it 0c26f645c079 /bin/bash\nroot@0c26f645c079:/usr/local/tomcat# cd webapps/\nroot@0c26f645c079:/usr/local/tomcat/webapps# ls -l\ntotal 20\ndrwxr-xr-x 3 root root 4096 Oct 19 02:25 ROOT\ndrwxr-xr-x 15 root root 4096 Oct 19 02:25 docs\ndrwxr-xr-x 6 root root 4096 Oct 19 02:25 examples\ndrwxr-xr-x 5 root root 4096 Oct 19 02:25 host-manager\ndrwxr-xr-x 5 root root 4096 Oct 19 02:25 manager\nroot@0c26f645c079:/usr/local/tomcat/webapps# rm -rf docs/\nroot@0c26f645c079:/usr/local/tomcat/webapps# ls -l\ntotal 16\ndrwxr-xr-x 3 root root 4096 Oct 19 02:25 ROOT\ndrwxr-xr-x 6 root root 4096 Oct 19 02:25 examples\ndrwxr-xr-x 5 root root 4096 Oct 19 02:25 host-manager\ndrwxr-xr-x 5 root root 4096 Oct 19 02:25 manager\n\n')])])]),r("p",[t._v("4.也即当前的tomcat运行实例是一个没有文档内容的容器，\n以它为模板commit一个没有doc的tomcat新镜像")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('[root@laptop ~]# docker commit -a "abc" -m="del tomcat docs" a0d94640ea19 abc/mytomcat:1.2\nsha256:f73b412690d60b1160430ec18b50727c8c6877235e6aa53c4953a927bd605966\n\n[root@laptop ~]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nabc/mytomcat 1.2 f73b412690d6 10 seconds ago 507MB\n')])])]),r("p",[t._v("4.启动新镜像和原来的对比")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("[root@laptop ~]# docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nabc/mytomcat 1.2 f73b412690d6 4 minutes ago 507MB\ntomcat latest 882487b8be1d 3 weeks ago 507MB\n\n[root@laptop ~]# docker run -it -p 8080:8080 abc/mytomcat:1.2\n\n")])])]),r("p",[t._v("然后访问浏览器 "),r("a",{attrs:{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"}},[t._v("地址"),r("OutboundLink")],1),t._v("查看效果")])])}),[],!1,null,null,null);o.default=e.exports}}]);