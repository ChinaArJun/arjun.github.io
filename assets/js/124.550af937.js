(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{563:function(t,n,a){"use strict";a.r(n);var e=a(44),r=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"go-语言学习笔记-第10章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-语言学习笔记-第10章"}},[t._v("#")]),t._v(" Go 语言学习笔记 -第10章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#go-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E7%AC%AC10%E7%AB%A0"}},[t._v("Go 语言学习笔记 -第10章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8C%85%E5%92%8Cgo%E5%B7%A5%E5%85%B7"}},[t._v("包和go工具")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8C%85%E7%9A%84%E6%9C%AC%E8%B4%A8"}},[t._v("包的本质")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8C%85%E7%9A%84%E4%BD%9C%E7%94%A8"}},[t._v("包的作用")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8C%85%E7%9A%84%E8%AF%B4%E6%98%8E"}},[t._v("包的说明")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[t._v("总结")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8C%85%E5%AE%89%E8%A3%85"}},[t._v("包安装")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9"}},[t._v("包注意事项")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#go%E5%B7%A5%E5%85%B7"}},[t._v("go工具")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"包和go工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包和go工具"}},[t._v("#")]),t._v(" 包和go工具")]),t._v(" "),a("h3",{attrs:{id:"包的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的本质"}},[t._v("#")]),t._v(" 包的本质")]),t._v(" "),a("p",[t._v("包的本质实际上是创建不同的文件夹，来存放程序文件")]),t._v(" "),a("p",[t._v("go 的每个文件都是属于一个包的，也就是go是以包的形式来管理文件和目录结构的")]),t._v(" "),a("h3",{attrs:{id:"包的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的作用"}},[t._v("#")]),t._v(" 包的作用")]),t._v(" "),a("blockquote",[a("p",[t._v("1、区分相同名字的函数、变量标识符等")]),t._v(" "),a("p",[t._v("2、当程序文件很多时，可以很好的管理项目")]),t._v(" "),a("p",[t._v("3、控制函数、变量等访问范围，即作用域")])]),t._v(" "),a("h3",{attrs:{id:"包的说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包的说明"}},[t._v("#")]),t._v(" 包的说明")]),t._v(" "),a("ul",[a("li",[t._v("打包：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("package util\n")])])]),a("ul",[a("li",[t._v("引入包：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import "包的路径"\n')])])]),a("p",[a("strong",[a("code",[t._v("在import 包时，路径从$GOPATH的src开始，不用带src, 编译器会自动从src下面引入")])])]),t._v(" "),a("p",[t._v('执行 "go env"可以查看GOPATH路径')]),t._v(" "),a("p",[t._v("也可以在vscode里面配置GOPATH路径：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5cdd811fe51d45475d5e8e0c",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSCode 配置Go开发环境"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("Windows下要设置系统环境变量")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Syncma/Figurebed/master/img/win.png",alt:"Alt text"}})]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' import "fmt"\n    or\n    import(\n        "fmt"\n    )\n\n两种写法\n\n1. 相对路径\n    import "./models" //当前同一个文件目录下的model. 不建议使用\n\n2. 绝对路径\n    import "shorturl/model" // gopath/src/shorturl/mdoel\n\n点操作\n    import(\n        . "fmt"\n    )\n\n    类似python\n    from fmt import *\n\n别名操作\n    import(\n        f "fmt"\n    )\n\n    类似python的\n    import fmt as f\n\n\n_操作\n    import (\n        _ "github.com/ziutek/mymysql/godrv"\n    )\n    不直接使用包里的函数, 只调用该包的init\n\n')])])]),a("h3",{attrs:{id:"包安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包安装"}},[t._v("#")]),t._v(" 包安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[jian@laptop github.com]$ pwd\n/home/jian/go/src/github.com\n[jian@laptop github.com]$ ls\ngo-delve gomodule mdempsky newhook ramya-rao-a rogpeppe sqs tpng\n[jian@laptop github.com]$\n\n\n到这个目录，然后git clone相应的包\n\ngit clone https://github.com/gomodule/redigo.git\n\n\n然后到src目录进行执行：\n\ngo get github.com/gomodule/redigo/redis\n\n")])])]),a("h3",{attrs:{id:"包注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包注意事项"}},[t._v("#")]),t._v(" 包注意事项")]),t._v(" "),a("p",[t._v("1.每个包就是一个文件夹")]),t._v(" "),a("p",[t._v("2.包名称就是文件夹名称")]),t._v(" "),a("p",[t._v("3.包路径就是文件夹路径")]),t._v(" "),a("p",[t._v("4.同一个文件夹存在不同包 就会编译出错")]),t._v(" "),a("p",[t._v("5.文件名和包名不一样 也会编译出错")]),t._v(" "),a("h3",{attrs:{id:"go工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go工具"}},[t._v("#")]),t._v(" go工具")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('mac\n\n    brew install go\n    or下载pkg包\n\n安装后\n\n\n    export GOROOT=/usr/local/go\n    export PATH=$PATH:$GOROOT/bin\n\n验证是否已安装\n\n    go\n\nGOPATH\n\n    允许有多个目录,\n    export GOPATH=/Users/ken/goworkspace/libs:/Users/ken/goworkspace/Counter\n\n    默认将go get内容放在第一个目录下\n\n    libs 放置公有包\n      |- src\n      |- pkg\n      |- bin\n\n    Counter 具体项目\n      |- src  存放源码\n      |- pkg  编译后生成的文件\n      |- bin  编译后生成的可执行文件\n\n\n获取远程包\n\n    go get github.com/astaxie/beedb\n\n\n命令go get从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。\n并安装到了环境变量GOPATH中包含的第一个工作区中\n\n    本质上 : clone到src -> go install\n\n    然后在其他项目里可以 import "github.com/astaxie/beedb"\n\n\n程序结构\n\n    1.通过 package组织\n    2.只有package名称为main的包可以包含main函数\n    3.一个程序有且仅有一个main包\n    4.通过import关键字导入其他非main包\n\ngo命令工具\n\n    go build 测试编译, 有一些规则\n\n        go build hello.go\n        ./hello\n\n    go clean 移除当前源码包里编译生成的文件\n\n    go fmt格式化写好的代码\n\n        go fmt xx.go\n\n    go get 动态获取远程包\n\n    go install 生成结果文件(可执行文件或者.a包) -> 把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin中\n\n    go test 运行测试用的可执行文件  *_test.go\n\n\n    go version 查看版本\n    go env 查看当前go环境变量\n    go list 列出当前安装的所有package\n\n    go run 编译并运行go语言程序\n\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);