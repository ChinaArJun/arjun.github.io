(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{639:function(t,a,s){"use strict";s.r(a);var e=s(44),o=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"go-介绍与环境安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-介绍与环境安装"}},[t._v("#")]),t._v(" Go 介绍与环境安装")]),t._v(" "),s("p",[t._v("项目地址：https://github.com/EDDYCJY/go-gin-example")]),t._v(" "),s("h2",{attrs:{id:"本文目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本文目标"}},[t._v("#")]),t._v(" 本文目标")]),t._v(" "),s("ul",[s("li",[t._v("学会安装 Go。")]),t._v(" "),s("li",[t._v("知道什么是 Go。")]),t._v(" "),s("li",[t._v("知道什么是 Go modules。")]),t._v(" "),s("li",[t._v("了解 Go modules 的小历史。")]),t._v(" "),s("li",[t._v("学会简单的使用 Go modules。")]),t._v(" "),s("li",[t._v("了解 Gin，并简单跑起一个 Demo。")])]),t._v(" "),s("h2",{attrs:{id:"准备环节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备环节"}},[t._v("#")]),t._v(" 准备环节")]),t._v(" "),s("h3",{attrs:{id:"安装-go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-go"}},[t._v("#")]),t._v(" 安装 Go")]),t._v(" "),s("h4",{attrs:{id:"centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos"}},[t._v("#")]),t._v(" Centos")]),t._v(" "),s("p",[t._v("首先，根据对应的操作系统选择安装包 "),s("a",{attrs:{href:"https://studygolang.com/dl",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),s("OutboundLink")],1),t._v("，在这里我使用的是Centos 64位系统，如下：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://studygolang.com/dl/golang/go1.13.1.linux-amd64.tar.gz\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf go1.13.1.linux-amd64.tar.gz\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" go/ /usr/local/\n")])])]),s("p",[t._v("配置 /etc/profile")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/profile\n")])])]),s("p",[t._v("添加环境变量GOROOT和将GOBIN添加到PATH中")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("GOROOT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/go\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOROOT")]),t._v("/bin\n")])])]),s("p",[t._v("配置完毕后，执行命令令其生效")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n")])])]),s("p",[t._v("在控制台输入"),s("code",[t._v("go version")]),t._v("，若输出版本号则"),s("strong",[t._v("安装成功")]),t._v("，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ go version\ngo version go1.13.1 linux/amd64\n")])])]),s("h4",{attrs:{id:"macos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[t._v("#")]),t._v(" MacOS")]),t._v(" "),s("p",[t._v("在 MacOS 上安装 Go 最方便的办法就是使用 brew，安装如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ brew install go\n")])])]),s("p",[t._v("升级命令如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ brew upgrade go\n")])])]),s("p",[t._v("注：升级命令你不需要执行，但我想未来你有一天会用到的。")]),t._v(" "),s("p",[t._v("同样在控制台输入"),s("code",[t._v("go version")]),t._v("，若输出版本号则"),s("strong",[t._v("安装成功")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"了解-go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解-go"}},[t._v("#")]),t._v(" 了解 Go")]),t._v(" "),s("h4",{attrs:{id:"是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),s("blockquote",[s("p",[t._v("Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.")])]),t._v(" "),s("p",[t._v("上述为官方说明，如果简单来讲，大致为如下几点：")]),t._v(" "),s("ul",[s("li",[t._v("Go 是编程语言。")]),t._v(" "),s("li",[t._v("谷歌爸爸撑腰。")]),t._v(" "),s("li",[t._v("语言级高并发。")]),t._v(" "),s("li",[t._v("上手快，入门简单。")]),t._v(" "),s("li",[t._v("简洁，很有特色。")]),t._v(" "),s("li",[t._v("国内使用人群逐年增多。")])]),t._v(" "),s("h4",{attrs:{id:"谁在用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谁在用"}},[t._v("#")]),t._v(" 谁在用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.eddycjy.com/6d278b22a4c0bf29c6b89ece99cd6c88.jpg",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"有什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有什么"}},[t._v("#")]),t._v(" 有什么")]),t._v(" "),s("p",[t._v("那么大家会有些疑问，纠结 "),s("code",[t._v("Go")]),t._v(" 本身有什么东西，我们刚刚设置的环境变量又有什么用呢，甚至作为一名老粉，你会纠结 GOPATH 去哪里了，我们一起接着往下看。")]),t._v(" "),s("h5",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),s("p",[t._v("首先，我们在解压的时候会得到一个名为 "),s("code",[t._v("go")]),t._v(" 的文件夹，其中包括了所有 "),s("code",[t._v("Go")]),t._v(" 语言相关的一些文件，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ tree -L 1 go\ngo\n├── api\n├── bin\n├── doc\n├── lib\n├── misc\n├── pkg\n├── src\n├── test\n└── ...\n")])])]),s("p",[t._v("在这之中包含了很多文件夹和文件，我们来简单说明其中主要文件夹的作用：")]),t._v(" "),s("ul",[s("li",[t._v("api：用于存放依照 "),s("code",[t._v("Go")]),t._v(" 版本顺序的API增量列表文件。这里所说的API包含公开的变量、常量、函数等。这些API增量列表文件用于 "),s("code",[t._v("Go")]),t._v(" 语言API检查")]),t._v(" "),s("li",[t._v("bin：用于存放主要的标准命令文件（可执行文件），包含"),s("code",[t._v("go")]),t._v("、"),s("code",[t._v("godoc")]),t._v("、"),s("code",[t._v("gofmt")])]),t._v(" "),s("li",[t._v("blog：用于存放官方博客中的所有文章")]),t._v(" "),s("li",[t._v("doc：用于存放标准库的HTML格式的程序文档。我们可以通过"),s("code",[t._v("godoc")]),t._v("命令启动一个Web程序展示这些文档")]),t._v(" "),s("li",[t._v("lib：用于存放一些特殊的库文件")]),t._v(" "),s("li",[t._v("misc：用于存放一些辅助类的说明和工具")]),t._v(" "),s("li",[t._v("pkg：用于存放安装"),s("code",[t._v("Go")]),t._v("标准库后的所有归档文件（以"),s("code",[t._v(".a")]),t._v("结尾的文件）。注意，你会发现其中有名称为"),s("code",[t._v("linux_amd64")]),t._v("的文件夹，我们称为平台相关目录。这类文件夹的名称由对应的操作系统和计算架构的名称组合而成。通过"),s("code",[t._v("go install")]),t._v("命令，"),s("code",[t._v("Go")]),t._v("程序会被编译成平台相关的归档文件存放到其中")]),t._v(" "),s("li",[t._v("src：用于存放 "),s("code",[t._v("Go")]),t._v("自身、"),s("code",[t._v("Go")]),t._v(" 标准工具以及标准库的所有源码文件")]),t._v(" "),s("li",[t._v("test：存放用来测试和验证"),s("code",[t._v("Go")]),t._v("本身的所有相关文件")])]),t._v(" "),s("h5",{attrs:{id:"环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),s("p",[t._v("你可能会疑惑刚刚设置的环境变量是什么，如下：")]),t._v(" "),s("ul",[s("li",[t._v("GOROOT："),s("code",[t._v("Go")]),t._v("的根目录。")]),t._v(" "),s("li",[t._v("PATH 下增加 "),s("code",[t._v("$GOROOT/bin")]),t._v("："),s("code",[t._v("Go")]),t._v("的 "),s("code",[t._v("bin")]),t._v("下会存放可执行文件，我们把他加入 "),s("code",[t._v("$PATH")]),t._v(" 后，未来拉下来并编译后的二进制文件就可以直接在命令行使用。")])]),t._v(" "),s("p",[t._v("那在什么东西都不下载的情况下，"),s("code",[t._v("$GOBIN")]),t._v(" 下面有什么呢，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bin/ $ls\ngo  gofmt\n")])])]),s("ul",[s("li",[t._v("go："),s("code",[t._v("Go")]),t._v(" 二进制本身。")]),t._v(" "),s("li",[t._v("gofmt：代码格式化工具。")])]),t._v(" "),s("p",[t._v("因此我们刚刚把 "),s("code",[t._v("$GOBIN")]),t._v(" 加入到 "),s("code",[t._v("$PATH")]),t._v(" 后，你执行 "),s("code",[t._v("go version")]),t._v(" 命令后就可以查看到对应的输出结果。")]),t._v(" "),s("p",[t._v("注：MacOS 用 brew 安装的话就不需要。")]),t._v(" "),s("h4",{attrs:{id:"放在哪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#放在哪"}},[t._v("#")]),t._v(" 放在哪")]),t._v(" "),s("p",[t._v("你现在知道 Go 是什么了，也知道 Go 的源码摆在哪了，你肯定会想，那我应用代码放哪呢，答案是在 "),s("strong",[t._v("Go1.11+ 和开启 Go Modules 的情况下摆哪都行")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"了解-go-modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解-go-modules"}},[t._v("#")]),t._v(" 了解 Go Modules")]),t._v(" "),s("h4",{attrs:{id:"了解历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解历史"}},[t._v("#")]),t._v(" 了解历史")]),t._v(" "),s("p",[t._v("在过去，Go 的依赖包管理在工具上混乱且不统一，有 dep，有 glide，有 govendor...甚至还有因为外网的问题，频频导致拉不下来包，很多人苦不堪言，盼着官方给出一个大一统做出表率。")]),t._v(" "),s("p",[t._v("而在 Go modules 正式出来之前还有一个叫 dep 的项目，我们在上面有提到，它是 Go 的一个官方实验性项目，目的也是为了解决 Go 在依赖管理方面的问题，当时社区里面几乎所有的人都认为 dep 肯定就是未来 Go 官方的依赖管理解决方案了。")]),t._v(" "),s("p",[t._v("但是万万没想到，半路杀出个程咬金，Russ Cox 义无反顾地推出了 Go modules，这瞬间导致一石激起千层浪，让社区炸了锅。大家一致认为 Go team 实在是太霸道、太独裁了，连个招呼都不打一声。我记得当时有很多人在网上跟 Russ Cox 口水战，各种依赖管理解决方案的专家都冒出来发表意见，讨论范围甚至一度超出了 Go 语言的圈子触及到了其他语言的领域。")]),t._v(" "),s("p",[t._v("当然，最后，推成功了，Go modules 已经进入官方工具链中，与 Go 深深结合，以前常说的 GOPATH 终将会失去它原有的作用，而且它还提供了 GOPROXY 间接解决了国内访问外网的问题。")]),t._v(" "),s("h4",{attrs:{id:"了解-russ-cox"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#了解-russ-cox"}},[t._v("#")]),t._v(" 了解 Russ Cox")]),t._v(" "),s("p",[t._v("在上文中提到的 Russ Cox 是谁呢，他是 Go 这个项目目前代码提交量最多的人，甚至是第二名的两倍还要多（从 2019年 09 月 30 日前来看）。")]),t._v(" "),s("p",[t._v("Russ Cox 还是 Go 现在的掌舵人（大家应该知道之前 Go 的掌舵人是 Rob Pike，但是听说由于他本人不喜欢特朗普执政所以离开了美国，然后他岁数也挺大的了，所以也正在逐渐交权，不过现在还是在参与 Go 的发展）。")]),t._v(" "),s("p",[t._v("Russ Cox 的个人能力相当强，看问题的角度也很独特，这也就是为什么他刚一提出 Go modules 的概念就能引起那么大范围的响应。虽然是被强推的，但事实也证明当下的 Go modules 表现得确实很优秀，所以这表明一定程度上的 “独裁” 还是可以接受的，至少可以保证一个项目能更加专一地朝着一个方向发展。")]),t._v(" "),s("h4",{attrs:{id:"初始化行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化行为"}},[t._v("#")]),t._v(" 初始化行为")]),t._v(" "),s("p",[t._v("在前面我们已经了解到 Go 依赖包管理的历史情况，接下来我们将正式的进入使用，首先你需要有一个你喜欢的目录，例如："),s("code",[t._v("$ mkdir ~/go-application && cd ~/go-application")]),t._v("，然后执行如下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ mkdir go-gin-example && cd go-gin-example\n\n$ go env -w GO111MODULE=on\n\n$ go env -w GOPROXY=https://goproxy.cn,direct\n\n$ go mod init github.com/EDDYCJY/go-gin-example\ngo: creating new go.mod: module github.com/EDDYCJY/go-gin-example\n\n$ ls\ngo.mod\n")])])]),s("ul",[s("li",[s("code",[t._v("mkdir xxx && cd xxx")]),t._v("：创建并切换到项目目录里去。")]),t._v(" "),s("li",[s("code",[t._v("go env -w GO111MODULE=on")]),t._v("：打开 Go modules 开关（目前在 Go1.13 中默认值为 "),s("code",[t._v("auto")]),t._v("）。")]),t._v(" "),s("li",[s("code",[t._v("go env -w GOPROXY=...")]),t._v("：设置 GOPROXY 代理，这里主要涉及到两个值，第一个是 "),s("code",[t._v("https://goproxy.cn")]),t._v("，它是由七牛云背书的一个强大稳定的 Go 模块代理，可以有效地解决你的外网问题；第二个是 "),s("code",[t._v("direct")]),t._v("，它是一个特殊的 fallback 选项，它的作用是用于指示 Go 在拉取模块时遇到错误会回源到模块版本的源地址去抓取（比如 GitHub 等）。")]),t._v(" "),s("li",[s("code",[t._v("go mod init [MODULE_PATH]")]),t._v("：初始化 Go modules，它将会生成 go.mod 文件，需要注意的是 "),s("code",[t._v("MODULE_PATH")]),t._v(" 填写的是模块引入路径，你可以根据自己的情况修改路径。")])]),t._v(" "),s("p",[t._v("在执行了上述步骤后，初始化工作已完成，我们打开 "),s("code",[t._v("go.mod")]),t._v(" 文件看看，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module github.com/EDDYCJY/go-gin-example\n  \ngo 1.13\n")])])]),s("p",[t._v("默认的 "),s("code",[t._v("go.mod")]),t._v(" 文件里主要是两块内容，一个是当前的模块路径和预期的 Go 语言版本。")]),t._v(" "),s("h4",{attrs:{id:"基础使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础使用"}},[t._v("#")]),t._v(" 基础使用")]),t._v(" "),s("ul",[s("li",[t._v("用 "),s("code",[t._v("go get")]),t._v(" 拉取新的依赖\n"),s("ul",[s("li",[t._v("拉取最新的版本(优先择取 tag)："),s("code",[t._v("go get golang.org/x/text@latest")])]),t._v(" "),s("li",[t._v("拉取 "),s("code",[t._v("master")]),t._v(" 分支的最新 commit："),s("code",[t._v("go get golang.org/x/text@master")])]),t._v(" "),s("li",[t._v("拉取 tag 为 v0.3.2 的 commit："),s("code",[t._v("go get golang.org/x/text@v0.3.2")])]),t._v(" "),s("li",[t._v("拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2："),s("code",[t._v("go get golang.org/x/text@342b2e")])]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go get -u")]),t._v(" 更新现有的依赖")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod download")]),t._v(" 下载 go.mod 文件中指明的所有依赖")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod tidy")]),t._v(" 整理现有的依赖")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod graph")]),t._v(" 查看现有的依赖结构")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod init")]),t._v(" 生成 go.mod 文件 (Go 1.13 中唯一一个可以生成 go.mod 文件的子命令)")])])]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod edit")]),t._v(" 编辑 go.mod 文件")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod vendor")]),t._v(" 导出现有的所有依赖 (事实上 Go modules 正在淡化 Vendor 的概念)")]),t._v(" "),s("li",[t._v("用 "),s("code",[t._v("go mod verify")]),t._v(" 校验一个模块是否被篡改过")])]),t._v(" "),s("p",[t._v("这一小节主要是针对 Go modules 的基础使用讲解，还没具体的使用，是希望你能够留个印象，因为在后面章节会不断夹杂 Go modules 的知识点。")]),t._v(" "),s("p",[t._v("注：建议阅读官方文档 "),s("a",{attrs:{href:"https://github.com/golang/go/wiki/Modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki/Modules"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"开始-gin-之旅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始-gin-之旅"}},[t._v("#")]),t._v(" 开始 Gin 之旅")]),t._v(" "),s("h3",{attrs:{id:"是什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是什么-2"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),s("blockquote",[s("p",[t._v("Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need smashing performance, get yourself some Gin.")])]),t._v(" "),s("p",[t._v("Gin是用 Go 开发的一个微框架，类似 Martinier 的API，重点是小巧、易用、性能好很多，也因为 "),s("a",{attrs:{href:"https://github.com/julienschmidt/httprouter",target:"_blank",rel:"noopener noreferrer"}},[t._v("httprouter"),s("OutboundLink")],1),t._v(" 的性能提高了40倍。")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[t._v("我们回到刚刚创建的 "),s("code",[t._v("go-gin-example")]),t._v(" 目录下，在命令行下执行如下命令：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ go get -u github.com/gin-gonic/gin\ngo: downloading golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223\ngo: extracting golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223\ngo: finding github.com/gin-contrib/sse v0.1.0\ngo: finding github.com/ugorji/go v1.1.7\ngo: finding gopkg.in/yaml.v2 v2.2.3\ngo: finding golang.org/x/sys latest\ngo: finding github.com/mattn/go-isatty v0.0.9\ngo: finding github.com/modern-go/concurrent latest\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("h4",{attrs:{id:"go-sum"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-sum"}},[t._v("#")]),t._v(" go.sum")]),t._v(" "),s("p",[t._v("这时候你再检查一下该目录下，会发现多个了个 "),s("code",[t._v("go.sum")]),t._v(" 文件，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW...\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW...\ngithub.com/gin-contrib/sse v0.0.0-20190301062529-5545eab6dad3 h1:t8FVkw33L+wilf2QiWkw0UV77qRpcH/JHPKGpKa2E8g=\ngithub.com/gin-contrib/sse v0.0.0-20190301062529-5545eab6dad3/go.mod h1:VJ0WA2...\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO...\n...\n")])])]),s("p",[s("code",[t._v("go.sum")]),t._v(" 文件详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。")]),t._v(" "),s("h4",{attrs:{id:"go-mod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-mod"}},[t._v("#")]),t._v(" go.mod")]),t._v(" "),s("p",[t._v("既然我们下载了依赖包，"),s("code",[t._v("go.mod")]),t._v(" 文件会不会有所改变呢，我们再去看看，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module github.com/EDDYCJY/go-gin-example\n  \ngo 1.13\n\nrequire (\n        github.com/gin-contrib/sse v0.1.0 // indirect\n        github.com/gin-gonic/gin v1.4.0 // indirect\n        github.com/golang/protobuf v1.3.2 // indirect\n        github.com/json-iterator/go v1.1.7 // indirect\n        github.com/mattn/go-isatty v0.0.9 // indirect\n        github.com/ugorji/go v1.1.7 // indirect\n        golang.org/x/sys v0.0.0-20190927073244-c990c680b611 // indirect\n        gopkg.in/yaml.v2 v2.2.3 // indirect\n)\n")])])]),s("p",[t._v("确确实实发生了改变，那多出来的东西又是什么呢，"),s("code",[t._v("go.mod")]),t._v(" 文件又保存了什么信息呢，实际上 "),s("code",[t._v("go.mod")]),t._v(" 文件是启用了 Go modules 的项目所必须的最重要的文件，因为它描述了当前项目（也就是当前模块）的元信息，每一行都以一个动词开头，目前有以下 5 个动词:")]),t._v(" "),s("ul",[s("li",[t._v("module：用于定义当前项目的模块路径。")]),t._v(" "),s("li",[t._v("go：用于设置预期的 Go 版本。")]),t._v(" "),s("li",[t._v("require：用于设置一个特定的模块版本。")]),t._v(" "),s("li",[t._v("exclude：用于从使用中排除一个特定的模块版本。")]),t._v(" "),s("li",[t._v("replace：用于将一个模块版本替换为另外一个模块版本。")])]),t._v(" "),s("p",[t._v("你可能还会疑惑 "),s("code",[t._v("indirect")]),t._v(" 是什么东西，"),s("code",[t._v("indirect")]),t._v(" 的意思是传递依赖，也就是非直接依赖。")]),t._v(" "),s("h3",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("编写一个"),s("code",[t._v("test.go")]),t._v("文件")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/gin-gonic/gin"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" gin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/ping"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("gin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("H"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pong"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// listen and serve on 0.0.0.0:8080")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("执行"),s("code",[t._v("test.go")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ go run test.go \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GIN-debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" GET    /ping                     --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" main.main.func1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GIN-debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Environment variable PORT is undefined. Using port :8080 by default\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("GIN-debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Listening and serving HTTP on :8080\n")])])]),s("p",[t._v("访问 "),s("code",[t._v("$HOST:8080/ping")]),t._v("，若返回"),s("code",[t._v('{"message":"pong"}')]),t._v("则正确")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8080/ping\n")])])]),s("p",[t._v("至此，我们的环境安装和初步运行都基本完成了。")]),t._v(" "),s("h2",{attrs:{id:"再想一想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再想一想"}},[t._v("#")]),t._v(" 再想一想")]),t._v(" "),s("p",[t._v("刚刚在执行了命令 "),s("code",[t._v("$ go get -u github.com/gin-gonic/gin")]),t._v(" 后，我们查看了 "),s("code",[t._v("go.mod")]),t._v(" 文件，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("...\nrequire (\n        github.com/gin-contrib/sse v0.1.0 // indirect\n        github.com/gin-gonic/gin v1.4.0 // indirect\n        ...\n)\n")])])]),s("p",[t._v("你会发现 "),s("code",[t._v("go.mod")]),t._v(" 里的 "),s("code",[t._v("github.com/gin-gonic/gin")]),t._v(" 是 "),s("code",[t._v("indirect")]),t._v(" 模式，这显然不对啊，因为我们的应用程序已经实际的编写了 gin server 代码了，我就想把它调对，怎么办呢，在应用根目录下执行如下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ go mod tidy\n")])])]),s("p",[t._v("该命令主要的作用是整理现有的依赖，非常的常用，执行后 "),s("code",[t._v("go.mod")]),t._v(" 文件内容为：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("...\nrequire (\n        github.com/gin-contrib/sse v0.1.0 // indirect\n        github.com/gin-gonic/gin v1.4.0\n        ...\n)\n")])])]),s("p",[t._v("可以看到 "),s("code",[t._v("github.com/gin-gonic/gin")]),t._v(" 已经变成了直接依赖，调整完毕。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("h3",{attrs:{id:"本系列示例代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[t._v("#")]),t._v(" 本系列示例代码")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/EDDYCJY/go-gin-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("go-gin-example"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"相关文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关文档"}},[t._v("#")]),t._v(" 相关文档")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/gin-gonic/gin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gin"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://gin-gonic.github.io/gin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gin Web Framework"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://book.eddycjy.com/golang/talk/goproxy-cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("干货满满的 Go Modules 和 goproxy.cn"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"关于"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[t._v("#")]),t._v(" 关于")]),t._v(" "),s("h3",{attrs:{id:"修改记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改记录"}},[t._v("#")]),t._v(" 修改记录")]),t._v(" "),s("ul",[s("li",[t._v("第一版：2018年02月16日发布文章")]),t._v(" "),s("li",[t._v("第二版：2019年10月01日修改文章")])]),t._v(" "),s("h2",{attrs:{id:"？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#？"}},[t._v("#")]),t._v(" ？")]),t._v(" "),s("p",[t._v("如果有任何疑问或错误，欢迎在 "),s("a",{attrs:{href:"https://github.com/EDDYCJY/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("issues"),s("OutboundLink")],1),t._v(" 进行提问或给予修正意见，如果喜欢或对你有所帮助，欢迎 Star，对作者是一种鼓励和推进。")]),t._v(" "),s("h3",{attrs:{id:"我的公众号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我的公众号"}},[t._v("#")]),t._v(" 我的公众号")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.eddycjy.com/8d0b0c3a11e74efd5fdfd7910257e70b.jpg",alt:"image"}})])])}),[],!1,null,null,null);a.default=o.exports}}]);