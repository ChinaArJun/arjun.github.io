(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{640:function(e,t,a){"use strict";a.r(t);var r=a(44),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"定制-gorm-callbacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制-gorm-callbacks"}},[e._v("#")]),e._v(" 定制 GORM Callbacks")]),e._v(" "),a("p",[e._v("项目地址：https://github.com/EDDYCJY/go-gin-example")]),e._v(" "),a("h2",{attrs:{id:"涉及知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#涉及知识点"}},[e._v("#")]),e._v(" 涉及知识点")]),e._v(" "),a("ul",[a("li",[e._v("GORM")])]),e._v(" "),a("h2",{attrs:{id:"本文目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本文目标"}},[e._v("#")]),e._v(" 本文目标")]),e._v(" "),a("blockquote",[a("p",[e._v("GORM itself is powered by Callbacks, so you could fully customize GORM as you want")])]),e._v(" "),a("p",[e._v("GORM 本身是由回调驱动的，所以我们可以根据需要完全定制 GORM，以此达到我们的目的，如下：")]),e._v(" "),a("ul",[a("li",[e._v("注册一个新的回调")]),e._v(" "),a("li",[e._v("删除现有的回调")]),e._v(" "),a("li",[e._v("替换现有的回调")]),e._v(" "),a("li",[e._v("注册回调的顺序")])]),e._v(" "),a("p",[e._v("在 GORM 中包含以上四类 Callbacks，我们结合项目选用 “替换现有的回调” 来解决一个小痛点。")]),e._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[e._v("#")]),e._v(" 问题")]),e._v(" "),a("p",[e._v("在 models 目录下，我们包含 tag.go 和 article.go 两个文件，他们有一个问题，就是 BeforeCreate、BeforeUpdate 重复出现了，那难道 100 个文件，就要写一百次吗？")]),e._v(" "),a("p",[e._v("1、tag.go")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2018/04/14/5ad20efdba409.jpg",alt:"image"}})]),e._v(" "),a("p",[e._v("2、article.go")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2018/04/14/5ad20ebacc4c9.jpg",alt:"image"}})]),e._v(" "),a("p",[e._v("显然这是不可能的，如果先前你已经意识到这个问题，那挺OK，但没有的话，现在开始就要改")]),e._v(" "),a("h3",{attrs:{id:"解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[e._v("#")]),e._v(" 解决")]),e._v(" "),a("p",[e._v("在这里我们通过 Callbacks 来实现功能，不需要一个个文件去编写")]),e._v(" "),a("h3",{attrs:{id:"实现callbacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现callbacks"}},[e._v("#")]),e._v(" 实现Callbacks")]),e._v(" "),a("p",[e._v("打开 models 目录下的 models.go 文件，实现以下两个方法：")]),e._v(" "),a("p",[e._v("1、updateTimeStampForCreateCallback")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating\nfunc updateTimeStampForCreateCallback(scope *gorm.Scope) {\n    if !scope.HasError() {\n        nowTime := time.Now().Unix()\n        if createTimeField, ok := scope.FieldByName("CreatedOn"); ok {\n            if createTimeField.IsBlank {\n                createTimeField.Set(nowTime)\n            }\n        }\n\n        if modifyTimeField, ok := scope.FieldByName("ModifiedOn"); ok {\n            if modifyTimeField.IsBlank {\n                modifyTimeField.Set(nowTime)\n            }\n        }\n    }\n}\n')])])]),a("p",[e._v("在这段方法中，会完成以下功能")]),e._v(" "),a("ul",[a("li",[e._v("检查是否有含有错误（db.Error）")]),e._v(" "),a("li",[a("code",[e._v("scope.FieldByName")]),e._v(" 通过 "),a("code",[e._v("scope.Fields()")]),e._v(" 获取所有字段，判断当前是否包含所需字段")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for _, field := range scope.Fields() {\n    if field.Name == name || field.DBName == name {\n        return field, true\n    }\n    if field.DBName == dbName {\n        mostMatchedField = field\n    }\n}\n")])])]),a("ul",[a("li",[a("code",[e._v("field.IsBlank")]),e._v(" 可判断该字段的值是否为空")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("func isBlank(value reflect.Value) bool {\n\tswitch value.Kind() {\n\tcase reflect.String:\n\t\treturn value.Len() == 0\n\tcase reflect.Bool:\n\t\treturn !value.Bool()\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n\t\treturn value.Int() == 0\n\tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:\n\t\treturn value.Uint() == 0\n\tcase reflect.Float32, reflect.Float64:\n\t\treturn value.Float() == 0\n\tcase reflect.Interface, reflect.Ptr:\n\t\treturn value.IsNil()\n\t}\n\n\treturn reflect.DeepEqual(value.Interface(), reflect.Zero(value.Type()).Interface())\n}\n")])])]),a("ul",[a("li",[e._v("若为空则 "),a("code",[e._v("field.Set")]),e._v(" 用于给该字段设置值，参数为 "),a("code",[e._v("interface{}")])])]),e._v(" "),a("p",[e._v("2、updateTimeStampForUpdateCallback")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// updateTimeStampForUpdateCallback will set `ModifyTime` when updating\nfunc updateTimeStampForUpdateCallback(scope *gorm.Scope) {\n    if _, ok := scope.Get("gorm:update_column"); !ok {\n        scope.SetColumn("ModifiedOn", time.Now().Unix())\n    }\n}\n')])])]),a("ul",[a("li",[a("code",[e._v("scope.Get(...)")]),e._v(" 根据入参获取设置了字面值的参数，例如本文中是 "),a("code",[e._v("gorm:update_column")]),e._v(" ，它会去查找含这个字面值的字段属性")]),e._v(" "),a("li",[a("code",[e._v("scope.SetColumn(...)")]),e._v(" 假设没有指定 "),a("code",[e._v("update_column")]),e._v(" 的字段，我们默认在更新回调设置 "),a("code",[e._v("ModifiedOn")]),e._v(" 的值")])]),e._v(" "),a("h3",{attrs:{id:"注册callbacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册callbacks"}},[e._v("#")]),e._v(" 注册Callbacks")]),e._v(" "),a("p",[e._v("在上面小节我已经把回调方法编写好了，接下来需要将其注册进 GORM 的钩子里，但其本身自带 Create 和 Update 回调，因此调用替换即可")]),e._v(" "),a("p",[e._v("在 models.go 的 init 函数中，增加以下语句")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('db.Callback().Create().Replace("gorm:update_time_stamp", updateTimeStampForCreateCallback)\ndb.Callback().Update().Replace("gorm:update_time_stamp", updateTimeStampForUpdateCallback)\n')])])]),a("h3",{attrs:{id:"验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),a("p",[e._v("访问 AddTag 接口，成功后检查数据库，可发现 "),a("code",[e._v("created_on")]),e._v(" 和 "),a("code",[e._v("modified_on")]),e._v(" 字段都为当前执行时间")]),e._v(" "),a("p",[e._v("访问 EditTag 接口，可发现 "),a("code",[e._v("modified_on")]),e._v(" 为最后一次执行更新的时间")]),e._v(" "),a("h2",{attrs:{id:"拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展"}},[e._v("#")]),e._v(" 拓展")]),e._v(" "),a("p",[e._v("我们想到，在实际项目中硬删除是较少存在的，那么是否可以通过 Callbacks 来完成这个功能呢？")]),e._v(" "),a("p",[e._v("答案是可以的，我们在先前 "),a("code",[e._v("Model struct")]),e._v(" 增加 "),a("code",[e._v("DeletedOn")]),e._v(" 变量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('type Model struct {\n    ID int `gorm:"primary_key" json:"id"`\n    CreatedOn int `json:"created_on"`\n    ModifiedOn int `json:"modified_on"`\n    DeletedOn int `json:"deleted_on"`\n}\n')])])]),a("h3",{attrs:{id:"实现callbacks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现callbacks-2"}},[e._v("#")]),e._v(" 实现Callbacks")]),e._v(" "),a("p",[e._v("打开 models 目录下的 models.go 文件，实现以下方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('func deleteCallback(scope *gorm.Scope) {\n    if !scope.HasError() {\n        var extraOption string\n        if str, ok := scope.Get("gorm:delete_option"); ok {\n            extraOption = fmt.Sprint(str)\n        }\n\n        deletedOnField, hasDeletedOnField := scope.FieldByName("DeletedOn")\n\n        if !scope.Search.Unscoped && hasDeletedOnField {\n            scope.Raw(fmt.Sprintf(\n                "UPDATE %v SET %v=%v%v%v",\n                scope.QuotedTableName(),\n                scope.Quote(deletedOnField.DBName),\n                scope.AddToVars(time.Now().Unix()),\n                addExtraSpaceIfExist(scope.CombinedConditionSql()),\n                addExtraSpaceIfExist(extraOption),\n            )).Exec()\n        } else {\n            scope.Raw(fmt.Sprintf(\n                "DELETE FROM %v%v%v",\n                scope.QuotedTableName(),\n                addExtraSpaceIfExist(scope.CombinedConditionSql()),\n                addExtraSpaceIfExist(extraOption),\n            )).Exec()\n        }\n    }\n}\n\nfunc addExtraSpaceIfExist(str string) string {\n    if str != "" {\n        return " " + str\n    }\n    return ""\n}\n')])])]),a("ul",[a("li",[a("code",[e._v('scope.Get("gorm:delete_option")')]),e._v(" 检查是否手动指定了delete_option")]),e._v(" "),a("li",[a("code",[e._v('scope.FieldByName("DeletedOn")')]),e._v(" 获取我们约定的删除字段，若存在则 "),a("code",[e._v("UPDATE")]),e._v(" 软删除，若不存在则 "),a("code",[e._v("DELETE")]),e._v(" 硬删除")]),e._v(" "),a("li",[a("code",[e._v("scope.QuotedTableName()")]),e._v(" 返回引用的表名，这个方法 GORM 会根据自身逻辑对表名进行一些处理")]),e._v(" "),a("li",[a("code",[e._v("scope.CombinedConditionSql()")]),e._v(" 返回组合好的条件SQL，看一下方法原型很明了")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('func (scope *Scope) CombinedConditionSql() string {\n\tjoinSQL := scope.joinsSQL()\n\twhereSQL := scope.whereSQL()\n\tif scope.Search.raw {\n\t\twhereSQL = strings.TrimSuffix(strings.TrimPrefix(whereSQL, "WHERE ("), ")")\n\t}\n\treturn joinSQL + whereSQL + scope.groupSQL() +\n\t\tscope.havingSQL() + scope.orderSQL() + scope.limitAndOffsetSQL()\n}\n')])])]),a("ul",[a("li",[a("code",[e._v("scope.AddToVars")]),e._v(" 该方法可以添加值作为SQL的参数，也可用于防范SQL注入")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('func (scope *Scope) AddToVars(value interface{}) string {\n\t_, skipBindVar := scope.InstanceGet("skip_bindvar")\n\n\tif expr, ok := value.(*expr); ok {\n\t\texp := expr.expr\n\t\tfor _, arg := range expr.args {\n\t\t\tif skipBindVar {\n\t\t\t\tscope.AddToVars(arg)\n\t\t\t} else {\n\t\t\t\texp = strings.Replace(exp, "?", scope.AddToVars(arg), 1)\n\t\t\t}\n\t\t}\n\t\treturn exp\n\t}\n\n\tscope.SQLVars = append(scope.SQLVars, value)\n\n\tif skipBindVar {\n\t\treturn "?"\n\t}\n\treturn scope.Dialect().BindVar(len(scope.SQLVars))\n}\n')])])]),a("h3",{attrs:{id:"注册callbacks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册callbacks-2"}},[e._v("#")]),e._v(" 注册Callbacks")]),e._v(" "),a("p",[e._v("在 models.go 的 init 函数中，增加以下删除的回调")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('db.Callback().Delete().Replace("gorm:delete", deleteCallback)\n')])])]),a("h3",{attrs:{id:"验证-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证-2"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),a("p",[e._v("重启服务，访问 DeleteTag 接口，成功后即可发现 deleted_on 字段有值")]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("在这一章节中，我们结合 GORM 完成了新增、更新、查询的 Callbacks，在实际项目中常常也是这么使用")]),e._v(" "),a("p",[e._v("毕竟，一个钩子的事，就没有必要自己手写过多不必要的代码了")]),e._v(" "),a("p",[e._v("（注意，增加了软删除后，先前的代码需要增加 "),a("code",[e._v("deleted_on")]),e._v(" 的判断）")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("h3",{attrs:{id:"本系列示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[e._v("#")]),e._v(" 本系列示例代码")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/EDDYCJY/go-gin-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-gin-example"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[e._v("#")]),e._v(" 文档")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://gorm.io/docs/write_plugins.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("gorm"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"关于"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[e._v("#")]),e._v(" 关于")]),e._v(" "),a("h3",{attrs:{id:"修改记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改记录"}},[e._v("#")]),e._v(" 修改记录")]),e._v(" "),a("ul",[a("li",[e._v("第一版：2018年02月16日发布文章")]),e._v(" "),a("li",[e._v("第二版：2019年10月01日修改文章")])]),e._v(" "),a("h2",{attrs:{id:"？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#？"}},[e._v("#")]),e._v(" ？")]),e._v(" "),a("p",[e._v("如果有任何疑问或错误，欢迎在 "),a("a",{attrs:{href:"https://github.com/EDDYCJY/blog",target:"_blank",rel:"noopener noreferrer"}},[e._v("issues"),a("OutboundLink")],1),e._v(" 进行提问或给予修正意见，如果喜欢或对你有所帮助，欢迎 Star，对作者是一种鼓励和推进。")]),e._v(" "),a("h3",{attrs:{id:"我的公众号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的公众号"}},[e._v("#")]),e._v(" 我的公众号")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/8d0b0c3a11e74efd5fdfd7910257e70b.jpg",alt:"image"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);