(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{650:function(e,t,n){"use strict";n.r(t);var a=n(44),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"gin搭建blog-api-s-（一）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gin搭建blog-api-s-（一）"}},[e._v("#")]),e._v(" Gin搭建Blog API's （一）")]),e._v(" "),n("p",[e._v("项目地址：https://github.com/EDDYCJY/go-gin-example")]),e._v(" "),n("h2",{attrs:{id:"思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[e._v("#")]),e._v(" 思考")]),e._v(" "),n("p",[e._v("首先，在一个初始项目开始前，大家都要思考一下")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("程序的文本配置写在代码中，好吗？")])]),e._v(" "),n("li",[n("p",[e._v("API 的错误码硬编码在程序中，合适吗？")])]),e._v(" "),n("li",[n("p",[e._v("db句柄谁都去"),n("code",[e._v("Open")]),e._v("，没有统一管理，好吗？")])]),e._v(" "),n("li",[n("p",[e._v("获取分页等公共参数，谁都自己写一套逻辑，好吗？")])])]),e._v(" "),n("p",[e._v("显然在较正规的项目中，这些问题的答案都是"),n("strong",[e._v("不可以")]),e._v("，为了解决这些问题，我们挑选一款读写配置文件的库，目前比较火的有 "),n("a",{attrs:{href:"https://github.com/spf13/viper",target:"_blank",rel:"noopener noreferrer"}},[e._v("viper"),n("OutboundLink")],1),e._v("，有兴趣你未来可以简单了解一下，没兴趣的话等以后接触到再说。")]),e._v(" "),n("p",[e._v("但是本系列选用 "),n("a",{attrs:{href:"https://github.com/go-ini/ini",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-ini/ini"),n("OutboundLink")],1),e._v(" ，它的 "),n("a",{attrs:{href:"https://ini.unknwon.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("中文文档"),n("OutboundLink")],1),e._v("。大家是必须需要要简单阅读它的文档，再接着完成后面的内容。")]),e._v(" "),n("h2",{attrs:{id:"本文目标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本文目标"}},[e._v("#")]),e._v(" 本文目标")]),e._v(" "),n("ul",[n("li",[e._v("编写一个简单的API错误码包。")]),e._v(" "),n("li",[e._v("完成一个 Demo 示例。")]),e._v(" "),n("li",[e._v("讲解 Demo 所涉及的知识点。")])]),e._v(" "),n("h2",{attrs:{id:"介绍和初始化项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍和初始化项目"}},[e._v("#")]),e._v(" 介绍和初始化项目")]),e._v(" "),n("h3",{attrs:{id:"初始化项目目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目目录"}},[e._v("#")]),e._v(" 初始化项目目录")]),e._v(" "),n("p",[e._v("在前一章节中，我们初始化了一个 "),n("code",[e._v("go-gin-example")]),e._v(" 项目，接下来我们需要继续新增如下目录结构：")]),e._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("go-gin-example/\n├── conf\n├── middleware\n├── models\n├── pkg\n├── routers\n└── runtime\n")])])]),n("ul",[n("li",[e._v("conf：用于存储配置文件")]),e._v(" "),n("li",[e._v("middleware：应用中间件")]),e._v(" "),n("li",[e._v("models：应用数据库模型")]),e._v(" "),n("li",[e._v("pkg：第三方包")]),e._v(" "),n("li",[e._v("routers 路由逻辑处理")]),e._v(" "),n("li",[e._v("runtime：应用运行时数据")])]),e._v(" "),n("h3",{attrs:{id:"添加-go-modules-replace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加-go-modules-replace"}},[e._v("#")]),e._v(" 添加 Go Modules Replace")]),e._v(" "),n("p",[e._v("打开 "),n("code",[e._v("go.mod")]),e._v(" 文件，新增 "),n("code",[e._v("replace")]),e._v(" 配置项，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module github.com/EDDYCJY/go-gin-example\n\ngo 1.13\n\nrequire (...)\n\nreplace (\n\t\tgithub.com/EDDYCJY/go-gin-example/pkg/setting => ~/go-application/go-gin-example/pkg/setting\n\t\tgithub.com/EDDYCJY/go-gin-example/conf    \t  => ~/go-application/go-gin-example/pkg/conf\n\t\tgithub.com/EDDYCJY/go-gin-example/middleware  => ~/go-application/go-gin-example/middleware\n\t\tgithub.com/EDDYCJY/go-gin-example/models \t  => ~/go-application/go-gin-example/models\n\t\tgithub.com/EDDYCJY/go-gin-example/routers \t  => ~/go-application/go-gin-example/routers\n)\n")])])]),n("p",[e._v("可能你会不理解为什么要特意跑来加 "),n("code",[e._v("replace")]),e._v(" 配置项，首先你要看到我们使用的是完整的外部模块引用路径（"),n("code",[e._v("github.com/EDDYCJY/go-gin-example/xxx")]),e._v("），而这个模块还没推送到远程，是没有办法下载下来的，因此需要用 "),n("code",[e._v("replace")]),e._v(" 将其指定读取本地的模块路径，这样子就可以解决本地模块读取的问题。")]),e._v(" "),n("p",[n("strong",[e._v("注：后续每新增一个本地应用目录，你都需要主动去 go.mod 文件里新增一条 replace（我不会提醒你），如果你漏了，那么编译时会出现报错，找不到那个模块。")])]),e._v(" "),n("h3",{attrs:{id:"初始项目数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始项目数据库"}},[e._v("#")]),e._v(" 初始项目数据库")]),e._v(" "),n("p",[e._v("新建 "),n("code",[e._v("blog")]),e._v(" 数据库，编码为"),n("code",[e._v("utf8_general_ci")]),e._v("，在 "),n("code",[e._v("blog")]),e._v(" 数据库下，新建以下表")]),e._v(" "),n("p",[n("strong",[e._v("1、 标签表")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE TABLE `blog_tag` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(100) DEFAULT '' COMMENT '标签名称',\n  `created_on` int(10) unsigned DEFAULT '0' COMMENT '创建时间',\n  `created_by` varchar(100) DEFAULT '' COMMENT '创建人',\n  `modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',\n  `modified_by` varchar(100) DEFAULT '' COMMENT '修改人',\n  `deleted_on` int(10) unsigned DEFAULT '0',\n  `state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用、1为启用',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章标签管理';\n")])])]),n("p",[n("strong",[e._v("2、 文章表")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE TABLE `blog_article` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `tag_id` int(10) unsigned DEFAULT '0' COMMENT '标签ID',\n  `title` varchar(100) DEFAULT '' COMMENT '文章标题',\n  `desc` varchar(255) DEFAULT '' COMMENT '简述',\n  `content` text,\n  `created_on` int(11) DEFAULT NULL,\n  `created_by` varchar(100) DEFAULT '' COMMENT '创建人',\n  `modified_on` int(10) unsigned DEFAULT '0' COMMENT '修改时间',\n  `modified_by` varchar(255) DEFAULT '' COMMENT '修改人',\n  `deleted_on` int(10) unsigned DEFAULT '0',\n  `state` tinyint(3) unsigned DEFAULT '1' COMMENT '状态 0为禁用1为启用',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章管理';\n")])])]),n("p",[n("strong",[e._v("3、 认证表")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE TABLE `blog_auth` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `username` varchar(50) DEFAULT '' COMMENT '账号',\n  `password` varchar(50) DEFAULT '' COMMENT '密码',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `blog`.`blog_auth` (`id`, `username`, `password`) VALUES (null, 'test', 'test123456');\n\n")])])]),n("h2",{attrs:{id:"编写项目配置包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写项目配置包"}},[e._v("#")]),e._v(" 编写项目配置包")]),e._v(" "),n("p",[e._v("在 "),n("code",[e._v("go-gin-example")]),e._v(" 应用目录下，拉取 "),n("code",[e._v("go-ini/ini")]),e._v(" 的依赖包，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ go get -u github.com/go-ini/ini\ngo: finding github.com/go-ini/ini v1.48.0\ngo: downloading github.com/go-ini/ini v1.48.0\ngo: extracting github.com/go-ini/ini v1.48.0\n")])])]),n("p",[e._v("接下来我们需要编写基础的应用配置文件，在 "),n("code",[e._v("go-gin-example")]),e._v(" 的"),n("code",[e._v("conf")]),e._v("目录下新建"),n("code",[e._v("app.ini")]),e._v("文件，写入内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#debug or release\nRUN_MODE = debug\n\n[app]\nPAGE_SIZE = 10\nJWT_SECRET = 23347$040412\n\n[server]\nHTTP_PORT = 8000\nREAD_TIMEOUT = 60\nWRITE_TIMEOUT = 60\n\n[database]\nTYPE = mysql\nUSER = 数据库账号\nPASSWORD = 数据库密码\n#127.0.0.1:3306\nHOST = 数据库IP:数据库端口号\nNAME = blog\nTABLE_PREFIX = blog_\n")])])]),n("p",[e._v("建立调用配置的"),n("code",[e._v("setting")]),e._v("模块，在"),n("code",[e._v("go-gin-example")]),e._v("的"),n("code",[e._v("pkg")]),e._v("目录下新建"),n("code",[e._v("setting")]),e._v("目录（注意新增 replace 配置），新建 "),n("code",[e._v("setting.go")]),e._v(" 文件，写入内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package setting\n\nimport (\n\t"log"\n\t"time"\n\n\t"github.com/go-ini/ini"\n)\n\nvar (\n\tCfg *ini.File\n\n\tRunMode string\n\t\n\tHTTPPort int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\n\tPageSize int\n\tJwtSecret string\n)\n\nfunc init() {\n\tvar err error\n\tCfg, err = ini.Load("conf/app.ini")\n\tif err != nil {\n\t\tlog.Fatalf("Fail to parse \'conf/app.ini\': %v", err)\n\t}\n\n\tLoadBase()\n\tLoadServer()\n\tLoadApp()\n}\n\nfunc LoadBase() {\n\tRunMode = Cfg.Section("").Key("RUN_MODE").MustString("debug")\n}\n\nfunc LoadServer() {\n\tsec, err := Cfg.GetSection("server")\n\tif err != nil {\n\t\tlog.Fatalf("Fail to get section \'server\': %v", err)\n\t}\n\n\tHTTPPort = sec.Key("HTTP_PORT").MustInt(8000)\n\tReadTimeout = time.Duration(sec.Key("READ_TIMEOUT").MustInt(60)) * time.Second\n\tWriteTimeout =  time.Duration(sec.Key("WRITE_TIMEOUT").MustInt(60)) * time.Second\t\n}\n\nfunc LoadApp() {\n\tsec, err := Cfg.GetSection("app")\n\tif err != nil {\n\t\tlog.Fatalf("Fail to get section \'app\': %v", err)\n\t}\n\n\tJwtSecret = sec.Key("JWT_SECRET").MustString("!@)*#)!@U#@*!@!)")\n\tPageSize = sec.Key("PAGE_SIZE").MustInt(10)\n}\n')])])]),n("p",[e._v("当前的目录结构：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go-gin-example\n├── conf\n│   └── app.ini\n├── go.mod\n├── go.sum\n├── middleware\n├── models\n├── pkg\n│   └── setting.go\n├── routers\n└── runtime\n")])])]),n("h2",{attrs:{id:"编写api错误码包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写api错误码包"}},[e._v("#")]),e._v(" 编写API错误码包")]),e._v(" "),n("p",[e._v("建立错误码的"),n("code",[e._v("e")]),e._v("模块，在"),n("code",[e._v("go-gin-example")]),e._v("的"),n("code",[e._v("pkg")]),e._v("目录下新建"),n("code",[e._v("e")]),e._v("目录（注意新增 replace 配置），新建"),n("code",[e._v("code.go")]),e._v("和"),n("code",[e._v("msg.go")]),e._v("文件，写入内容：")]),e._v(" "),n("p",[n("strong",[e._v("1、 code.go：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package e\n\nconst (\n\tSUCCESS = 200\n\tERROR = 500\n\tINVALID_PARAMS = 400\n\n\tERROR_EXIST_TAG = 10001\n\tERROR_NOT_EXIST_TAG = 10002\n\tERROR_NOT_EXIST_ARTICLE = 10003\n\n\tERROR_AUTH_CHECK_TOKEN_FAIL = 20001\n\tERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002\n\tERROR_AUTH_TOKEN = 20003\n\tERROR_AUTH = 20004\n)\n")])])]),n("p",[n("strong",[e._v("2、 msg.go：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package e\n\nvar MsgFlags = map[int]string {\n\tSUCCESS : "ok",\n\tERROR : "fail",\n\tINVALID_PARAMS : "请求参数错误",\n\tERROR_EXIST_TAG : "已存在该标签名称",\n\tERROR_NOT_EXIST_TAG : "该标签不存在",\n\tERROR_NOT_EXIST_ARTICLE : "该文章不存在",\n\tERROR_AUTH_CHECK_TOKEN_FAIL : "Token鉴权失败",\n\tERROR_AUTH_CHECK_TOKEN_TIMEOUT : "Token已超时",\n\tERROR_AUTH_TOKEN : "Token生成失败",\n\tERROR_AUTH : "Token错误",\n}\n\nfunc GetMsg(code int) string {\n\tmsg, ok := MsgFlags[code]\n\tif ok {\n\t\treturn msg\n\t}\n\n\treturn MsgFlags[ERROR]\n}\n')])])]),n("h2",{attrs:{id:"编写工具包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写工具包"}},[e._v("#")]),e._v(" 编写工具包")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("go-gin-example")]),e._v("的"),n("code",[e._v("pkg")]),e._v("目录下新建"),n("code",[e._v("util")]),e._v("目录（注意新增 replace 配置），并拉取"),n("code",[e._v("com")]),e._v("的依赖包，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go get -u github.com/unknwon/com\n")])])]),n("h3",{attrs:{id:"编写分页页码的获取方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写分页页码的获取方法"}},[e._v("#")]),e._v(" 编写分页页码的获取方法")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("util")]),e._v("目录下新建"),n("code",[e._v("pagination.go")]),e._v("，写入内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package util\n\nimport (\n\t"github.com/gin-gonic/gin"\n\t"github.com/unknwon/com"\n\n\t"github.com/EDDYCJY/go-gin-example/pkg/setting"\n)\n\nfunc GetPage(c *gin.Context) int {\n\tresult := 0\n\tpage, _ := com.StrTo(c.Query("page")).Int()\n    if page > 0 {\n        result = (page - 1) * setting.PageSize\n    }\n\n    return result\n}\n')])])]),n("h2",{attrs:{id:"编写models-init"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写models-init"}},[e._v("#")]),e._v(" 编写models init")]),e._v(" "),n("p",[e._v("拉取"),n("code",[e._v("gorm")]),e._v("的依赖包，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go get -u github.com/jinzhu/gorm\n")])])]),n("p",[e._v("拉取"),n("code",[e._v("mysql")]),e._v("驱动的依赖包，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go get -u github.com/go-sql-driver/mysql\n")])])]),n("p",[e._v("完成后，在"),n("code",[e._v("go-gin-example")]),e._v("的"),n("code",[e._v("models")]),e._v("目录下新建"),n("code",[e._v("models.go")]),e._v("，用于"),n("code",[e._v("models")]),e._v("的初始化使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package models\n\nimport (\n\t"log"\n\t"fmt"\n\n\t"github.com/jinzhu/gorm"\n\t_ "github.com/jinzhu/gorm/dialects/mysql"\n\n\t"github.com/EDDYCJY/go-gin-example/pkg/setting"\n)\n\nvar db *gorm.DB\n\ntype Model struct {\n\tID int `gorm:"primary_key" json:"id"`\n\tCreatedOn int `json:"created_on"`\n\tModifiedOn int `json:"modified_on"`\n}\n\nfunc init() {\n\tvar (\n\t\terr error\n\t\tdbType, dbName, user, password, host, tablePrefix string\n\t)\n\n\tsec, err := setting.Cfg.GetSection("database")\n\tif err != nil {\n\t\tlog.Fatal(2, "Fail to get section \'database\': %v", err)\n\t}\n\n\tdbType = sec.Key("TYPE").String()\n\tdbName = sec.Key("NAME").String()\n\tuser = sec.Key("USER").String()\n\tpassword = sec.Key("PASSWORD").String()\n\thost = sec.Key("HOST").String()\n\ttablePrefix = sec.Key("TABLE_PREFIX").String()\n\n\tdb, err = gorm.Open(dbType, fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local", \n\t\tuser, \n\t\tpassword, \n\t\thost, \n\t\tdbName))\n\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\tgorm.DefaultTableNameHandler = func (db *gorm.DB, defaultTableName string) string  {\n\t    return tablePrefix + defaultTableName;\n\t}\n\n\tdb.SingularTable(true)\n\tdb.LogMode(true)\n\tdb.DB().SetMaxIdleConns(10)\n\tdb.DB().SetMaxOpenConns(100)\n}\n\nfunc CloseDB() {\n\tdefer db.Close()\n}\n')])])]),n("h2",{attrs:{id:"编写项目启动、路由文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写项目启动、路由文件"}},[e._v("#")]),e._v(" 编写项目启动、路由文件")]),e._v(" "),n("p",[e._v("最基础的准备工作完成啦，让我们开始编写Demo吧！")]),e._v(" "),n("h3",{attrs:{id:"编写demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写demo"}},[e._v("#")]),e._v(" 编写Demo")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("go-gin-example")]),e._v("下建立"),n("code",[e._v("main.go")]),e._v("作为启动文件（也就是"),n("code",[e._v("main")]),e._v("包），我们先写个"),n("strong",[e._v("Demo")]),e._v("，帮助大家理解，写入文件内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package main\n\nimport (\n    "fmt"\n\t  "net/http"\n\n    "github.com/gin-gonic/gin"\n\n\t  "github.com/EDDYCJY/go-gin-example/pkg/setting"\n)\n\nfunc main() {\n\trouter := gin.Default()\n    router.GET("/test", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t"message": "test",\n\t\t})\n\t})\n\n\ts := &http.Server{\n\t\tAddr:           fmt.Sprintf(":%d", setting.HTTPPort),\n\t\tHandler:        router,\n\t\tReadTimeout:    setting.ReadTimeout,\n\t\tWriteTimeout:   setting.WriteTimeout,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\ts.ListenAndServe()\n}\n')])])]),n("p",[e._v("执行"),n("code",[e._v("go run main.go")]),e._v("，查看命令行是否显示")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.\n - using env:\texport GIN_MODE=release\n - using code:\tgin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /test                     --\x3e main.main.func1 (3 handlers)\n')])])]),n("p",[e._v("在本机执行"),n("code",[e._v("curl 127.0.0.1:8000/test")]),e._v("，检查是否返回"),n("code",[e._v('{"message":"test"}')]),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"知识点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[e._v("#")]),e._v(" 知识点")]),e._v(" "),n("p",[n("strong",[e._v("那么，我们来延伸一下Demo所涉及的知识点！")])]),e._v(" "),n("h5",{attrs:{id:"标准库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#标准库"}},[e._v("#")]),e._v(" 标准库")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://golang.org/pkg/fmt/",target:"_blank",rel:"noopener noreferrer"}},[e._v("fmt"),n("OutboundLink")],1),e._v("：实现了类似C语言printf和scanf的格式化I/O。格式化动作（'verb'）源自C语言但更简单")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://golang.org/pkg/net/http/",target:"_blank",rel:"noopener noreferrer"}},[e._v("net/http"),n("OutboundLink")],1),e._v("：提供了HTTP客户端和服务端的实现")])]),e._v(" "),n("h5",{attrs:{id:"gin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gin"}},[e._v("#")]),e._v(" "),n("strong",[e._v("Gin")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://gowalker.org/github.com/gin-gonic/gin#Default",target:"_blank",rel:"noopener noreferrer"}},[e._v("gin.Default()"),n("OutboundLink")],1),e._v("：返回Gin的"),n("code",[e._v("type Engine struct{...}")]),e._v("，里面包含"),n("code",[e._v("RouterGroup")]),e._v("，相当于创建一个路由"),n("code",[e._v("Handlers")]),e._v("，可以后期绑定各类的路由规则和函数、中间件等")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://gowalker.org/github.com/gin-gonic/gin#IRoutes",target:"_blank",rel:"noopener noreferrer"}},[e._v("router.GET(...){...}"),n("OutboundLink")],1),e._v("：创建不同的HTTP方法绑定到"),n("code",[e._v("Handlers")]),e._v("中，也支持POST、PUT、DELETE、PATCH、OPTIONS、HEAD 等常用的Restful方法")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://gowalker.org/github.com/gin-gonic/gin#H",target:"_blank",rel:"noopener noreferrer"}},[e._v("gin.H{...}"),n("OutboundLink")],1),e._v("：就是一个"),n("code",[e._v("map[string]interface{}")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://gowalker.org/github.com/gin-gonic/gin#Context",target:"_blank",rel:"noopener noreferrer"}},[e._v("gin.Context"),n("OutboundLink")],1),e._v("："),n("code",[e._v("Context")]),e._v("是"),n("code",[e._v("gin")]),e._v("中的上下文，它允许我们在中间件之间传递变量、管理流、验证JSON请求、响应JSON请求等，在"),n("code",[e._v("gin")]),e._v("中包含大量"),n("code",[e._v("Context")]),e._v("的方法，例如我们常用的"),n("code",[e._v("DefaultQuery")]),e._v("、"),n("code",[e._v("Query")]),e._v("、"),n("code",[e._v("DefaultPostForm")]),e._v("、"),n("code",[e._v("PostForm")]),e._v("等等")])]),e._v(" "),n("h5",{attrs:{id:"http-server-和-listenandserve？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-server-和-listenandserve？"}},[e._v("#")]),e._v(" &http.Server 和 ListenAndServe？")]),e._v(" "),n("p",[e._v("1、http.Server：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Server struct {\n    Addr    string\n    Handler Handler\n    TLSConfig *tls.Config\n    ReadTimeout time.Duration\n    ReadHeaderTimeout time.Duration\n    WriteTimeout time.Duration\n    IdleTimeout time.Duration\n    MaxHeaderBytes int\n    ConnState func(net.Conn, ConnState)\n    ErrorLog *log.Logger\n}\n")])])]),n("ul",[n("li",[e._v("Addr：监听的TCP地址，格式为"),n("code",[e._v(":8000")])]),e._v(" "),n("li",[e._v("Handler：http句柄，实质为"),n("code",[e._v("ServeHTTP")]),e._v("，用于处理程序响应HTTP请求")]),e._v(" "),n("li",[e._v("TLSConfig：安全传输层协议（TLS）的配置")]),e._v(" "),n("li",[e._v("ReadTimeout：允许读取的最大时间")]),e._v(" "),n("li",[e._v("ReadHeaderTimeout：允许读取请求头的最大时间")]),e._v(" "),n("li",[e._v("WriteTimeout：允许写入的最大时间")]),e._v(" "),n("li",[e._v("IdleTimeout：等待的最大时间")]),e._v(" "),n("li",[e._v("MaxHeaderBytes：请求头的最大字节数")]),e._v(" "),n("li",[e._v("ConnState：指定一个可选的回调函数，当客户端连接发生变化时调用")]),e._v(" "),n("li",[e._v("ErrorLog：指定一个可选的日志记录器，用于接收程序的意外行为和底层系统错误；如果未设置或为"),n("code",[e._v("nil")]),e._v("则默认以日志包的标准日志记录器完成（也就是在控制台输出）")])]),e._v(" "),n("p",[e._v("2、 ListenAndServe：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('func (srv *Server) ListenAndServe() error {\n    addr := srv.Addr\n    if addr == "" {\n        addr = ":http"\n    }\n    ln, err := net.Listen("tcp", addr)\n    if err != nil {\n        return err\n    }\n    return srv.Serve(tcpKeepAliveListener{ln.(*net.TCPListener)})\n}\n')])])]),n("p",[e._v("开始监听服务，监听TCP网络地址，Addr和调用应用程序处理连接上的请求。")]),e._v(" "),n("p",[e._v("我们在源码中看到"),n("code",[e._v("Addr")]),e._v("是调用我们在"),n("code",[e._v("&http.Server")]),e._v("中设置的参数，因此我们在设置时要用"),n("code",[e._v("&")]),e._v("，我们要改变参数的值，因为我们"),n("code",[e._v("ListenAndServe")]),e._v("和其他一些方法需要用到"),n("code",[e._v("&http.Server")]),e._v("中的参数，他们是相互影响的。")]),e._v(" "),n("p",[e._v("3、 "),n("code",[e._v("http.ListenAndServe")]),e._v("和 "),n("a",{attrs:{href:"https://segmentfault.com/a/1190000013297625#articleHeader5",target:"_blank",rel:"noopener noreferrer"}},[e._v("连载一"),n("OutboundLink")],1),e._v(" 的"),n("code",[e._v("r.Run()")]),e._v("有区别吗？")]),e._v(" "),n("p",[e._v("我们看看"),n("code",[e._v("r.Run")]),e._v("的实现：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('func (engine *Engine) Run(addr ...string) (err error) {\n    defer func() { debugPrintError(err) }()\n\n    address := resolveAddress(addr)\n    debugPrint("Listening and serving HTTP on %s\\n", address)\n    err = http.ListenAndServe(address, engine)\n    return\n}\n')])])]),n("p",[e._v("通过分析源码，得知"),n("strong",[e._v("本质上没有区别")]),e._v("，同时也得知了启动"),n("code",[e._v("gin")]),e._v("时的监听debug信息在这里输出。")]),e._v(" "),n("p",[e._v("4、 为什么Demo里会有"),n("code",[e._v("WARNING")]),e._v("？")]),e._v(" "),n("p",[e._v("首先我们可以看下"),n("code",[e._v("Default()")]),e._v("的实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// Default returns an Engine instance with the Logger and Recovery middleware already attached.\nfunc Default() *Engine {\n\tdebugPrintWARNINGDefault()\n\tengine := New()\n\tengine.Use(Logger(), Recovery())\n\treturn engine\n}\n")])])]),n("p",[e._v("大家可以看到默认情况下，已经附加了日志、恢复中间件的引擎实例。并且在开头调用了"),n("code",[e._v("debugPrintWARNINGDefault()")]),e._v("，而它的实现就是输出该行日志")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("func debugPrintWARNINGDefault() {\n\tdebugPrint(`[WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n`)\n}\n")])])]),n("p",[e._v("而另外一个"),n("code",[e._v('Running in "debug" mode. Switch to "release" mode in production.')]),e._v("，是运行模式原因，并不难理解，已在配置文件的管控下 😃，运维人员随时就可以修改它的配置。")]),e._v(" "),n("p",[e._v("5、 Demo的"),n("code",[e._v("router.GET")]),e._v("等路由规则可以不写在"),n("code",[e._v("main")]),e._v("包中吗？")]),e._v(" "),n("p",[e._v("我们发现"),n("code",[e._v("router.GET")]),e._v("等路由规则，在Demo中被编写在了"),n("code",[e._v("main")]),e._v("包中，感觉很奇怪，我们去抽离这部分逻辑！")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("go-gin-example")]),e._v("下"),n("code",[e._v("routers")]),e._v("目录新建"),n("code",[e._v("router.go")]),e._v("文件，写入内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package routers\n\nimport (\n    "github.com/gin-gonic/gin"\n    \n    "github.com/EDDYCJY/go-gin-example/pkg/setting"\n)\n\nfunc InitRouter() *gin.Engine {\n    r := gin.New()\n\n    r.Use(gin.Logger())\n\n    r.Use(gin.Recovery())\n\n    gin.SetMode(setting.RunMode)\n\n    r.GET("/test", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            "message": "test",\n        })\n    })\n\n    return r\n}\n')])])]),n("p",[e._v("修改"),n("code",[e._v("main.go")]),e._v("的文件内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\n\t"github.com/EDDYCJY/go-gin-example/routers"\n\t"github.com/EDDYCJY/go-gin-example/pkg/setting"\n)\n\nfunc main() {\n\trouter := routers.InitRouter()\n\n\ts := &http.Server{\n\t\tAddr:           fmt.Sprintf(":%d", setting.HTTPPort),\n\t\tHandler:        router,\n\t\tReadTimeout:    setting.ReadTimeout,\n\t\tWriteTimeout:   setting.WriteTimeout,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\ts.ListenAndServe()\n}\n')])])]),n("p",[e._v("当前目录结构：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("go-gin-example/\n├── conf\n│   └── app.ini\n├── main.go\n├── middleware\n├── models\n│   └── models.go\n├── pkg\n│   ├── e\n│   │   ├── code.go\n│   │   └── msg.go\n│   ├── setting\n│   │   └── setting.go\n│   └── util\n│       └── pagination.go\n├── routers\n│   └── router.go\n├── runtime\n")])])]),n("p",[e._v("重启服务，执行 "),n("code",[e._v("curl 127.0.0.1:8000/test")]),e._v("查看是否正确返回。")]),e._v(" "),n("p",[e._v("下一节，我们将以我们的 Demo 为起点进行修改，开始编码！")]),e._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),n("h3",{attrs:{id:"本系列示例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[e._v("#")]),e._v(" 本系列示例代码")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/EDDYCJY/go-gin-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-gin-example"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"关于"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[e._v("#")]),e._v(" 关于")]),e._v(" "),n("h3",{attrs:{id:"修改记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改记录"}},[e._v("#")]),e._v(" 修改记录")]),e._v(" "),n("ul",[n("li",[e._v("第一版：2018年02月16日发布文章")]),e._v(" "),n("li",[e._v("第二版：2019年10月01日修改文章")])]),e._v(" "),n("h2",{attrs:{id:"？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#？"}},[e._v("#")]),e._v(" ？")]),e._v(" "),n("p",[e._v("如果有任何疑问或错误，欢迎在 "),n("a",{attrs:{href:"https://github.com/EDDYCJY/blog",target:"_blank",rel:"noopener noreferrer"}},[e._v("issues"),n("OutboundLink")],1),e._v(" 进行提问或给予修正意见，如果喜欢或对你有所帮助，欢迎 Star，对作者是一种鼓励和推进。")]),e._v(" "),n("h3",{attrs:{id:"我的公众号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#我的公众号"}},[e._v("#")]),e._v(" 我的公众号")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://image.eddycjy.com/8d0b0c3a11e74efd5fdfd7910257e70b.jpg",alt:"image"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);