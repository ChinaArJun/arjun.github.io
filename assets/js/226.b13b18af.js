(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{661:function(e,t,r){"use strict";r.r(t);var a=r(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_4-4-tls-证书认证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-tls-证书认证"}},[e._v("#")]),e._v(" 4.4 TLS 证书认证")]),e._v(" "),r("p",[e._v("项目地址：https://github.com/EDDYCJY/go-grpc-example")]),e._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("p",[e._v("在前面的章节里，我们介绍了 gRPC 的四种 API 使用方式。是不是很简单呢 😀")]),e._v(" "),r("p",[e._v("此时存在一个安全问题，先前的例子中 gRPC Client/Server 都是明文传输的，会不会有被窃听的风险呢？")]),e._v(" "),r("p",[e._v("从结论上来讲，是有的。在明文通讯的情况下，你的请求就是裸奔的，有可能被第三方恶意篡改或者伪造为“非法”的数据")]),e._v(" "),r("h2",{attrs:{id:"抓个包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抓个包"}},[e._v("#")]),e._v(" 抓个包")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/15e68df2ba9aa7cace3e26e35c79f200.jpg",alt:"image"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/ebebd3ea7d306ad2fcd311f1d8b46cc0.jpg",alt:"image"}})]),e._v(" "),r("p",[e._v("嗯，明文传输无误。这是有问题的，接下将改造我们的 gRPC，以便于解决这个问题 😤")]),e._v(" "),r("h2",{attrs:{id:"证书生成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#证书生成"}},[e._v("#")]),e._v(" 证书生成")]),e._v(" "),r("h3",{attrs:{id:"私钥"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#私钥"}},[e._v("#")]),e._v(" 私钥")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("openssl ecparam -genkey -name secp384r1 -out server.key\n")])])]),r("h3",{attrs:{id:"自签公钥"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自签公钥"}},[e._v("#")]),e._v(" 自签公钥")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("openssl req -new -x509 -sha256 -key server.key -out server.pem -days 3650\n")])])]),r("h4",{attrs:{id:"填写信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#填写信息"}},[e._v("#")]),e._v(" 填写信息")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Country Name (2 letter code) []:\nState or Province Name (full name) []:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) []:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, fully qualified host name) []:go-grpc-example\nEmail Address []:\n")])])]),r("h3",{attrs:{id:"生成完毕"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成完毕"}},[e._v("#")]),e._v(" 生成完毕")]),e._v(" "),r("p",[e._v("生成证书结束后，将证书相关文件放到 conf/ 下，目录结构：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ tree go-grpc-example \ngo-grpc-example\n├── client\n├── conf\n│   ├── server.key\n│   └── server.pem\n├── proto\n└── server\n    ├── simple_server\n    └── stream_server\n")])])]),r("p",[e._v("由于本文偏向 gRPC，详解可参见 "),r("a",{attrs:{href:"https://segmentfault.com/a/1190000013408485#articleHeader3",target:"_blank",rel:"noopener noreferrer"}},[e._v("《制作证书》"),r("OutboundLink")],1),e._v("。后续番外可能会展开细节描述 👌")]),e._v(" "),r("h2",{attrs:{id:"为什么之前不需要证书"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么之前不需要证书"}},[e._v("#")]),e._v(" 为什么之前不需要证书")]),e._v(" "),r("p",[e._v("在 simple_server 中，为什么“啥事都没干”就能在不需要证书的情况下运行呢？")]),e._v(" "),r("h3",{attrs:{id:"server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[e._v("#")]),e._v(" Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("grpc.NewServer()\n")])])]),r("p",[e._v("在服务端显然没有传入任何 DialOptions")]),e._v(" "),r("h3",{attrs:{id:"client"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[e._v("#")]),e._v(" Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('conn, err := grpc.Dial(":"+PORT, grpc.WithInsecure())\n')])])]),r("p",[e._v("在客户端留意到 "),r("code",[e._v("grpc.WithInsecure()")]),e._v(" 方法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("func WithInsecure() DialOption {\n\treturn newFuncDialOption(func(o *dialOptions) {\n\t\to.insecure = true\n\t})\n}\n")])])]),r("p",[e._v("在方法内可以看到 "),r("code",[e._v("WithInsecure")]),e._v(" 返回一个 "),r("code",[e._v("DialOption")]),e._v("，并且它最终会通过读取设置的值来禁用安全传输")]),e._v(" "),r("p",[e._v("那么它“最终”又是在哪里处理的呢，我们把视线移到 "),r("code",[e._v("grpc.Dial()")]),e._v(" 方法内")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func DialContext(ctx context.Context, target string, opts ...DialOption) (conn *ClientConn, err error) {\n    ...\n    \n    for _, opt := range opts {\n\t\topt.apply(&cc.dopts)\n\t}\n    ...\n    \n    if !cc.dopts.insecure {\n\t\tif cc.dopts.copts.TransportCredentials == nil {\n\t\t\treturn nil, errNoTransportSecurity\n\t\t}\n\t} else {\n\t\tif cc.dopts.copts.TransportCredentials != nil {\n\t\t\treturn nil, errCredentialsConflict\n\t\t}\n\t\tfor _, cd := range cc.dopts.copts.PerRPCCredentials {\n\t\t\tif cd.RequireTransportSecurity() {\n\t\t\t\treturn nil, errTransportCredentialsMissing\n\t\t\t}\n\t\t}\n\t}\n\t...\n\t\n\tcreds := cc.dopts.copts.TransportCredentials\n\tif creds != nil && creds.Info().ServerName != "" {\n\t\tcc.authority = creds.Info().ServerName\n\t} else if cc.dopts.insecure && cc.dopts.authority != "" {\n\t\tcc.authority = cc.dopts.authority\n\t} else {\n\t\t// Use endpoint from "scheme://authority/endpoint" as the default\n\t\t// authority for ClientConn.\n\t\tcc.authority = cc.parsedTarget.Endpoint\n\t}\n\t...\n}\n')])])]),r("h2",{attrs:{id:"grpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[e._v("#")]),e._v(" gRPC")]),e._v(" "),r("p",[e._v("接下来我们将正式开始编码，在 gRPC Client/Server 上实现 TLS 证书认证的支持 🤔")]),e._v(" "),r("h3",{attrs:{id:"tls-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tls-server"}},[e._v("#")]),e._v(" TLS Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('package main\n\nimport (\n\t"context"\n\t"log"\n\t"net"\n\n\t"google.golang.org/grpc"\n\t"google.golang.org/grpc/credentials"\n\n\tpb "github.com/EDDYCJY/go-grpc-example/proto"\n)\n\n...\n\nconst PORT = "9001"\n\nfunc main() {\n\tc, err := credentials.NewServerTLSFromFile("../../conf/server.pem", "../../conf/server.key")\n\tif err != nil {\n\t\tlog.Fatalf("credentials.NewServerTLSFromFile err: %v", err)\n\t}\n\n\tserver := grpc.NewServer(grpc.Creds(c))\n\tpb.RegisterSearchServiceServer(server, &SearchService{})\n\n\tlis, err := net.Listen("tcp", ":"+PORT)\n\tif err != nil {\n\t\tlog.Fatalf("net.Listen err: %v", err)\n\t}\n\n\tserver.Serve(lis)\n}\n')])])]),r("ul",[r("li",[e._v("credentials.NewServerTLSFromFile：根据服务端输入的证书文件和密钥构造 TLS 凭证")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("func NewServerTLSFromFile(certFile, keyFile string) (TransportCredentials, error) {\n\tcert, err := tls.LoadX509KeyPair(certFile, keyFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn NewTLS(&tls.Config{Certificates: []tls.Certificate{cert}}), nil\n}\n")])])]),r("ul",[r("li",[e._v("grpc.Creds()：返回一个 ServerOption，用于设置服务器连接的凭据。用于 "),r("code",[e._v("grpc.NewServer(opt ...ServerOption)")]),e._v(" 为 gRPC Server 设置连接选项")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("func Creds(c credentials.TransportCredentials) ServerOption {\n\treturn func(o *options) {\n\t\to.creds = c\n\t}\n}\n")])])]),r("p",[e._v("经过以上两个简单步骤，gRPC Server 就建立起需证书认证的服务啦 🤔")]),e._v(" "),r("h3",{attrs:{id:"tls-client"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tls-client"}},[e._v("#")]),e._v(" TLS Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('package main\n\nimport (\n\t"context"\n\t"log"\n\n\t"google.golang.org/grpc"\n\t"google.golang.org/grpc/credentials"\n\n\tpb "github.com/EDDYCJY/go-grpc-example/proto"\n)\n\nconst PORT = "9001"\n\nfunc main() {\n\tc, err := credentials.NewClientTLSFromFile("../../conf/server.pem", "go-grpc-example")\n\tif err != nil {\n\t\tlog.Fatalf("credentials.NewClientTLSFromFile err: %v", err)\n\t}\n\n\tconn, err := grpc.Dial(":"+PORT, grpc.WithTransportCredentials(c))\n\tif err != nil {\n\t\tlog.Fatalf("grpc.Dial err: %v", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewSearchServiceClient(conn)\n\tresp, err := client.Search(context.Background(), &pb.SearchRequest{\n\t\tRequest: "gRPC",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf("client.Search err: %v", err)\n\t}\n\n\tlog.Printf("resp: %s", resp.GetResponse())\n}\n')])])]),r("ul",[r("li",[e._v("credentials.NewClientTLSFromFile()：根据客户端输入的证书文件和密钥构造 TLS 凭证。serverNameOverride 为服务名称")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func NewClientTLSFromFile(certFile, serverNameOverride string) (TransportCredentials, error) {\n\tb, err := ioutil.ReadFile(certFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcp := x509.NewCertPool()\n\tif !cp.AppendCertsFromPEM(b) {\n\t\treturn nil, fmt.Errorf("credentials: failed to append certificates")\n\t}\n\treturn NewTLS(&tls.Config{ServerName: serverNameOverride, RootCAs: cp}), nil\n}\n')])])]),r("ul",[r("li",[e._v("grpc.WithTransportCredentials()：返回一个配置连接的 DialOption 选项。用于 "),r("code",[e._v("grpc.Dial(target string, opts ...DialOption)")]),e._v(" 设置连接选项")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("func WithTransportCredentials(creds credentials.TransportCredentials) DialOption {\n\treturn newFuncDialOption(func(o *dialOptions) {\n\t\to.copts.TransportCredentials = creds\n\t})\n}\n")])])]),r("h2",{attrs:{id:"验证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),r("h3",{attrs:{id:"请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求"}},[e._v("#")]),e._v(" 请求")]),e._v(" "),r("p",[e._v("重新启动 server.go 和执行 client.go，得到响应结果")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run client.go\n2018/09/30 20:00:21 resp: gRPC Server\n")])])]),r("h3",{attrs:{id:"抓个包-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抓个包-2"}},[e._v("#")]),e._v(" 抓个包")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/c8ad6edf1f7d084883b847b3eee29dd2.jpg",alt:"image"}})]),e._v(" "),r("p",[e._v("成功。")]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("在本章节我们实现了 gRPC TLS Client/Servert，你以为大功告成了吗？我不 😤")]),e._v(" "),r("h2",{attrs:{id:"问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[e._v("#")]),e._v(" 问题")]),e._v(" "),r("p",[e._v("你仔细再看看，Client 是基于 Server 端的证书和服务名称来建立请求的。这样的话，你就需要将 Server 的证书通过各种手段给到 Client 端，否则是无法完成这项任务的")]),e._v(" "),r("p",[e._v("问题也就来了，你无法保证你的“各种手段”是安全的，毕竟现在的网络环境是很危险的，万一被...")]),e._v(" "),r("p",[e._v("我们将在下一章节解决这个问题，保证其可靠性 🙂")]),e._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),r("h3",{attrs:{id:"本系列示例代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[e._v("#")]),e._v(" 本系列示例代码")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/EDDYCJY/go-grpc-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-grpc-example"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);