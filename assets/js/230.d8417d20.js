(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{665:function(e,t,r){"use strict";r.r(t);var a=r(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_4-3-grpc-streaming-client-and-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-grpc-streaming-client-and-server"}},[e._v("#")]),e._v(" 4.3 gRPC Streaming, Client and Server")]),e._v(" "),r("p",[e._v("项目地址：https://github.com/EDDYCJY/go-grpc-example")]),e._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("p",[e._v("本章节将介绍 gRPC 的流式，分为三种类型：")]),e._v(" "),r("ul",[r("li",[e._v("Server-side streaming RPC：服务器端流式 RPC")]),e._v(" "),r("li",[e._v("Client-side streaming RPC：客户端流式 RPC")]),e._v(" "),r("li",[e._v("Bidirectional streaming RPC：双向流式 RPC")])]),e._v(" "),r("h2",{attrs:{id:"流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流"}},[e._v("#")]),e._v(" 流")]),e._v(" "),r("p",[e._v("任何技术，因为有痛点，所以才有了存在的必要性。如果您想要了解 gRPC 的流式调用，请继续")]),e._v(" "),r("h3",{attrs:{id:"图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[e._v("#")]),e._v(" 图")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/8812038d20ffece377c0e4901c9a9231.png",alt:"image"}})]),e._v(" "),r("p",[e._v("gRPC Streaming 是基于 HTTP/2 的，后续章节再进行详细讲解")]),e._v(" "),r("h3",{attrs:{id:"为什么不用-simple-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用-simple-rpc"}},[e._v("#")]),e._v(" 为什么不用 Simple RPC")]),e._v(" "),r("p",[e._v("流式为什么要存在呢，是 Simple RPC 有什么问题吗？通过模拟业务场景，可得知在使用 Simple RPC 时，有如下问题：")]),e._v(" "),r("ul",[r("li",[e._v("数据包过大造成的瞬时压力")]),e._v(" "),r("li",[e._v("接收数据包时，需要所有数据包都接受成功且正确后，才能够回调响应，进行业务处理（无法客户端边发送，服务端边处理）")])]),e._v(" "),r("h3",{attrs:{id:"为什么用-streaming-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-streaming-rpc"}},[e._v("#")]),e._v(" 为什么用 Streaming RPC")]),e._v(" "),r("ul",[r("li",[e._v("大规模数据包")]),e._v(" "),r("li",[e._v("实时场景")])]),e._v(" "),r("h4",{attrs:{id:"模拟场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模拟场景"}},[e._v("#")]),e._v(" 模拟场景")]),e._v(" "),r("p",[e._v("每天早上 6 点，都有一批百万级别的数据集要同从 A 同步到 B，在同步的时候，会做一系列操作（归档、数据分析、画像、日志等）。这一次性涉及的数据量确实大")]),e._v(" "),r("p",[e._v("在同步完成后，也有人马上会去查阅数据，为了新的一天筹备。也符合实时性。")]),e._v(" "),r("p",[e._v("两者相较下，这个场景下更适合使用 Streaming RPC")]),e._v(" "),r("h2",{attrs:{id:"grpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[e._v("#")]),e._v(" gRPC")]),e._v(" "),r("p",[e._v("在讲解具体的 gRPC 流式代码时，会"),r("strong",[e._v("着重在第一节讲解")]),e._v("，因为三种模式其实是不同的组合。希望你能够注重理解，举一反三，其实都是一样的知识点 👍")]),e._v(" "),r("h3",{attrs:{id:"目录结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[e._v("#")]),e._v(" 目录结构")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ tree go-grpc-example \ngo-grpc-example\n├── client\n│   ├── simple_client\n│   │   └── client.go\n│   └── stream_client\n│       └── client.go\n├── proto\n│   ├── search.proto\n│   └── stream.proto\n└── server\n    ├── simple_server\n    │   └── server.go\n    └── stream_server\n        └── server.go\n")])])]),r("p",[e._v("增加 stream_server、stream_client 存放服务端和客户端文件，proto/stream.proto 用于编写 IDL")]),e._v(" "),r("h3",{attrs:{id:"idl"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#idl"}},[e._v("#")]),e._v(" IDL")]),e._v(" "),r("p",[e._v("在 proto 文件夹下的 stream.proto 文件中，写入如下内容：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('syntax = "proto3";\n\npackage proto;\n\nservice StreamService {\n    rpc List(StreamRequest) returns (stream StreamResponse) {};\n\n    rpc Record(stream StreamRequest) returns (StreamResponse) {};\n\n    rpc Route(stream StreamRequest) returns (stream StreamResponse) {};\n}\n\n\nmessage StreamPoint {\n  string name = 1;\n  int32 value = 2;\n}\n\nmessage StreamRequest {\n  StreamPoint pt = 1;\n}\n\nmessage StreamResponse {\n  StreamPoint pt = 1;\n}\n')])])]),r("p",[e._v("注意关键字 stream，声明其为一个流方法。这里共涉及三个方法，对应关系为")]),e._v(" "),r("ul",[r("li",[e._v("List：服务器端流式 RPC")]),e._v(" "),r("li",[e._v("Record：客户端流式 RPC")]),e._v(" "),r("li",[e._v("Route：双向流式 RPC")])]),e._v(" "),r("h3",{attrs:{id:"基础模板-空定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础模板-空定义"}},[e._v("#")]),e._v(" 基础模板 + 空定义")]),e._v(" "),r("h4",{attrs:{id:"server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[e._v("#")]),e._v(" Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('package main\n\nimport (\n\t"log"\n\t"net"\n\n\t"google.golang.org/grpc"\n\n\tpb "github.com/EDDYCJY/go-grpc-example/proto"\n\t\n)\n\ntype StreamService struct{}\n\nconst (\n\tPORT = "9002"\n)\n\nfunc main() {\n\tserver := grpc.NewServer()\n\tpb.RegisterStreamServiceServer(server, &StreamService{})\n\n\tlis, err := net.Listen("tcp", ":"+PORT)\n\tif err != nil {\n\t\tlog.Fatalf("net.Listen err: %v", err)\n\t}\n\n\tserver.Serve(lis)\n}\n\nfunc (s *StreamService) List(r *pb.StreamRequest, stream pb.StreamService_ListServer) error {\n\treturn nil\n}\n\nfunc (s *StreamService) Record(stream pb.StreamService_RecordServer) error {\n\treturn nil\n}\n\nfunc (s *StreamService) Route(stream pb.StreamService_RouteServer) error {\n\treturn nil\n}\n')])])]),r("p",[e._v("写代码前，建议先将 gRPC Server 的基础模板和接口给空定义出来。若有不清楚可参见上一章节的知识点")]),e._v(" "),r("h4",{attrs:{id:"client"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[e._v("#")]),e._v(" Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('package main\n\nimport (\n    "log"\n    \n\t"google.golang.org/grpc"\n\n\tpb "github.com/EDDYCJY/go-grpc-example/proto"\n)\n\nconst (\n\tPORT = "9002"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(":"+PORT, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf("grpc.Dial err: %v", err)\n\t}\n\n\tdefer conn.Close()\n\n\tclient := pb.NewStreamServiceClient(conn)\n\n\terr = printLists(client, &pb.StreamRequest{Pt: &pb.StreamPoint{Name: "gRPC Stream Client: List", Value: 2018}})\n\tif err != nil {\n\t\tlog.Fatalf("printLists.err: %v", err)\n\t}\n\n\terr = printRecord(client, &pb.StreamRequest{Pt: &pb.StreamPoint{Name: "gRPC Stream Client: Record", Value: 2018}})\n\tif err != nil {\n\t\tlog.Fatalf("printRecord.err: %v", err)\n\t}\n\n\terr = printRoute(client, &pb.StreamRequest{Pt: &pb.StreamPoint{Name: "gRPC Stream Client: Route", Value: 2018}})\n\tif err != nil {\n\t\tlog.Fatalf("printRoute.err: %v", err)\n\t}\n}\n\nfunc printLists(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\treturn nil\n}\n\nfunc printRecord(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\treturn nil\n}\n\nfunc printRoute(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\treturn nil\n}\n')])])]),r("h3",{attrs:{id:"一、server-side-streaming-rpc：服务器端流式-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、server-side-streaming-rpc：服务器端流式-rpc"}},[e._v("#")]),e._v(" 一、Server-side streaming RPC：服务器端流式 RPC")]),e._v(" "),r("p",[e._v("服务器端流式 RPC，显然是单向流，并代指 Server 为 Stream 而 Client 为普通 RPC 请求")]),e._v(" "),r("p",[e._v("简单来讲就是客户端发起一次普通的 RPC 请求，服务端通过流式响应多次发送数据集，客户端 Recv 接收数据集。大致如图：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/b25a47e2f2fb2a8c352a547f7612808b.png",alt:"image"}})]),e._v(" "),r("h4",{attrs:{id:"server-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-2"}},[e._v("#")]),e._v(" Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("func (s *StreamService) List(r *pb.StreamRequest, stream pb.StreamService_ListServer) error {\n\tfor n := 0; n <= 6; n++ {\n\t\terr := stream.Send(&pb.StreamResponse{\n\t\t\tPt: &pb.StreamPoint{\n\t\t\t\tName:  r.Pt.Name,\n\t\t\t\tValue: r.Pt.Value + int32(n),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n")])])]),r("p",[e._v("在 Server，主要留意 "),r("code",[e._v("stream.Send")]),e._v(" 方法。它看上去能发送 N 次？有没有大小限制？")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type StreamService_ListServer interface {\n\tSend(*StreamResponse) error\n\tgrpc.ServerStream\n}\n\nfunc (x *streamServiceListServer) Send(m *StreamResponse) error {\n\treturn x.ServerStream.SendMsg(m)\n}\n")])])]),r("p",[e._v("通过阅读源码，可得知是 protoc 在生成时，根据定义生成了各式各样符合标准的接口方法。最终再统一调度内部的 "),r("code",[e._v("SendMsg")]),e._v(" 方法，该方法涉及以下过程:")]),e._v(" "),r("ul",[r("li",[e._v("消息体（对象）序列化")]),e._v(" "),r("li",[e._v("压缩序列化后的消息体")]),e._v(" "),r("li",[e._v("对正在传输的消息体增加 5 个字节的 header")]),e._v(" "),r("li",[e._v("判断压缩+序列化后的消息体总字节长度是否大于预设的 maxSendMessageSize（预设值为 "),r("code",[e._v("math.MaxInt32")]),e._v("），若超出则提示错误")]),e._v(" "),r("li",[e._v("写入给流的数据集")])]),e._v(" "),r("h4",{attrs:{id:"client-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client-2"}},[e._v("#")]),e._v(" Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func printLists(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\tstream, err := client.List(context.Background(), r)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tlog.Printf("resp: pj.name: %s, pt.value: %d", resp.Pt.Name, resp.Pt.Value)\n\t}\n\n\treturn nil\n}\n')])])]),r("p",[e._v("在 Client，主要留意 "),r("code",[e._v("stream.Recv()")]),e._v(" 方法。什么情况下 "),r("code",[e._v("io.EOF")]),e._v(" ？什么情况下存在错误信息呢?")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type StreamService_ListClient interface {\n\tRecv() (*StreamResponse, error)\n\tgrpc.ClientStream\n}\n\nfunc (x *streamServiceListClient) Recv() (*StreamResponse, error) {\n\tm := new(StreamResponse)\n\tif err := x.ClientStream.RecvMsg(m); err != nil {\n\t\treturn nil, err\n\t}\n\treturn m, nil\n}\n")])])]),r("p",[e._v("RecvMsg 会从流中读取完整的 gRPC 消息体，另外通过阅读源码可得知：")]),e._v(" "),r("p",[e._v("（1）RecvMsg 是阻塞等待的")]),e._v(" "),r("p",[e._v("（2）RecvMsg 当流成功/结束（调用了 Close）时，会返回 "),r("code",[e._v("io.EOF")])]),e._v(" "),r("p",[e._v("（3）RecvMsg 当流出现任何错误时，流会被中止，错误信息会包含 RPC 错误码。而在 RecvMsg 中可能出现如下错误：")]),e._v(" "),r("ul",[r("li",[e._v("io.EOF")]),e._v(" "),r("li",[e._v("io.ErrUnexpectedEOF")]),e._v(" "),r("li",[e._v("transport.ConnectionError")]),e._v(" "),r("li",[e._v("google.golang.org/grpc/codes")])]),e._v(" "),r("p",[e._v("同时需要注意，默认的 MaxReceiveMessageSize 值为 1024 * 1024 * 4，建议不要超出")]),e._v(" "),r("h4",{attrs:{id:"验证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),r("p",[e._v("运行 stream_server/server.go：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run server.go\n")])])]),r("p",[e._v("运行 stream_client/client.go：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run client.go \n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2018\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2019\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2020\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2021\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2022\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2023\n2018/09/24 16:18:25 resp: pj.name: gRPC Stream Client: List, pt.value: 2024\n")])])]),r("h3",{attrs:{id:"二、client-side-streaming-rpc：客户端流式-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、client-side-streaming-rpc：客户端流式-rpc"}},[e._v("#")]),e._v(" 二、Client-side streaming RPC：客户端流式 RPC")]),e._v(" "),r("p",[e._v("客户端流式 RPC，单向流，客户端通过流式发起"),r("strong",[e._v("多次")]),e._v(" RPC 请求给服务端，服务端发起"),r("strong",[e._v("一次")]),e._v("响应给客户端，大致如图：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/97473884d939ec91d6cdf53090bef92e.png",alt:"image"}})]),e._v(" "),r("h4",{attrs:{id:"server-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-3"}},[e._v("#")]),e._v(" Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func (s *StreamService) Record(stream pb.StreamService_RecordServer) error {\n\tfor {\n\t\tr, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn stream.SendAndClose(&pb.StreamResponse{Pt: &pb.StreamPoint{Name: "gRPC Stream Server: Record", Value: 1}})\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tlog.Printf("stream.Recv pt.name: %s, pt.value: %d", r.Pt.Name, r.Pt.Value)\n\t}\n\n\treturn nil\n}\n')])])]),r("p",[e._v("多了一个从未见过的方法 "),r("code",[e._v("stream.SendAndClose")]),e._v("，它是做什么用的呢？")]),e._v(" "),r("p",[e._v("在这段程序中，我们对每一个 Recv 都进行了处理，当发现 "),r("code",[e._v("io.EOF")]),e._v(" (流关闭) 后，需要将最终的响应结果发送给客户端，同时关闭正在另外一侧等待的 Recv")]),e._v(" "),r("h4",{attrs:{id:"client-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client-3"}},[e._v("#")]),e._v(" Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func printRecord(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\tstream, err := client.Record(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor n := 0; n < 6; n++ {\n\t\terr := stream.Send(r)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tresp, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Printf("resp: pj.name: %s, pt.value: %d", resp.Pt.Name, resp.Pt.Value)\n\n\treturn nil\n}\n')])])]),r("p",[r("code",[e._v("stream.CloseAndRecv")]),e._v(" 和 "),r("code",[e._v("stream.SendAndClose")]),e._v(" 是配套使用的流方法，相信聪明的你已经秒懂它的作用了")]),e._v(" "),r("h4",{attrs:{id:"验证-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证-2"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),r("p",[e._v("重启 stream_server/server.go，再次运行 stream_client/client.go：")]),e._v(" "),r("h5",{attrs:{id:"stream-client："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream-client："}},[e._v("#")]),e._v(" stream_client：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run client.go\n2018/09/24 16:23:03 resp: pj.name: gRPC Stream Server: Record, pt.value: 1\n")])])]),r("h5",{attrs:{id:"stream-server："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream-server："}},[e._v("#")]),e._v(" stream_server：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run server.go\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n2018/09/24 16:23:03 stream.Recv pt.name: gRPC Stream Client: Record, pt.value: 2018\n")])])]),r("h3",{attrs:{id:"三、bidirectional-streaming-rpc：双向流式-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、bidirectional-streaming-rpc：双向流式-rpc"}},[e._v("#")]),e._v(" 三、Bidirectional streaming RPC：双向流式 RPC")]),e._v(" "),r("p",[e._v("双向流式 RPC，顾名思义是双向流。由客户端以流式的方式发起请求，服务端同样以流式的方式响应请求")]),e._v(" "),r("p",[e._v("首个请求一定是 Client 发起，但具体交互方式（谁先谁后、一次发多少、响应多少、什么时候关闭）根据程序编写的方式来确定（可以结合协程）")]),e._v(" "),r("p",[e._v("假设该双向流是"),r("strong",[e._v("按顺序发送")]),e._v("的话，大致如图：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://image.eddycjy.com/ab80297cd6715048a235e0c9b0f36091.png",alt:"image"}})]),e._v(" "),r("p",[e._v("还是要强调，双向流变化很大，因程序编写的不同而不同。"),r("strong",[e._v("双向流图示无法适用不同的场景")])]),e._v(" "),r("h4",{attrs:{id:"server-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-4"}},[e._v("#")]),e._v(" Server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func (s *StreamService) Route(stream pb.StreamService_RouteServer) error {\n\tn := 0\n\tfor {\n\t\terr := stream.Send(&pb.StreamResponse{\n\t\t\tPt: &pb.StreamPoint{\n\t\t\t\tName:  "gPRC Stream Client: Route",\n\t\t\t\tValue: int32(n),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tr, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tn++\n\n\t\tlog.Printf("stream.Recv pt.name: %s, pt.value: %d", r.Pt.Name, r.Pt.Value)\n\t}\n\n\treturn nil\n}\n')])])]),r("h4",{attrs:{id:"client-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client-4"}},[e._v("#")]),e._v(" Client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('func printRoute(client pb.StreamServiceClient, r *pb.StreamRequest) error {\n\tstream, err := client.Route(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor n := 0; n <= 6; n++ {\n\t\terr = stream.Send(r)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tlog.Printf("resp: pj.name: %s, pt.value: %d", resp.Pt.Name, resp.Pt.Value)\n\t}\n\n\tstream.CloseSend()\n\n\treturn nil\n}\n')])])]),r("h4",{attrs:{id:"验证-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证-3"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),r("p",[e._v("重启 stream_server/server.go，再次运行 stream_client/client.go：")]),e._v(" "),r("h5",{attrs:{id:"stream-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream-server"}},[e._v("#")]),e._v(" stream_server")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run server.go\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n2018/09/24 16:29:43 stream.Recv pt.name: gRPC Stream Client: Route, pt.value: 2018\n")])])]),r("h5",{attrs:{id:"stream-client"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream-client"}},[e._v("#")]),e._v(" stream_client")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ go run client.go\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 0\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 1\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 2\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 3\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 4\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 5\n2018/09/24 16:29:43 resp: pj.name: gPRC Stream Client: Route, pt.value: 6\n")])])]),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("在本文共介绍了三类流的交互方式，可以根据实际的业务场景去选择合适的方式。会事半功倍哦 🎑")]),e._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),r("h3",{attrs:{id:"本系列示例代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[e._v("#")]),e._v(" 本系列示例代码")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/EDDYCJY/go-grpc-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("go-grpc-example"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);