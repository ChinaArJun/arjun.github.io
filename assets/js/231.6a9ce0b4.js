(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{666:function(t,e,a){"use strict";a.r(e);var r=a(44),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4-10-分布式链路追踪-grpc-opentracing-zipkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-分布式链路追踪-grpc-opentracing-zipkin"}},[t._v("#")]),t._v(" 4.10 分布式链路追踪 gRPC + Opentracing + Zipkin")]),t._v(" "),a("p",[t._v("在实际应用中，你做了那么多 Server 端，写了 N 个 RPC 方法。想看看方法的指标，却无处下手？")]),t._v(" "),a("p",[t._v("本文将通过 gRPC + Opentracing + Zipkin 搭建一个"),a("strong",[t._v("分布式链路追踪系统")]),t._v("来实现查看整个系统的链路、性能等指标。")]),t._v(" "),a("h2",{attrs:{id:"opentracing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opentracing"}},[t._v("#")]),t._v(" Opentracing")]),t._v(" "),a("h3",{attrs:{id:"是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),a("p",[t._v("OpenTracing 通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现")]),t._v(" "),a("p",[t._v("不过 OpenTracing 并不是标准。因为 CNCF 不是官方标准机构，但是它的目标是致力为分布式追踪创建更标准的 API 和工具")]),t._v(" "),a("h3",{attrs:{id:"名词解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[t._v("#")]),t._v(" 名词解释")]),t._v(" "),a("h4",{attrs:{id:"trace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trace"}},[t._v("#")]),t._v(" Trace")]),t._v(" "),a("p",[t._v("一个 trace 代表了一个事务或者流程在（分布式）系统中的执行过程")]),t._v(" "),a("h4",{attrs:{id:"span"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#span"}},[t._v("#")]),t._v(" Span")]),t._v(" "),a("p",[t._v("一个 span 代表在分布式系统中完成的单个工作单元。也包含其他 span 的 “引用”，这允许将多个 spans 组合成一个完整的 Trace")]),t._v(" "),a("p",[t._v("每个 span 根据 OpenTracing 规范封装以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("操作名称")]),t._v(" "),a("li",[t._v("开始时间和结束时间")]),t._v(" "),a("li",[t._v("key:value span Tags")]),t._v(" "),a("li",[t._v("key:value span Logs")]),t._v(" "),a("li",[t._v("SpanContext")])]),t._v(" "),a("h4",{attrs:{id:"tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tags"}},[t._v("#")]),t._v(" Tags")]),t._v(" "),a("p",[t._v("Span tags（跨度标签）可以理解为用户自定义的 Span 注释。便于查询、过滤和理解跟踪数据")]),t._v(" "),a("h4",{attrs:{id:"logs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[t._v("#")]),t._v(" Logs")]),t._v(" "),a("p",[t._v("Span logs（跨度日志）可以记录 Span 内特定时间或事件的日志信息。主要用于捕获特定 Span 的日志信息以及应用程序本身的其他调试或信息输出")]),t._v(" "),a("h4",{attrs:{id:"spancontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spancontext"}},[t._v("#")]),t._v(" SpanContext")]),t._v(" "),a("p",[t._v("SpanContext 代表跨越进程边界，传递到子级 Span 的状态。常在追踪示意图中创建上下文时使用")]),t._v(" "),a("h4",{attrs:{id:"baggage-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#baggage-items"}},[t._v("#")]),t._v(" Baggage Items")]),t._v(" "),a("p",[t._v("Baggage Items 可以理解为 trace 全局运行中额外传输的数据集合")]),t._v(" "),a("h3",{attrs:{id:"一个案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个案例"}},[t._v("#")]),t._v(" 一个案例")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/c7912244434f56f32be37ac66ad164ab.png",alt:"image"}})]),t._v(" "),a("p",[t._v("图中可以看到以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("执行时间的上下文")]),t._v(" "),a("li",[t._v("服务间的层次关系")]),t._v(" "),a("li",[t._v("服务间串行或并行调用链")])]),t._v(" "),a("p",[t._v("结合以上信息，在实际场景中我们可以通过整个系统的调用链的上下文、性能等指标信息，一下子就能够发现系统的痛点在哪儿")]),t._v(" "),a("h2",{attrs:{id:"zipkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zipkin"}},[t._v("#")]),t._v(" Zipkin")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/f82f883ce74801abfece12c775f45c6c.png",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"是什么-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么-2"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),a("p",[t._v("Zipkin 是分布式追踪系统。它的作用是收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找")]),t._v(" "),a("p",[t._v("Zipkin 的设计基于 "),a("a",{attrs:{href:"http://research.google.com/pubs/pub36356.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Dapper"),a("OutboundLink")],1),t._v(" 论文。")]),t._v(" "),a("h3",{attrs:{id:"运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[t._v("#")]),t._v(" 运行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker run -d -p 9411:9411 openzipkin/zipkin\n")])])]),a("p",[t._v("其他方法安装参见：https://github.com/openzipkin/zipkin")]),t._v(" "),a("h3",{attrs:{id:"验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[t._v("#")]),t._v(" 验证")]),t._v(" "),a("p",[t._v("访问 http://127.0.0.1:9411/zipkin/ 检查 Zipkin 是否运行正常")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/f22ea6012f6ce4adea9f29d36f1017c7.jpg",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"grpc-opentracing-zipkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grpc-opentracing-zipkin"}},[t._v("#")]),t._v(" gRPC + Opentracing + Zipkin")]),t._v(" "),a("p",[t._v("在前面的小节中，我们做了以下准备工作：")]),t._v(" "),a("ul",[a("li",[t._v("了解 Opentracing 是什么")]),t._v(" "),a("li",[t._v("搭建 Zipkin 提供分布式追踪系统的功能")])]),t._v(" "),a("p",[t._v("接下来实现 gRPC 通过 Opentracing 标准 API 对接 Zipkin，再通过 Zipkin 去查看数据")]),t._v(" "),a("h3",{attrs:{id:"目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),a("p",[t._v("新建 simple_zipkin_client、simple_zipkin_server 目录，目录结构如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("go-grpc-example\n├── LICENSE\n├── README.md\n├── client\n│   ├── ...\n│   ├── simple_zipkin_client\n├── conf\n├── pkg\n├── proto\n├── server\n│   ├── ...\n│   ├── simple_zipkin_server\n└── vendor\n")])])]),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ go get -u github.com/openzipkin/zipkin-go-opentracing\n$ go get -u github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\n")])])]),a("h3",{attrs:{id:"grpc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[t._v("#")]),t._v(" gRPC")]),t._v(" "),a("h4",{attrs:{id:"server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[t._v("#")]),t._v(" Server")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('package main\n\nimport (\n\t"context"\n\t"log"\n\t"net"\n\n\t"github.com/grpc-ecosystem/go-grpc-middleware"\n\t"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc"\n\tzipkin "github.com/openzipkin/zipkin-go-opentracing"\n\t"google.golang.org/grpc"\n\n\t"github.com/EDDYCJY/go-grpc-example/pkg/gtls"\n\tpb "github.com/EDDYCJY/go-grpc-example/proto"\n)\n\ntype SearchService struct{}\n\nfunc (s *SearchService) Search(ctx context.Context, r *pb.SearchRequest) (*pb.SearchResponse, error) {\n\treturn &pb.SearchResponse{Response: r.GetRequest() + " Server"}, nil\n}\n\nconst (\n\tPORT = "9005"\n\n\tSERVICE_NAME              = "simple_zipkin_server"\n\tZIPKIN_HTTP_ENDPOINT      = "http://127.0.0.1:9411/api/v1/spans"\n\tZIPKIN_RECORDER_HOST_PORT = "127.0.0.1:9000"\n)\n\nfunc main() {\n\tcollector, err := zipkin.NewHTTPCollector(ZIPKIN_HTTP_ENDPOINT)\n\tif err != nil {\n\t\tlog.Fatalf("zipkin.NewHTTPCollector err: %v", err)\n\t}\n\n\trecorder := zipkin.NewRecorder(collector, true, ZIPKIN_RECORDER_HOST_PORT, SERVICE_NAME)\n\n\ttracer, err := zipkin.NewTracer(\n\t\trecorder, zipkin.ClientServerSameSpan(false),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf("zipkin.NewTracer err: %v", err)\n\t}\n\n\ttlsServer := gtls.Server{\n\t\tCaFile:   "../../conf/ca.pem",\n\t\tCertFile: "../../conf/server/server.pem",\n\t\tKeyFile:  "../../conf/server/server.key",\n\t}\n\tc, err := tlsServer.GetCredentialsByCA()\n\tif err != nil {\n\t\tlog.Fatalf("GetTLSCredentialsByCA err: %v", err)\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.Creds(c),\n\t\tgrpc_middleware.WithUnaryServerChain(\n\t\t\totgrpc.OpenTracingServerInterceptor(tracer, otgrpc.LogPayloads()),\n\t\t),\n\t}\n    ...\n}\n')])])]),a("ul",[a("li",[t._v("zipkin.NewHTTPCollector：创建一个 Zipkin HTTP 后端收集器")]),t._v(" "),a("li",[t._v("zipkin.NewRecorder：创建一个基于 Zipkin 收集器的记录器")]),t._v(" "),a("li",[t._v("zipkin.NewTracer：创建一个 OpenTracing 跟踪器（兼容 Zipkin Tracer）")]),t._v(" "),a("li",[t._v("otgrpc.OpenTracingClientInterceptor：返回 grpc.UnaryServerInterceptor，不同点在于该拦截器会在 gRPC Metadata 中查找 OpenTracing SpanContext。如果找到则为该服务的 Span Context 的子节点")]),t._v(" "),a("li",[t._v("otgrpc.LogPayloads：设置并返回 Option。作用是让 OpenTracing 在双向方向上记录应用程序的有效载荷（payload）")])]),t._v(" "),a("p",[t._v("总的来讲，就是初始化 Zipkin，其又包含收集器、记录器、跟踪器。再利用拦截器在 Server 端实现 SpanContext、Payload 的双向读取和管理")]),t._v(" "),a("h4",{attrs:{id:"client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[t._v("#")]),t._v(" Client")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func main() {\n\t// the same as zipkin server\n\t// ...\n\tconn, err := grpc.Dial(":"+PORT, grpc.WithTransportCredentials(c),\n\t\tgrpc.WithUnaryInterceptor(\n\t\t\totgrpc.OpenTracingClientInterceptor(tracer, otgrpc.LogPayloads()),\n\t\t))\n\t...\n}\n')])])]),a("ul",[a("li",[t._v("otgrpc.OpenTracingClientInterceptor：返回 grpc.UnaryClientInterceptor。该拦截器的核心功能在于：")])]),t._v(" "),a("p",[t._v("（1）OpenTracing SpanContext 注入 gRPC Metadata")]),t._v(" "),a("p",[t._v("（2）查看 context.Context 中的上下文关系，若存在父级 Span 则创建一个 ChildOf 引用，得到一个子 Span")]),t._v(" "),a("p",[t._v("其他方面，与 Server 端是一致的，先初始化 Zipkin，再增加 Client 端特需的拦截器。就可以完成基础工作啦")]),t._v(" "),a("h3",{attrs:{id:"验证-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证-2"}},[t._v("#")]),t._v(" 验证")]),t._v(" "),a("p",[t._v("启动 Server.go，执行 Client.go。查看 http://127.0.0.1:9411/zipkin/ 的示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/35c586cc15b28496d5c227e03cde7e67.jpg",alt:"image"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/8c17c36d87764237e75b4d7c4739fdf4.jpg",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"复杂点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂点"}},[t._v("#")]),t._v(" 复杂点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/d33c339e872ceab76c906e2da1a450c3.jpg",alt:"image"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.eddycjy.com/dc3fc3ec49276d3b56c0c2d22e6a5ad4.jpg",alt:"image"}})]),t._v(" "),a("p",[t._v("来，自己实践一下")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("在多服务下的架构下，串行、并行、服务套服务是一个非常常见的情况，用常规的方案往往很难发现问题在哪里（成本太大）。而这种情况就是"),a("strong",[t._v("分布式追踪系统")]),t._v("大展拳脚的机会了")]),t._v(" "),a("p",[t._v("希望你通过本章节的介绍和学习，能够了解其概念和搭建且应用一个追踪系统。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("h3",{attrs:{id:"本系列示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本系列示例代码"}},[t._v("#")]),t._v(" 本系列示例代码")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/EDDYCJY/go-grpc-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("go-grpc-example"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://opentracing.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("opentracing"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zipkin.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("zipkin"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);