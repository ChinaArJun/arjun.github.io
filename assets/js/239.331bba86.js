(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{674:function(t,e,a){"use strict";a.r(e);var n=a(44),v=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_7-4-深入理解-go-map：赋值和扩容迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-深入理解-go-map：赋值和扩容迁移"}},[t._v("#")]),t._v(" 7.4 深入理解 Go map：赋值和扩容迁移")]),t._v(" "),a("h2",{attrs:{id:"概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[t._v("#")]),t._v(" 概要")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://book.eddycjy.com/golang/map/map-access.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("上一章节"),a("OutboundLink")],1),t._v(" 中，数据结构小节里讲解了大量基础字段，可能你会疑惑需要 #&（！……#（！￥！ 来干嘛？接下来我们一起简单了解一下基础概念。再开始研讨今天文章的重点内容。我相信这样你能更好的读懂这篇文章")]),t._v(" "),a("h3",{attrs:{id:"哈希函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数"}},[t._v("#")]),t._v(" 哈希函数")]),t._v(" "),a("p",[t._v("哈希函数，又称散列算法、散列函数。主要作用是通过特定算法将数据根据一定规则组合重新生成得到一个"),a("strong",[t._v("散列值")])]),t._v(" "),a("p",[t._v("而在哈希表中，其生成的散列值常用于寻找其键映射到哪一个桶上。而一个好的哈希函数，应当尽量少的出现哈希冲突，以此保证操作哈希表的时间复杂度（但是哈希冲突在目前来讲，是无法避免的。我们需要 “解决” 它）")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://wx3.sinaimg.cn/large/006fVPCvly1g161h7r7hgj30is0dmjro.jpg",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"链地址法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链地址法"}},[t._v("#")]),t._v(" 链地址法")]),t._v(" "),a("p",[t._v('在哈希操作中，相当核心的一个处理动作就是 “哈希冲突” 的解决。而在 Go map 中采用的就是 "链地址法 " 去解决哈希冲突，又称 "拉链法"。其主要做法是数组 + 链表的数据结构，其溢出节点的存储内存都是动态申请的，因此相对更灵活。而每一个元素都是一个链表。如下图：')]),t._v(" "),a("p",[a("img",{attrs:{src:"http://wx4.sinaimg.cn/large/006fVPCvly1g1dw2b8t0ej30e60cy747.jpg",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"桶-溢出桶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桶-溢出桶"}},[t._v("#")]),t._v(" 桶/溢出桶")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type hmap struct {\n\t...\n\tbuckets    unsafe.Pointer\n    ...\n\textra *mapextra\n}\n\ntype mapextra struct {\n\toverflow    *[]*bmap\n\toldoverflow *[]*bmap\n\tnextOverflow *bmap\n}\n")])])]),a("p",[t._v("在上章节中，我们介绍了 Go map 中的桶和溢出桶的概念，在其桶中只能存储 8 个键值对元素。当超过 8 个时，将会使用溢出桶进行存储或进行扩容")]),t._v(" "),a("p",[t._v("你可能会有疑问，hint 大于 8 又会怎么样？答案很明显，性能问题，其时间复杂度改变（也就是执行效率出现问题）")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("概要复习的差不多后，接下来我们将一同研讨 Go map 的另外三个核心行为：赋值、扩容、迁移。正式开始我们的研讨之旅吧 ：）")]),t._v(" "),a("h2",{attrs:{id:"赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值"}},[t._v("#")]),t._v(" 赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('m := make(map[int32]string)\nm[0] = "EDDYCJY"\n')])])]),a("h3",{attrs:{id:"函数原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数原型"}},[t._v("#")]),t._v(" 函数原型")]),t._v(" "),a("p",[t._v("在 map 的赋值动作中，依旧是针对 32/64 位、string、pointer 类型有不同的转换处理，总的函数原型如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer\nfunc mapaccess1_fast32(t *maptype, h *hmap, key uint32) unsafe.Pointer\nfunc mapaccess2_fast32(t *maptype, h *hmap, key uint32) (unsafe.Pointer, bool)\nfunc mapassign_fast32(t *maptype, h *hmap, key uint32) unsafe.Pointer\nfunc mapassign_fast32ptr(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer\n\nfunc mapaccess1_fast64(t *maptype, h *hmap, key uint64) unsafe.Pointer\nfunc mapaccess2_fast64(t *maptype, h *hmap, key uint64) (unsafe.Pointer, bool)\nfunc mapassign_fast64(t *maptype, h *hmap, key uint64) unsafe.Pointer\nfunc mapassign_fast64ptr(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer\nfunc mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer\nfunc mapaccess2_faststr(t *maptype, h *hmap, ky string) (unsafe.Pointer, bool)\nfunc mapassign_faststr(t *maptype, h *hmap, s string) unsafe.Pointer\n...\n")])])]),a("p",[t._v("接下来我们将分成几个部分去看看底层在赋值的时候，都做了些什么处理？")]),t._v(" "),a("h3",{attrs:{id:"源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),a("h4",{attrs:{id:"第一阶段：校验和初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段：校验和初始化"}},[t._v("#")]),t._v(" 第一阶段：校验和初始化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer {\n\tif h == nil {\n\t\tpanic(plainError("assignment to entry in nil map"))\n\t}\n\t...\n\tif h.flags&hashWriting != 0 {\n\t\tthrow("concurrent map writes")\n\t}\n\talg := t.key.alg\n\thash := alg.hash(key, uintptr(h.hash0))\n\n\th.flags |= hashWriting\n\n\tif h.buckets == nil {\n\t\th.buckets = newobject(t.bucket) // newarray(t.bucket, 1)\n\t}\n    ...\t\n}\n')])])]),a("ul",[a("li",[t._v("判断 hmap 是否已经初始化（是否为 nil）")]),t._v(" "),a("li",[t._v("判断是否并发读写 map，若是则抛出异常")]),t._v(" "),a("li",[t._v("根据 key 的不同类型调用不同的 hash 方法计算得出 hash 值")]),t._v(" "),a("li",[t._v("设置 flags 标志位，表示有一个 goroutine 正在写入数据。因为 "),a("code",[t._v("alg.hash")]),t._v(" 有可能出现 "),a("code",[t._v("panic")]),t._v(" 导致异常")]),t._v(" "),a("li",[t._v("判断 buckets 是否为 nil，若是则调用 "),a("code",[t._v("newobject")]),t._v(" 根据当前 bucket 大小进行分配（例如：上章节提到的 "),a("code",[t._v("makemap_small")]),t._v(" 方法，就在初始化时没有初始 buckets，那么它在第一次赋值时就会对 buckets 分配）")])]),t._v(" "),a("h4",{attrs:{id:"第二阶段：寻找可插入位和更新既有值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段：寻找可插入位和更新既有值"}},[t._v("#")]),t._v(" 第二阶段：寻找可插入位和更新既有值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("...\nagain:\n\tbucket := hash & bucketMask(h.B)\n\tif h.growing() {\n\t\tgrowWork(t, h, bucket)\n\t}\n\tb := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + bucket*uintptr(t.bucketsize)))\n\ttop := tophash(hash)\n\n\tvar inserti *uint8\n\tvar insertk unsafe.Pointer\n\tvar val unsafe.Pointer\n\tfor {\n\t\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\t\tif b.tophash[i] != top {\n\t\t\t\tif b.tophash[i] == empty && inserti == nil {\n\t\t\t\t\tinserti = &b.tophash[i]\n\t\t\t\t\tinsertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\t\t\t\t\tval = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tk := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\t\t\tif t.indirectkey {\n\t\t\t\tk = *((*unsafe.Pointer)(k))\n\t\t\t}\n\t\t\tif !alg.equal(key, k) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// already have a mapping for key. Update it.\n\t\t\tif t.needkeyupdate {\n\t\t\t\ttypedmemmove(t.key, k, key)\n\t\t\t}\n\t\t\tval = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize))\n\t\t\tgoto done\n\t\t}\n\t\tovf := b.overflow(t)\n\t\tif ovf == nil {\n\t\t\tbreak\n\t\t}\n\t\tb = ovf\n\t}\n\n\tif !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\t\thashGrow(t, h)\n\t\tgoto again // Growing the table invalidates everything, so try again\n\t}\n\t...\n")])])]),a("ul",[a("li",[t._v("根据低八位计算得到 bucket 的内存地址，并判断是否正在扩容，若正在扩容中则先迁移再接着处理")]),t._v(" "),a("li",[t._v("计算并得到 bucket 的 bmap 指针地址，计算 key hash 高八位用于查找 Key")]),t._v(" "),a("li",[t._v("迭代 buckets 中的每一个 bucket（共 8 个），对比 "),a("code",[t._v("bucket.tophash")]),t._v(" 与 top（高八位）是否一致")]),t._v(" "),a("li",[t._v("若不一致，判断是否为空槽。若是空槽（有两种情况，第一种是"),a("strong",[t._v("没有插入过")]),t._v("。第二种是"),a("strong",[t._v("插入后被删除")]),t._v("），则把该位置标识为可插入 tophash 位置。注意，这里就是第一个可以插入数据的地方")]),t._v(" "),a("li",[t._v("若 key 与当前 k 不匹配则跳过。但若是匹配（也就是原本已经存在），则进行更新。最后跳出并返回 value 的内存地址")]),t._v(" "),a("li",[t._v("判断是否迭代完毕，若是则结束迭代 buckets 并更新当前桶位置")]),t._v(" "),a("li",[t._v("若满足三个条件：触发最大 "),a("code",[t._v("LoadFactor")]),t._v(" 、存在过多溢出桶 "),a("code",[t._v("overflow buckets")]),t._v("、没有正在进行扩容。就会进行扩容动作（以确保后续的动作）")])]),t._v(" "),a("p",[t._v("总的来讲，这一块逻辑做了两件大事，第一是"),a("strong",[t._v("寻找空位，将位置其记录在案，用于后续的插入动作")]),t._v("。第二是"),a("strong",[t._v("判断 Key 是否已经存在哈希表中，存在则进行更新")]),t._v("。而若是第二种场景，更新完毕后就会进行收尾动作，第一种将继续执行下述的代码")]),t._v(" "),a("h4",{attrs:{id:"第三阶段：申请新的插入位和插入新值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三阶段：申请新的插入位和插入新值"}},[t._v("#")]),t._v(" 第三阶段：申请新的插入位和插入新值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    ...\n\tif inserti == nil {\n\t\tnewb := h.newoverflow(t, b)\n\t\tinserti = &newb.tophash[0]\n\t\tinsertk = add(unsafe.Pointer(newb), dataOffset)\n\t\tval = add(insertk, bucketCnt*uintptr(t.keysize))\n\t}\n\n\tif t.indirectkey {\n\t\tkmem := newobject(t.key)\n\t\t*(*unsafe.Pointer)(insertk) = kmem\n\t\tinsertk = kmem\n\t}\n\tif t.indirectvalue {\n\t\tvmem := newobject(t.elem)\n\t\t*(*unsafe.Pointer)(val) = vmem\n\t}\n\ttypedmemmove(t.key, insertk, key)\n\t*inserti = top\n\th.count++\n\ndone:\n\t...\n\treturn val\n\n")])])]),a("p",[t._v("经过前面迭代寻找动作，若没有找到可插入的位置，意味着当前的所有桶都满了，将重新分配一个新溢出桶用于插入动作。最后再在上一步申请的新插入位置，存储键值对，返回该值的内存地址")]),t._v(" "),a("h4",{attrs:{id:"第四阶段：写入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四阶段：写入"}},[t._v("#")]),t._v(" 第四阶段：写入")]),t._v(" "),a("p",[t._v("但是这里又疑惑了？最后为什么是返回内存地址。这是因为隐藏的最后一步写入动作（将值拷贝到指定内存区域）是通过底层汇编配合来完成的，在 runtime 中只完成了绝大部分的动作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func main() {\n\tm := make(map[int32]int32)\n\tm[0] = 6666666\n}\n")])])]),a("p",[t._v("对应的汇编部分：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("...\n0x0099 00153 (test.go:6)\tCALL\truntime.mapassign_fast32(SB)\n0x009e 00158 (test.go:6)\tPCDATA\t$2, $2\n0x009e 00158 (test.go:6)\tMOVQ\t24(SP), AX\n0x00a3 00163 (test.go:6)\tPCDATA\t$2, $0\n0x00a3 00163 (test.go:6)\tMOVL\t$6666666, (AX)\n")])])]),a("p",[t._v("这里分为了几个部位，主要是调用 "),a("code",[t._v("mapassign")]),t._v(" 函数和拿到值存放的内存地址，再将 6666666 这个值存放进该内存地址中。另外我们看到 "),a("code",[t._v("PCDATA")]),t._v(" 指令，主要是包含一些垃圾回收的信息，由编译器产生")]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("通过前面几个阶段的分析，我们可梳理出一些要点。例如：")]),t._v(" "),a("ul",[a("li",[t._v("不同类型对应哈希函数不一样")]),t._v(" "),a("li",[t._v("高八位用于定位 bucket")]),t._v(" "),a("li",[t._v("低八位用于定位 key，快速试错后再进行完整对比")]),t._v(" "),a("li",[t._v("buckets/overflow buckets 遍历")]),t._v(" "),a("li",[t._v("可插入位的处理")]),t._v(" "),a("li",[t._v("最终写入动作与底层汇编的交互")])]),t._v(" "),a("h2",{attrs:{id:"扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),a("p",[t._v("在所有动作中，扩容规则是大家较关注的点，也是赋值里非常重要的一环。因此咱们将这节拉出来，对这块细节进行研讨")]),t._v(" "),a("h3",{attrs:{id:"什么时候扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候扩容"}},[t._v("#")]),t._v(" 什么时候扩容")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\thashGrow(t, h)\n\tgoto again\n}\n")])])]),a("p",[t._v("在特定条件的情况下且当前没有正在进行扩容动作（以判断 "),a("code",[t._v("hmap.oldbuckets != nil")]),t._v(" 为基准）。哈希表在赋值、删除的动作下会触发扩容行为，条件如下：")]),t._v(" "),a("ul",[a("li",[t._v("触发 "),a("code",[t._v("load factor")]),t._v(" 的最大值，负载因子已达到当前界限")]),t._v(" "),a("li",[t._v("溢出桶 "),a("code",[t._v("overflow buckets")]),t._v(" 过多")])]),t._v(" "),a("h3",{attrs:{id:"什么时候受影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候受影响"}},[t._v("#")]),t._v(" 什么时候受影响")]),t._v(" "),a("p",[t._v("那么什么情况下会对这两个 “值” 有影响呢？如下：")]),t._v(" "),a("ol",[a("li",[t._v("负载因子 "),a("code",[t._v("load factor")]),t._v("，用途是评估哈希表当前的时间复杂度，其与哈希表当前包含的键值对数、桶数量等相关。如果负载因子越大，则说明空间使用率越高，但产生哈希冲突的可能性更高。而负载因子越小，说明空间使用率低，产生哈希冲突的可能性更低")]),t._v(" "),a("li",[t._v("溢出桶 "),a("code",[t._v("overflow buckets")]),t._v(" 的判定与 buckets 总数和 overflow buckets 总数相关联")])]),t._v(" "),a("h3",{attrs:{id:"因子关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#因子关系"}},[t._v("#")]),t._v(" 因子关系")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("loadFactor")]),t._v(" "),a("th",[t._v("%overflow")]),t._v(" "),a("th",[t._v("bytes/entry")]),t._v(" "),a("th",[t._v("hitprobe")]),t._v(" "),a("th",[t._v("missprobe")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("4.00")]),t._v(" "),a("td",[t._v("2.13")]),t._v(" "),a("td",[t._v("20.77")]),t._v(" "),a("td",[t._v("3.00")]),t._v(" "),a("td",[t._v("4.00")])]),t._v(" "),a("tr",[a("td",[t._v("4.50")]),t._v(" "),a("td",[t._v("4.05")]),t._v(" "),a("td",[t._v("17.30")]),t._v(" "),a("td",[t._v("3.25")]),t._v(" "),a("td",[t._v("4.50")])]),t._v(" "),a("tr",[a("td",[t._v("5.00")]),t._v(" "),a("td",[t._v("6.85")]),t._v(" "),a("td",[t._v("14.77")]),t._v(" "),a("td",[t._v("3.50")]),t._v(" "),a("td",[t._v("5.00")])]),t._v(" "),a("tr",[a("td",[t._v("5.50")]),t._v(" "),a("td",[t._v("10.55")]),t._v(" "),a("td",[t._v("12.94")]),t._v(" "),a("td",[t._v("3.75")]),t._v(" "),a("td",[t._v("5.50")])]),t._v(" "),a("tr",[a("td",[t._v("6.00")]),t._v(" "),a("td",[t._v("15.27")]),t._v(" "),a("td",[t._v("11.67")]),t._v(" "),a("td",[t._v("4.00")]),t._v(" "),a("td",[t._v("6.00")])]),t._v(" "),a("tr",[a("td",[t._v("6.50")]),t._v(" "),a("td",[t._v("20.90")]),t._v(" "),a("td",[t._v("10.79")]),t._v(" "),a("td",[t._v("4.25")]),t._v(" "),a("td",[t._v("6.50")])]),t._v(" "),a("tr",[a("td",[t._v("7.00")]),t._v(" "),a("td",[t._v("27.14")]),t._v(" "),a("td",[t._v("10.15")]),t._v(" "),a("td",[t._v("4.50")]),t._v(" "),a("td",[t._v("7.00")])])])]),t._v(" "),a("ul",[a("li",[t._v("loadFactor：负载因子")]),t._v(" "),a("li",[t._v("%overflow：溢出率，具有溢出桶 "),a("code",[t._v("overflow buckets")]),t._v(" 的桶的百分比")]),t._v(" "),a("li",[t._v("bytes/entry：每个键值对所的字节数开销")]),t._v(" "),a("li",[t._v("hitprobe：查找存在的 key 时，平均需要检索的条目数量")]),t._v(" "),a("li",[t._v("missprobe：查找不存在的 key 时，平均需要检索的条目数量")])]),t._v(" "),a("p",[t._v("这一组数据能够体现出不同的负载因子会给哈希表的动作带来怎么样的影响。而在上一章节我们有提到默认的负载因子是 6.5 (loadFactorNum/loadFactorDen)，可以看出来是经过测试后取出的一个比较合理的因子。能够较好的影响哈希表的扩容动作的时机")]),t._v(" "),a("h3",{attrs:{id:"源码剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码剖析"}},[t._v("#")]),t._v(" 源码剖析")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func hashGrow(t *maptype, h *hmap) {\n\tbigger := uint8(1)\n\tif !overLoadFactor(h.count+1, h.B) {\n\t\tbigger = 0\n\t\th.flags |= sameSizeGrow\n\t}\n\toldbuckets := h.buckets\n\tnewbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)\n    ...\n\th.oldbuckets = oldbuckets\n\th.buckets = newbuckets\n\th.nevacuate = 0\n\th.noverflow = 0\n\n\tif h.extra != nil && h.extra.overflow != nil {\n\t\tif h.extra.oldoverflow != nil {\n\t\t\tthrow("oldoverflow is not nil")\n\t\t}\n\t\th.extra.oldoverflow = h.extra.overflow\n\t\th.extra.overflow = nil\n\t}\n\tif nextOverflow != nil {\n\t\tif h.extra == nil {\n\t\t\th.extra = new(mapextra)\n\t\t}\n\t\th.extra.nextOverflow = nextOverflow\n\t}\n\n\t// the actual copying of the hash table data is done incrementally\n\t// by growWork() and evacuate().\n}\n')])])]),a("h4",{attrs:{id:"第一阶段：确定扩容容量规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段：确定扩容容量规则"}},[t._v("#")]),t._v(" 第一阶段：确定扩容容量规则")]),t._v(" "),a("p",[t._v("在上小节有讲到扩容的依据有两种，在 "),a("code",[t._v("hashGrow")]),t._v(" 开头就进行了划分。如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if !overLoadFactor(h.count+1, h.B) {\n\tbigger = 0\n\th.flags |= sameSizeGrow\n}\n")])])]),a("p",[t._v("若不是负载因子 "),a("code",[t._v("load factor")]),t._v(" 超过当前界限，也就是属于溢出桶 "),a("code",[t._v("overflow buckets")]),t._v(" 过多的情况。因此本次扩容规则将是 "),a("code",[t._v("sameSizeGrow")]),t._v("，即是"),a("strong",[t._v("不改变大小的扩容动作")]),t._v("。那要是前者的情况呢？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bigger := uint8(1)\n...\nnewbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)\n")])])]),a("p",[t._v("结合代码分析可得出，若是负载因子 "),a("code",[t._v("load factor")]),t._v(" 达到当前界限，将会动态扩容"),a("strong",[t._v("当前大小的两倍")]),t._v("作为其新容量大小")]),t._v(" "),a("h4",{attrs:{id:"第二阶段：初始化、交换新旧-桶-溢出桶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段：初始化、交换新旧-桶-溢出桶"}},[t._v("#")]),t._v(" 第二阶段：初始化、交换新旧 桶/溢出桶")]),t._v(" "),a("p",[t._v("主要是针对扩容的相关数据"),a("strong",[t._v("前置处理")]),t._v("，涉及 buckets/oldbuckets、overflow/oldoverflow 之类与存储相关的字段")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("...\noldbuckets := h.buckets\nnewbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)\n\nflags := h.flags &^ (iterator | oldIterator)\nif h.flags&iterator != 0 {\n\tflags |= oldIterator\n}\n\nh.B += bigger\n...\nh.noverflow = 0\n\nif h.extra != nil && h.extra.overflow != nil {\n\t...\n\th.extra.oldoverflow = h.extra.overflow\n\th.extra.overflow = nil\n}\nif nextOverflow != nil {\n\t...\n\th.extra.nextOverflow = nextOverflow\n}\n")])])]),a("p",[t._v("这里注意到这段代码： "),a("code",[t._v("newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)")]),t._v("。第一反应是扩容的时候就马上申请并初始化内存了吗？假设涉及大量的内存分配，那挺耗费性能的...")]),t._v(" "),a("p",[t._v("然而并不，内部只会先进行预分配，当使用的时候才会真正的去初始化")]),t._v(" "),a("h4",{attrs:{id:"第三阶段：扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三阶段：扩容"}},[t._v("#")]),t._v(" 第三阶段：扩容")]),t._v(" "),a("p",[t._v("在源码中，发现第三阶段的流转并没有显式展示。这是因为流转由底层去做控制了。但通过分析代码和注释，可得知由第三阶段涉及 "),a("code",[t._v("growWork")]),t._v(" 和 "),a("code",[t._v("evacuate")]),t._v(" 方法。如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func growWork(t *maptype, h *hmap, bucket uintptr) {\n\tevacuate(t, h, bucket&h.oldbucketmask())\n\n\tif h.growing() {\n\t\tevacuate(t, h, h.nevacuate)\n\t}\n}\n")])])]),a("p",[t._v("在该方法中，主要是两个  "),a("code",[t._v("evacuate")]),t._v(" 函数的调用。他们在调用上又分别有什么区别呢？如下：")]),t._v(" "),a("ul",[a("li",[t._v("evacuate(t, h, bucket&h.oldbucketmask()): 将 oldbucket 中的元素迁移 rehash 到扩容后的新 bucket")]),t._v(" "),a("li",[t._v("evacuate(t, h, h.nevacuate): 如果当前正在进行扩容，则再进行多一次迁移")])]),t._v(" "),a("p",[t._v("另外，在执行扩容动作的时候，可以发现都是以 bucket/oldbucket 为单位的，而不是传统的 buckets/oldbuckets。再结合代码分析，可得知在 Go map 中"),a("strong",[t._v("扩容是采取增量扩容的方式，并非一步到位")])]),t._v(" "),a("h5",{attrs:{id:"为什么是增量扩容？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是增量扩容？"}},[t._v("#")]),t._v(" 为什么是增量扩容？")]),t._v(" "),a("p",[t._v("如果是全量扩容的话，那问题就来了。假设当前 hmap 的容量比较大，直接全量扩容的话，就会导致扩容要花费大量的时间和内存，导致系统卡顿，最直观的表现就是慢。显然，不能这么做")]),t._v(" "),a("p",[t._v("而增量扩容，就可以解决这个问题。它通过每一次的 map 操作行为去分摊总的一次性动作。因此有了 buckets/oldbuckets 的设计，它是逐步完成的，并且会在扩容完毕后才进行清空")]),t._v(" "),a("h3",{attrs:{id:"小结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("通过前面三个阶段的分析，可以得知扩容的大致过程。我们阶段性总结一下。主要如下：")]),t._v(" "),a("ul",[a("li",[t._v("根据需扩容的原因不同（overLoadFactor/tooManyOverflowBuckets），分为两类容量规则方向，为等量扩容（不改变原有大小）或双倍扩容")]),t._v(" "),a("li",[t._v("新申请的扩容空间（newbuckets/newoverflow）都是预分配，等真正使用的时候才会初始化")]),t._v(" "),a("li",[t._v("扩容完毕后（预分配），不会马上就进行迁移。而是采取"),a("strong",[t._v("增量扩容")]),t._v("的方式，当有访问到具体 bukcet 时，才会逐渐的进行迁移（将 oldbucket 迁移到 bucket）")])]),t._v(" "),a("p",[t._v("这时候又想到，既然迁移是逐步进行的。那如果在途中又要扩容了，怎么办？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("again:\n\tbucket := hash & bucketMask(h.B)\n    ...\n\tif !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\t\thashGrow(t, h)\n\t\tgoto again \n\t}\n")])])]),a("p",[t._v("在这里注意到 "),a("code",[t._v("goto again")]),t._v(" 语句，结合上下文可得若正在进行扩容，就会不断地进行迁移。待迁移完毕后才会开始进行下一次的扩容动作")]),t._v(" "),a("h2",{attrs:{id:"迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移"}},[t._v("#")]),t._v(" 迁移")]),t._v(" "),a("p",[t._v("在扩容的完整闭环中，包含着迁移的动作，又称 “搬迁”。因此我们继续深入研究 "),a("code",[t._v("evacuate")]),t._v(" 函数。接下来一起打开迁移世界的大门。如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type evacDst struct {\n\tb *bmap          \n\ti int            \n\tk unsafe.Pointer \n\tv unsafe.Pointer \n}\n")])])]),a("p",[a("code",[t._v("evacDst")]),t._v(" 是迁移中的基础数据结构，其包含如下字段：")]),t._v(" "),a("ul",[a("li",[t._v("b: 当前目标桶")]),t._v(" "),a("li",[t._v("i: 当前目标桶存储的键值对数量")]),t._v(" "),a("li",[t._v("k: 指向当前 key 的内存地址")]),t._v(" "),a("li",[t._v("v: 指向当前 value 的内存地址")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func evacuate(t *maptype, h *hmap, oldbucket uintptr) {\n\tb := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.bucketsize)))\n\tnewbit := h.noldbuckets()\n\tif !evacuated(b) {\n\t\tvar xy [2]evacDst\n\t\tx := &xy[0]\n\t\tx.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize)))\n\t\tx.k = add(unsafe.Pointer(x.b), dataOffset)\n\t\tx.v = add(x.k, bucketCnt*uintptr(t.keysize))\n\n\t\tif !h.sameSizeGrow() {\n\t\t\ty := &xy[1]\n\t\t\ty.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))\n\t\t\ty.k = add(unsafe.Pointer(y.b), dataOffset)\n\t\t\ty.v = add(y.k, bucketCnt*uintptr(t.keysize))\n\t\t}\n\n\t\tfor ; b != nil; b = b.overflow(t) {\n            ...\n\t\t}\n\n\t\tif h.flags&oldIterator == 0 && t.bucket.kind&kindNoPointers == 0 {\n\t\t\tb := add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))\n\t\t\tptr := add(b, dataOffset)\n\t\t\tn := uintptr(t.bucketsize) - dataOffset\n\t\t\tmemclrHasPointers(ptr, n)\n\t\t}\n\t}\n\n\tif oldbucket == h.nevacuate {\n\t\tadvanceEvacuationMark(h, t, newbit)\n\t}\n}\n")])])]),a("ul",[a("li",[t._v("计算并得到 oldbucket 的 bmap 指针地址")]),t._v(" "),a("li",[t._v("计算 hmap 在增长之前的桶数量")]),t._v(" "),a("li",[t._v("判断当前的迁移（搬迁）状态，以便流转后续的操作。若没有正在进行迁移 "),a("code",[t._v("!evacuated(b)")]),t._v(" ，则根据扩容的规则的不同，当规则为等量扩容 "),a("code",[t._v("sameSizeGrow")]),t._v(" 时，只使用一个 "),a("code",[t._v("evacDst")]),t._v(" 桶用于分流。而为双倍扩容时，就会使用两个 "),a("code",[t._v("evacDst")]),t._v(" 进行分流操作")]),t._v(" "),a("li",[t._v("当分流完毕后，需要迁移的数据都会通过 "),a("code",[t._v("typedmemmove")]),t._v(" 函数迁移到指定的目标桶上")]),t._v(" "),a("li",[t._v("若当前不存在 flags 使用标志、使用 oldbucket 迭代器、bucket 不为指针类型。则取消链接溢出桶、清除键值")]),t._v(" "),a("li",[t._v("在最后 "),a("code",[t._v("advanceEvacuationMark")]),t._v(" 函数中会对迁移进度 "),a("code",[t._v("hmap.nevacuate")]),t._v(" 进行累积计数，并调用 "),a("code",[t._v("bucketEvacuated")]),t._v(" 对旧桶 oldbuckets 进行不断的迁移。直至全部迁移完毕。那么也就表示扩容完毕了，会对 "),a("code",[t._v("hmap.oldbuckets")]),t._v(" 和 "),a("code",[t._v("h.extra.oldoverflow")]),t._v(" 进行清空")])]),t._v(" "),a("p",[t._v("总的来讲，就是计算得到所需数据的位置。再根据当前的迁移状态、扩容规则进行数据分流迁移。结束后进行清理，促进 GC 的回收")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("在本章节我们主要研讨了 Go map 的几个核心动作，分别是：“赋值、扩容、迁移” 。而通过本次的阅读，我们能够更进一步的认识到一些要点，例如：")]),t._v(" "),a("ul",[a("li",[t._v("赋值的时候会触发扩容吗？")]),t._v(" "),a("li",[t._v("负载因子是什么？过高会带来什么问题？它的变动会对哈希表操作带来什么影响吗？")]),t._v(" "),a("li",[t._v("溢出桶越多会带来什么问题？")]),t._v(" "),a("li",[t._v("是否要扩容的基准条件是什么？")]),t._v(" "),a("li",[t._v("扩容的容量规则是怎么样的？")]),t._v(" "),a("li",[t._v("扩容的步骤是怎么样的？涉及到了哪些数据结构？")]),t._v(" "),a("li",[t._v("扩容是一次性扩容还是增量扩容？")]),t._v(" "),a("li",[t._v("正在扩容的时候又要扩容怎么办？")]),t._v(" "),a("li",[t._v("扩容时的迁移分流动作是怎么样的？")]),t._v(" "),a("li",[t._v("在扩容动作中，底层汇编承担了什么角色？做了什么事？")]),t._v(" "),a("li",[t._v("在 buckets/overflow buckets 中寻找时，是如何 “快速” 定位值的？低八位、高八位的用途？")]),t._v(" "),a("li",[t._v("空槽有可能出现在任意位置吗？假设已经没有空槽了，但是又有新值要插入，底层会怎么处理")])]),t._v(" "),a("p",[t._v("最后希望你通过本文的阅读，能更清楚地了解到 Go map 是怎么样运作的 ：）")])])}),[],!1,null,null,null);e.default=v.exports}}]);