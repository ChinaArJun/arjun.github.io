(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{683:function(t,a,v){"use strict";v.r(a);var r=v(44),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"用-godebug-看-gc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用-godebug-看-gc"}},[t._v("#")]),t._v(" 用 GODEBUG 看 GC")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://image.eddycjy.com/b07f55c7fd136392763729b9782f7776.png",alt:"image"}})]),t._v(" "),v("h2",{attrs:{id:"什么是-gc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-gc"}},[t._v("#")]),t._v(" 什么是 GC")]),t._v(" "),v("p",[t._v("在计算机科学中，垃圾回收（GC）是一种自动管理内存的机制，垃圾回收器会去尝试回收程序不再使用的对象及其占用的内存。而最早 John McCarthy 在 1959 年左右发明了垃圾回收，以简化 Lisp 中的手动内存管理的机制（来自 wikipedia）。")]),t._v(" "),v("h2",{attrs:{id:"为什么要-gc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要-gc"}},[t._v("#")]),t._v(" 为什么要 GC")]),t._v(" "),v("p",[t._v("手动管理内存挺麻烦，管错或者管漏内存也很糟糕，将会直接导致程序不稳定（持续泄露）甚至直接崩溃。")]),t._v(" "),v("h2",{attrs:{id:"gc-带来的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gc-带来的问题"}},[t._v("#")]),t._v(" GC 带来的问题")]),t._v(" "),v("p",[t._v("硬要说会带来什么问题的话，也就数大家最关注的 Stop The World（STW），STW 代指在执行某个垃圾回收算法的某个阶段时，需要将整个应用程序暂停去处理 GC 相关的工作事项。例如：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("行为")]),t._v(" "),v("th",[t._v("会不会 STW")]),t._v(" "),v("th",[t._v("为什么")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("标记开始")]),t._v(" "),v("td",[t._v("会")]),t._v(" "),v("td",[t._v("在开始标记时，准备根对象的扫描，会打开写屏障（Write Barrier） 和 辅助GC（mutator assist），而回收器和应用程序是并发运行的，因此会暂停当前正在运行的所有 Goroutine。")])]),t._v(" "),v("tr",[v("td",[t._v("并发标记中")]),t._v(" "),v("td",[t._v("不会")]),t._v(" "),v("td",[t._v("标记阶段，主要目的是标记堆内存中仍在使用的值。")])]),t._v(" "),v("tr",[v("td",[t._v("标记结束")]),t._v(" "),v("td",[t._v("会")]),t._v(" "),v("td",[t._v("在完成标记任务后，将重新扫描部分根对象，这时候会禁用写屏障（Write Barrier）和辅助GC（mutator assist），而标记阶段和应用程序是并发运行的，所以在标记阶段可能会有新的对象产生，因此在重新扫描时需要进行 STW。")])])])]),t._v(" "),v("h2",{attrs:{id:"如何调整-gc-频率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何调整-gc-频率"}},[t._v("#")]),t._v(" 如何调整 GC 频率")]),t._v(" "),v("p",[t._v("可以通过 GOGC 变量设置初始垃圾收集器的目标百分比值，对比的规则为当新分配的数值与上一次收集后剩余的实时数值的比例达到设置的目标百分比时，就会触发 GC，默认值为 GOGC=100。如果将其设置为 GOGC=off 可以完全禁用垃圾回收器，要不试试？")]),t._v(" "),v("p",[t._v("简单来讲就是，GOGC 的值设置的越大，GC 的频率越低，但每次最终所触发到 GC 的堆内存也会更大。")]),t._v(" "),v("h2",{attrs:{id:"各版本-gc-情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#各版本-gc-情况"}},[t._v("#")]),t._v(" 各版本 GC 情况")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("版本")]),t._v(" "),v("th",[t._v("GC 算法")]),t._v(" "),v("th",[t._v("STW 时间")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Go 1.0")]),t._v(" "),v("td",[t._v("STW（强依赖 tcmalloc）")]),t._v(" "),v("td",[t._v("百ms到秒级别")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.3")]),t._v(" "),v("td",[t._v("Mark STW, Sweep 并行")]),t._v(" "),v("td",[t._v("百ms级别")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.5")]),t._v(" "),v("td",[t._v("三色标记法, 并发标记清除。同时运行时从 C 和少量汇编，改为 Go 和少量汇编实现")]),t._v(" "),v("td",[t._v("10-50ms级别")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.6")]),t._v(" "),v("td",[t._v("1.5 中一些与并发 GC 不协调的地方更改，集中式的 GC 协调协程，改为状态机实现")]),t._v(" "),v("td",[t._v("5ms级别")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.7")]),t._v(" "),v("td",[t._v("GC 时由 mark 栈收缩改为并发，span 对象分配机制由 freelist 改为 bitmap 模式，SSA引入")]),t._v(" "),v("td",[t._v("ms级别")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.8")]),t._v(" "),v("td",[t._v("混合写屏障（hybrid write barrier）, 消除 re-scanning stack")]),t._v(" "),v("td",[t._v("sub ms")])]),t._v(" "),v("tr",[v("td",[t._v("Go 1.12")]),t._v(" "),v("td",[t._v("Mark Termination 流程优化")]),t._v(" "),v("td",[t._v("sub ms, 但几乎减少一半")])])])]),t._v(" "),v("p",[t._v("注：资料来源于 @boya 在深圳 Gopher Meetup 的分享。")]),t._v(" "),v("h2",{attrs:{id:"godebug"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#godebug"}},[t._v("#")]),t._v(" GODEBUG")]),t._v(" "),v("p",[t._v("GODEBUG 变量可以控制运行时内的调试变量，参数以逗号分隔，格式为："),v("code",[t._v("name=val")]),t._v("。本文着重点在 GC 的观察上，主要涉及 gctrace 参数，我们通过设置 "),v("code",[t._v("gctrace=1")]),t._v(" 后就可以使得垃圾收集器向标准错误流发出 GC 运行信息。")]),t._v(" "),v("h2",{attrs:{id:"涉及术语"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#涉及术语"}},[t._v("#")]),t._v(" 涉及术语")]),t._v(" "),v("ul",[v("li",[t._v("mark：标记阶段。")]),t._v(" "),v("li",[t._v("markTermination：标记结束阶段。")]),t._v(" "),v("li",[t._v("mutator assist：辅助 GC，是指在 GC 过程中 mutator 线程会并发运行，而 mutator assist 机制会协助 GC 做一部分的工作。")]),t._v(" "),v("li",[t._v("heap_live：在 Go 的内存管理中，span 是内存页的基本单元，每页大小为 8kb，同时 Go 会根据对象的大小不同而分配不同页数的 span，而 heap_live 就代表着所有 span 的总大小。")]),t._v(" "),v("li",[t._v("dedicated / fractional / idle：在标记阶段会分为三种不同的 mark worker 模式，分别是 dedicated、fractional 和 idle，它们代表着不同的专注程度，其中 dedicated 模式最专注，是完整的 GC 回收行为，fractional 只会干部分的 GC 行为，idle 最轻松。这里你只需要了解它是不同专注程度的 mark worker 就好了，详细介绍我们可以等后续的文章。")])]),t._v(" "),v("h2",{attrs:{id:"演示代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#演示代码"}},[t._v("#")]),t._v(" 演示代码")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("func main() {\n    wg := sync.WaitGroup{}\n    wg.Add(10)\n    for i := 0; i < 10; i++ {\n        go func(wg *sync.WaitGroup) {\n            var counter int\n            for i := 0; i < 1e10; i++ {\n                counter++\n            }\n            wg.Done()\n        }(&wg)\n    }\n\n    wg.Wait()\n}\n")])])]),v("h2",{attrs:{id:"gctrace"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gctrace"}},[t._v("#")]),t._v(" gctrace")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$ GODEBUG=gctrace=1 go run main.go    \ngc 1 @0.032s 0%: 0.019+0.45+0.003 ms clock, 0.076+0.22/0.40/0.80+0.012 ms cpu, 4->4->0 MB, 5 MB goal, 4 P\ngc 2 @0.046s 0%: 0.004+0.40+0.008 ms clock, 0.017+0.32/0.25/0.81+0.034 ms cpu, 4->4->0 MB, 5 MB goal, 4 P\ngc 3 @0.063s 0%: 0.004+0.40+0.008 ms clock, 0.018+0.056/0.32/0.64+0.033 ms cpu, 4->4->0 MB, 5 MB goal, 4 P\ngc 4 @0.080s 0%: 0.004+0.45+0.016 ms clock, 0.018+0.15/0.34/0.77+0.065 ms cpu, 4->4->1 MB, 5 MB goal, 4 P\ngc 5 @0.095s 0%: 0.015+0.87+0.005 ms clock, 0.061+0.27/0.74/1.8+0.023 ms cpu, 4->4->1 MB, 5 MB goal, 4 P\ngc 6 @0.113s 0%: 0.014+0.69+0.002 ms clock, 0.056+0.23/0.48/1.4+0.011 ms cpu, 4->4->1 MB, 5 MB goal, 4 P\ngc 7 @0.140s 1%: 0.031+2.0+0.042 ms clock, 0.12+0.43/1.8/0.049+0.17 ms cpu, 4->4->1 MB, 5 MB goal, 4 P\n...\n")])])]),v("h3",{attrs:{id:"格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[t._v("#")]),t._v(" 格式")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #->#-># MB, # MB goal, # P\n")])])]),v("h3",{attrs:{id:"含义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#含义"}},[t._v("#")]),t._v(" 含义")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("gc#")]),t._v("：GC 执行次数的编号，每次叠加。")]),t._v(" "),v("li",[v("code",[t._v("@#s")]),t._v("：自程序启动后到当前的具体秒数。")]),t._v(" "),v("li",[v("code",[t._v("#%")]),t._v("：自程序启动以来在GC中花费的时间百分比。")]),t._v(" "),v("li",[v("code",[t._v("#+...+#")]),t._v("：GC 的标记工作共使用的 CPU 时间占总 CPU 时间的百分比。")]),t._v(" "),v("li",[v("code",[t._v("#->#-># MB")]),t._v("：分别表示 GC 启动时, GC 结束时, GC 活动时的堆大小.")]),t._v(" "),v("li",[v("code",[t._v("#MB goal")]),t._v("：下一次触发 GC 的内存占用阈值。")]),t._v(" "),v("li",[v("code",[t._v("#P")]),t._v("：当前使用的处理器 P 的数量。")])]),t._v(" "),v("h3",{attrs:{id:"案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("gc 7 @0.140s 1%: 0.031+2.0+0.042 ms clock, 0.12+0.43/1.8/0.049+0.17 ms cpu, 4->4->1 MB, 5 MB goal, 4 P\n")])])]),v("ul",[v("li",[t._v("gc 7：第 7 次 GC。")]),t._v(" "),v("li",[t._v("@0.140s：当前是程序启动后的 0.140s。")]),t._v(" "),v("li",[t._v("1%：程序启动后到现在共花费 1% 的时间在 GC 上。")]),t._v(" "),v("li",[t._v("0.031+2.0+0.042 ms clock：\n"),v("ul",[v("li",[t._v("0.031：表示单个 P 在 mark 阶段的 STW 时间。")]),t._v(" "),v("li",[t._v("2.0：表示所有 P 的 mark concurrent（并发标记）所使用的时间。")]),t._v(" "),v("li",[t._v("0.042：表示单个 P 的 markTermination 阶段的 STW 时间。")])])]),t._v(" "),v("li",[t._v("0.12+0.43/1.8/0.049+0.17 ms cpu：\n"),v("ul",[v("li",[t._v("0.12：表示整个进程在 mark 阶段 STW 停顿的时间。")]),t._v(" "),v("li",[t._v("0.43/1.8/0.049：0.43 表示 mutator assist 占用的时间，1.8 表示 dedicated + fractional 占用的时间，0.049 表示 idle 占用的时间。")]),t._v(" "),v("li",[t._v("0.17ms：0.17 表示整个进程在 markTermination 阶段 STW 时间。")])])]),t._v(" "),v("li",[t._v("4->4->1 MB：\n"),v("ul",[v("li",[t._v("4：表示开始 mark 阶段前的 heap_live 大小。")]),t._v(" "),v("li",[t._v("4：表示开始 markTermination 阶段前的 heap_live 大小。")]),t._v(" "),v("li",[t._v("1：表示被标记对象的大小。")])])]),t._v(" "),v("li",[t._v("5 MB goal：表示下一次触发 GC 回收的阈值是 5 MB。")]),t._v(" "),v("li",[t._v("4 P：本次 GC 一共涉及多少个 P。")])]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("通过本章节我们掌握了使用 GODEBUG 查看应用程序 GC 运行情况的方法，只要用这种方法我们就可以观测不同情况下 GC 的情况了，甚至可以做出非常直观的对比图，大家不妨尝试一下。")]),t._v(" "),v("h2",{attrs:{id:"关联文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关联文章"}},[t._v("#")]),t._v(" 关联文章")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/Brby6D7d1szUIBjcD_8kfg",target:"_blank",rel:"noopener noreferrer"}},[t._v("用 GODEBUG 看调度跟踪"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://gocn.vip/question/310",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go GC打印出来的这些信息都是什么含义？"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"http://cbsheng.github.io/posts/godebug%E4%B9%8Bgctrace%E8%A7%A3%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GODEBUG之gctrace解析"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/77943973",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于Golang GC的一些误解--真的比Java GC更领先吗？"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("@boya 深入浅出Golang Runtime PPT")])])])}),[],!1,null,null,null);a.default=_.exports}}]);