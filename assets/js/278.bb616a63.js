(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{715:function(e,a,t){"use strict";t.r(a);var v=t(44),r=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"makefile-管理-api-项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#makefile-管理-api-项目"}},[e._v("#")]),e._v(" Makefile 管理 API 项目")]),e._v(" "),t("h2",{attrs:{id:"本节核心内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节核心内容"}},[e._v("#")]),e._v(" 本节核心内容")]),e._v(" "),t("ul",[t("li",[e._v("介绍 Makefile")]),e._v(" "),t("li",[e._v("介绍如何使用 Makefile")])]),e._v(" "),t("blockquote",[t("p",[e._v("本小节源码下载路径："),t("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo11",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo11"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("可先下载源码到本地，结合源码理解后续内容，边学边练。")]),e._v(" "),t("p",[e._v("本小节的代码是基于 "),t("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo10",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo10"),t("OutboundLink")],1),e._v(" 来开发的。")])]),e._v(" "),t("h2",{attrs:{id:"为什么需要-makefile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-makefile"}},[e._v("#")]),e._v(" 为什么需要 Makefile")]),e._v(" "),t("p",[e._v("Go 语言的 "),t("code",[e._v("go")]),e._v(" 命令自带源码管理功能，比如通过 "),t("code",[e._v("go build")]),e._v(" 可以实现对源码的编译，但是 Go 自带的源码管理功能在实际项目中还是满足不了需求，有时候执行 "),t("code",[e._v("go build")]),e._v(" 时，会附带很多编译参数，直接执行 "),t("code",[e._v("go build")]),e._v(" 命令也会很麻烦。这时候一般是通过更专业的 Makefile 来管理源码，通过 Makefile 可以实现诸如：编译、安装、清理等功能，其实需要的管理功能都可以通过 Makefile 来添加，Makefile 生来就是做这些的。")]),e._v(" "),t("h2",{attrs:{id:"makefile-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#makefile-简介"}},[e._v("#")]),e._v(" Makefile 简介")]),e._v(" "),t("p",[e._v("一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，Makefile 定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 Makefile 就像一个 Shell 脚本一样，其中也可以执行操作系统的命令（摘自百度百科）。")]),e._v(" "),t("p",[t("strong",[e._v("makefile 的规则")])]),e._v(" "),t("p",[e._v("Makefile 基本格式如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("target ... : prerequisites ...\n    command\n    ...\n")])])]),t("p",[e._v("其中：")]),e._v(" "),t("ul",[t("li",[e._v("target - 编译文件要生成的目标")]),e._v(" "),t("li",[e._v("prerequisites - 编译文件需要的依赖")]),e._v(" "),t("li",[e._v("command - 依赖生成目标所需要执行的命令（任意的 shell 命令），Makefile 中的命令必须以 [tab] 开头")])]),e._v(" "),t("p",[e._v("比如我们平时使用的 "),t("code",[e._v("gcc a.c b.c -o test")]),e._v(" 这里的 test 就是我们要生成的目标， a.c、b.c就是我们生成目标需要的依赖，而 "),t("code",[e._v("gcc a.c b.c -o test")]),e._v(" 则是命令。将这行命令用 Makefile 的方式来写就是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("test: a.c b.c\n    gcc a.c b.c -o test\n")])])]),t("h2",{attrs:{id:"api-server-添加-makefile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-server-添加-makefile"}},[e._v("#")]),e._v(" API Server 添加 Makefile")]),e._v(" "),t("p",[e._v("在 apiserver 根目录下新建文件 "),t("code",[e._v("Makefile")]),e._v("，内容为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('all: gotool\n\t@go build -v .\nclean:\n\trm -f apiserver\n\tfind . -name "[._]*.s[a-w][a-z]" | xargs -i rm -f {}\ngotool:\n\tgofmt -w .\n\tgo tool vet . |& grep -v vendor;true\nca:\n\topenssl req -new -nodes -x509 -out conf/server.crt -keyout conf/server.key -days 3650 -subj "/C=DE/ST=NRW/L=Earth/O=Random Company/OU=IT/CN=127.0.0.1/emailAddress=xxxxx@qq.com"\n\nhelp:\n\t@echo "make - compile the source code"\n\t@echo "make clean - remove binary file and vim swp files"\n\t@echo "make gotool - run go tool \'fmt\' and \'vet\'"\n\t@echo "make ca - generate ca files"\n\n.PHONY: clean gotool ca help\n')])])]),t("p",[e._v("上面的 Makefile 文件中，"),t("code",[e._v(".PHONY")]),e._v(" 是个伪目标，形式上是一个目标，但是不需要依赖，伪目标一般只是为了执行目标下面的命令（比如 clean 就是伪目标）。"),t("code",[e._v("@")]),e._v(" 放在行首，表示不打印此行。默认在编译的过程中，会把此行的展开效果字符串打印出来。")]),e._v(" "),t("p",[e._v("上面的 Makefile 实现了如下功能：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("make")]),e._v("：执行 "),t("code",[e._v("go build -v .")]),e._v(" 生成 Go 二进制文件")]),e._v(" "),t("li",[t("code",[e._v("make gotool")]),e._v("：执行 "),t("code",[e._v("gofmt -w .")]),e._v(" 和 "),t("code",[e._v("go tool vet .")]),e._v("（格式化代码和源码静态检查）")]),e._v(" "),t("li",[t("code",[e._v("make clean")]),e._v("：做一些清理工作：删除二进制文件、删除 vim swp 文件")]),e._v(" "),t("li",[t("code",[e._v("make ca")]),e._v("：生成证书")]),e._v(" "),t("li",[t("code",[e._v("make help")]),e._v("：打印 help 信息")])]),e._v(" "),t("h2",{attrs:{id:"编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[e._v("#")]),e._v(" 编译")]),e._v(" "),t("p",[e._v("在前面各小节中编译二进制均是通过 "),t("code",[e._v("go build -v .")]),e._v(" 的方式，添加 Makefile 后可以通过如下方式来编译：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ make\n")])])]),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),t("p",[e._v("本小节简单介绍了 Makefile，并介绍了 apiserver 所使用的 Makefile 文件，通过该小节，展示了如何通过 Makefile 来管理和编译 API 源码。")]),e._v(" "),t("p",[e._v("本小册不是专门介绍 Makefile 的，想要了解更多 Makefile 知识，请参考 "),t("a",{attrs:{href:"https://www.cnblogs.com/wang_yb/p/3990952.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Makefile使用总结"),t("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);a.default=r.exports}}]);