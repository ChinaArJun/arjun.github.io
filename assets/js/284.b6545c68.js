(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{721:function(e,r,t){"use strict";t.r(r);var o=t(44),a=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"api-性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api-性能分析"}},[e._v("#")]),e._v(" API 性能分析")]),e._v(" "),t("p",[e._v("作为开发，我们一般都局限在功能上的单元测试，对一些性能上的细节我们往往没有去关注，如果我们在上线的时候对项目整体性能没有一个全面的了解的话，当流量越来越大时，可能会出现各种各样的问题，比如 CPU 占用高、内存使用率高等。为了避免这些性能瓶颈，我们在开发的过程中需要通过一定的手段来对程序进行性能分析。")]),e._v(" "),t("p",[e._v("Go 语言已经为开发者内置配套了很多性能调优监控的好工具和方法，这大大提升了我们 profile 分析的效率，借助这些工具我们可以很方便地来对 Go 程序进行性能分析。在 Go 语言开发中，通常借助于内置的 pprof 工具包来进行性能分析。")]),e._v(" "),t("h2",{attrs:{id:"本节核心内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本节核心内容"}},[e._v("#")]),e._v(" 本节核心内容")]),e._v(" "),t("ul",[t("li",[e._v("如何用 pprof 工具对 API 程序进行性能分析")])]),e._v(" "),t("blockquote",[t("p",[e._v("本小节源码下载路径："),t("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo16",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo16"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("可先下载源码到本地，结合源码理解后续内容，边学边练。")]),e._v(" "),t("p",[e._v("本小节的代码是基于 "),t("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo15",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo15"),t("OutboundLink")],1),e._v(" 来开发的。")])]),e._v(" "),t("h2",{attrs:{id:"pprof-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pprof-是什么"}},[e._v("#")]),e._v(" pprof 是什么")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/google/pprof",target:"_blank",rel:"noopener noreferrer"}},[e._v("PProf"),t("OutboundLink")],1),e._v(" 是一个 Go 程序性能分析工具，可以分析 CPU、内存等性能。Go 在语言层面上集成了 profile 采样工具，只需在代码中简单地引入 "),t("code",[e._v("runtime/ppro")]),e._v(" 或者 "),t("code",[e._v("net/http/pprof")]),e._v(" 包即可获取程序的 profile 文件，并通过该文件来进行性能分析。")]),e._v(" "),t("blockquote",[t("p",[e._v("runtime/pprof 还可以为控制台程序或者测试程序产生 pprof 数据。")]),e._v(" "),t("p",[e._v("其实 net/http/pprof 中只是使用 runtime/pprof 包来进行封装了一下，并在 HTTP 端口上暴露出来。")])]),e._v(" "),t("h2",{attrs:{id:"使用-pprof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-pprof"}},[e._v("#")]),e._v(" 使用 pprof")]),e._v(" "),t("p",[e._v("在 "),t("code",[e._v("gin")]),e._v(" 中使用 pprof 功能，需要用到 "),t("code",[e._v("github.com/gin-contrib/pprof")]),e._v(" middleware，使用时只需要调用 "),t("code",[e._v("pprof.Register()")]),e._v(" 函数即可。本例中，通过在"),t("code",[e._v("router/router.go")]),e._v("中添加如下代码来实现（详见 "),t("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo16/router/router.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo16/router/router.go"),t("OutboundLink")],1),e._v("）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('package router\n\nimport (\n\t"github.com/gin-contrib/pprof"\n\t....\n)\n\n// Load loads the middlewares, routes, handlers.\nfunc Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {\n\t// pprof router\n\tpprof.Register(g)\n\t....\n}\n')])])]),t("h2",{attrs:{id:"编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[e._v("#")]),e._v(" 编译")]),e._v(" "),t("ol",[t("li",[e._v("下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ git clone https://github.com/lexkong/apiserver_demos\n")])])]),t("ol",[t("li",[e._v("将 "),t("code",[e._v("apiserver_demos/demo16")]),e._v(" 复制为 "),t("code",[e._v("$GOPATH/src/apiserver")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ cp -a apiserver_demos/demo16/ $GOPATH/src/apiserver\n")])])]),t("ol",[t("li",[e._v("在 apiserver 目录下编译源码")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ cd $GOPATH/src/apiserver\n$ make\n")])])]),t("h2",{attrs:{id:"获取-profile-采集信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取-profile-采集信息"}},[e._v("#")]),e._v(" 获取 profile 采集信息")]),e._v(" "),t("p",[e._v("通过 "),t("code",[e._v("go tool pprof http://127.0.0.1:8080/debug/pprof/profile")]),e._v("，可以获取 profile 采集信息并分析。")]),e._v(" "),t("p",[e._v("也可以直接在浏览器访问 "),t("code",[e._v("http://localhost:8080/debug/pprof")]),e._v(" 来查看当前 API 服务的状态，包括 CPU 占用情况和内存使用情况等。")]),e._v(" "),t("blockquote",[t("p",[e._v("执行命令后，需要等待 30s，pprof 会进行采样。")])]),e._v(" "),t("h2",{attrs:{id:"性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[e._v("#")]),e._v(" 性能分析")]),e._v(" "),t("p",[e._v("在上一小节我们介绍函数性能测试时已经介绍过性能分析的一部分知识，为了使内容完整，我们这里再次介绍下相关知识。")]),e._v(" "),t("p",[e._v("通过上一部分我们已经获取到了程序的 profile 信息，并且进入到了 pprof 的交互界面，在交互界面执行 topN 可以获取采样信息。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116115729812.png",alt:"image-20200116115729812"}})]),e._v(" "),t("p",[e._v("通过 topN 的输出可以分析出哪些函数占用 CPU 时间片最多，这些函数可能存在性能问题。性能分析详细防范请参考：")]),e._v(" "),t("p",[e._v("如果觉得不直观，可以直接生成函数调用图，通过调用图来判断哪些函数耗时最久，在 pprof 交互界面，执行 "),t("code",[e._v("svg")]),e._v(" 生成 svg 文件。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121027733.png",alt:"image-20200116121027733"}})]),e._v(" "),t("p",[e._v("用浏览器打开 profile001.svg：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121036372.png",alt:"image-20200116121036372"}})]),e._v(" "),t("p",[e._v("框框最大的函数耗时比较久，说明函数可能存在性能问题。")]),e._v(" "),t("blockquote",[t("p",[e._v("确保系统已经安装 "),t("code",[e._v("graphviz")]),e._v(" 命令。")])]),e._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),t("p",[e._v("本节展示了如何对 API 服务进行性能分析，这里只是介绍了如何添加性能分析入口和基本的流程。")])])}),[],!1,null,null,null);r.default=a.exports}}]);