(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{723:function(e,r,a){"use strict";a.r(r);var t=a(44),s=Object(t.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"生成-swagger-在线文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成-swagger-在线文档"}},[e._v("#")]),e._v(" 生成 Swagger 在线文档")]),e._v(" "),a("h2",{attrs:{id:"本节核心内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节核心内容"}},[e._v("#")]),e._v(" 本节核心内容")]),e._v(" "),a("ul",[a("li",[e._v("如何给 API 添加 Swagger 文档功能")]),e._v(" "),a("li",[e._v("如何编写 API 文档")])]),e._v(" "),a("blockquote",[a("p",[e._v("本小节源码下载路径："),a("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo17"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("可先下载源码到本地，结合源码理解后续内容，边学边练。")]),e._v(" "),a("p",[e._v("本小节的代码是基于 "),a("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo16",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo16"),a("OutboundLink")],1),e._v(" 来开发的。")])]),e._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),a("p",[e._v("开发 API 服务，API 文档必不可少，很多人选择手写 API 文档，手写 API 文档有很多问题，比如工作量大、手写容易出错、更新麻烦、格式不固定、维护困难等。所以在实际的开发中，建议自动生成 API 文档。")]),e._v(" "),a("p",[e._v("本小册所用的 API 服务器 RESTful 框架采用的是 "),a("code",[e._v("gin")]),e._v("，"),a("code",[e._v("gin")]),e._v(" 在 GitHub 上有很多 middleware 可用，其中就有可以自动生成 Swagger 文档的 "),a("code",[e._v("gin-swagger")]),e._v(" middleware。")]),e._v(" "),a("h1",{attrs:{id:"swagger-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swagger-简介"}},[e._v("#")]),e._v(" Swagger 简介")]),e._v(" "),a("p",[e._v("Swagger 是一个强大的 API 文档构建工具，可以自动为 RESTful API 生成 Swagger 格式的文档，可以在浏览器中查看 API 文档，也可以通过调用接口来返回 API 文档（JSON 格式）。Swagger 通常会展示如下信息：")]),e._v(" "),a("ol",[a("li",[e._v("HTTP 方法（GET、POST、PUT、DELETE 等）")]),e._v(" "),a("li",[e._v("URL 路径")]),e._v(" "),a("li",[e._v("HTTP 消息体（消息体中的参数名和类型）")]),e._v(" "),a("li",[e._v("参数位置")]),e._v(" "),a("li",[e._v("参数是否必选")]),e._v(" "),a("li",[e._v("返回的参数（参数名和类型）")]),e._v(" "),a("li",[e._v("请求和返回的媒体类型")])]),e._v(" "),a("p",[e._v("Swagger 还有一个强大的功能：可以通过 API 文档描述的参数来构建请求，测试 API。")]),e._v(" "),a("p",[e._v("浏览器访问截图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121137101.png",alt:"image-20200116121137101"}})]),e._v(" "),a("p",[e._v("JSON 返回截图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121145349.png",alt:"image-20200116121145349"}})]),e._v(" "),a("h2",{attrs:{id:"swagger-配置步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swagger-配置步骤"}},[e._v("#")]),e._v(" Swagger 配置步骤")]),e._v(" "),a("p",[e._v("我们用 "),a("a",{attrs:{href:"https://github.com/swaggo/gin-swagger",target:"_blank",rel:"noopener noreferrer"}},[e._v("gin-swagger"),a("OutboundLink")],1),e._v(" gin middleware来生成 Swagger API 文档。步骤如下：")]),e._v(" "),a("ol",[a("li",[e._v("安装 "),a("code",[e._v("swag")]),e._v(" 命令")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ mkdir -p $GOPATH/src/github.com/swaggo\n$ cd $GOPATH/src/github.com/swaggo\n$ git clone https://github.com/swaggo/swag\n$ cd swag/cmd/swag/\n$ go install -v\n")])])]),a("blockquote",[a("p",[e._v("因为该包引用 "),a("code",[e._v("golang.org")]),e._v(" 中的包，而网络环境原因，一般很难连上 "),a("code",[e._v("golang.org")]),e._v("，所以这里不采用 "),a("code",[e._v("go get")]),e._v(" 方式安装。")]),e._v(" "),a("p",[e._v("swag 的依赖包已经包含在第 4 节的 vendor 包下。")])]),e._v(" "),a("ol",[a("li",[e._v("进入 apiserver 根目录执行 "),a("code",[e._v("swag init")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd $GOPATH/src/apiserver\n$ swag init\n")])])]),a("ol",[a("li",[e._v("下载 "),a("code",[e._v("gin-swagger")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd $GOPATH/src/github.com/swaggo\n$ git clone https://github.com/swaggo/gin-swagger\n")])])]),a("ol",[a("li",[a("p",[e._v("在 "),a("code",[e._v("router/router.go")]),e._v(" 中添加 swagger 路由（详见 "),a("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/blob/master/demo17/router/router.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo17/router/router.go"),a("OutboundLink")],1),e._v("）")]),e._v(" "),a("p",[a("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121158234.png",alt:"image-20200116121158234"}})])]),e._v(" "),a("li",[a("p",[e._v("编写 API 注释，Swagger 中需要将相应的注释或注解编写到方法上，再利用生成器自动生成说明文件")])])]),e._v(" "),a("p",[e._v("这里用创建用户 API 来举例，其它 API 请参考 "),a("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17/handler/user",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo17/handler/user"),a("OutboundLink")],1),e._v(" 下的 API 文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package user\n\nimport (\n    ...\n)\n\n\n// @Summary Add new user to the database\n// @Description Add a new user\n// @Tags user\n// @Accept  json\n// @Produce  json\n// @Param user body user.CreateRequest true "Create a new user"\n// @Success 200 {object} user.CreateResponse "{"code":0,"message":"OK","data":{"username":"kong"}}"\n// @Router /user [post]\nfunc Create(c *gin.Context) {\n    ...\n}\n')])])]),a("ol",[a("li",[e._v("执行 "),a("code",[e._v("swag init")]),e._v("，在 apiserver 根目录下生成 "),a("code",[e._v("docs")]),e._v(" 目录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ swag init\n")])])]),a("p",[a("strong",[e._v("文档语法说明")])]),e._v(" "),a("ul",[a("li",[e._v("Summary：简单阐述 API 的功能")]),e._v(" "),a("li",[e._v("Description：API 详细描述")]),e._v(" "),a("li",[e._v("Tags：API 所属分类")]),e._v(" "),a("li",[e._v("Accept：API 接收参数的格式")]),e._v(" "),a("li",[e._v("Produce：输出的数据格式，这里是 JSON 格式")]),e._v(" "),a("li",[e._v("Param：参数，分为 6 个字段，其中第 6 个字段是可选的，各字段含义为：\n"),a("ol",[a("li",[e._v("参数名称")]),e._v(" "),a("li",[e._v("参数在 HTTP 请求中的位置（body、path、query）")]),e._v(" "),a("li",[e._v("参数类型（string、int、bool 等）")]),e._v(" "),a("li",[e._v("是否必须（true、false）")]),e._v(" "),a("li",[e._v("参数描述")]),e._v(" "),a("li",[e._v("选项，这里用的是 "),a("code",[e._v("default()")]),e._v(" 用来指定默认值")])])]),e._v(" "),a("li",[e._v("Success：成功返回数据格式，分为 4 个字段\n"),a("ol",[a("li",[e._v("HTTP 返回 Code")]),e._v(" "),a("li",[e._v("返回数据类型")]),e._v(" "),a("li",[e._v("返回数据模型")]),e._v(" "),a("li",[e._v("说明")])])]),e._v(" "),a("li",[e._v("路由格式，分为 2 个字段：\n"),a("ol",[a("li",[e._v("API 路径")]),e._v(" "),a("li",[e._v("HTTP 方法")])])])]),e._v(" "),a("blockquote",[a("p",[e._v("API 文档编写规则请参考 "),a("a",{attrs:{href:"https://swaggo.github.io/swaggo.io/declarative_comments_format/",target:"_blank",rel:"noopener noreferrer"}},[e._v("See Declarative Comments Format"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("API 文档有更新时，要重新执行 "),a("code",[e._v("swag init")]),e._v(" 并重新编译 apiserver。")])]),e._v(" "),a("h2",{attrs:{id:"编译并运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译并运行"}},[e._v("#")]),e._v(" 编译并运行")]),e._v(" "),a("ol",[a("li",[e._v("下载 apiserver_demos 源码包（如前面已经下载过，请忽略此步骤）")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git clone https://github.com/lexkong/apiserver_demos\n")])])]),a("ol",[a("li",[e._v("将 "),a("code",[e._v("apiserver_demos/demo17")]),e._v(" 复制为 "),a("code",[e._v("$GOPATH/src/apiserver")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cp -a apiserver_demos/demo17/ $GOPATH/src/apiserver\n")])])]),a("ol",[a("li",[e._v("在 apiserver 目录下编译源码")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd $GOPATH/src/apiserver\n$ make\n")])])]),a("p",[e._v("执行 "),a("code",[e._v("./apiserver")]),e._v(" 启动 apiserver 后，在浏览器中打开： "),a("code",[e._v("http://localhost:8080/swagger/index.html")]),e._v(" 访问 Swagger 2.0 API文档。")]),e._v(" "),a("p",[e._v("API 总览：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121210738.png",alt:"image-20200116121210738"}})]),e._v(" "),a("p",[e._v("点击 "),a("code",[e._v("/login")]),e._v("，查看 login API 详情：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/Users/arjun/AJ%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E7%9B%B8%E5%85%B3/myblog/go-project/restfulGo/assets/image-20200116121218942.png",alt:"image-20200116121218942"}})]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("本小节介绍了如何生成 Swagger 文档，并演示了具体的效果。本小节也是动手操作的最后一个小节，至此恭喜你成功构建了一个企业级的 API 服务器，"),a("a",{attrs:{href:"https://github.com/lexkong/apiserver_demos/tree/master/demo17",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo17"),a("OutboundLink")],1),e._v(" 即为此 API 服务器的最终源码。")])])}),[],!1,null,null,null);r.default=s.exports}}]);