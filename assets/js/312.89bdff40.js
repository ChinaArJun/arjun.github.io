(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{750:function(t,n,a){"use strict";a.r(n);var s=a(44),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Channel 和 goroutine 的结合是 Go 并发编程的大杀器。而 Channel 的实际应用也经常让人眼前一亮，通过与 select，cancel，timer 等结合，它能实现各种各样的功能。接下来，我们就要梳理一下 channel 的应用。")]),t._v(" "),a("h1",{attrs:{id:"停止信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止信号"}},[t._v("#")]),t._v(" 停止信号")]),t._v(" "),a("p",[t._v("“如何优雅地关闭 channel”那一节已经讲得很多了，这块就略过了。")]),t._v(" "),a("p",[t._v("channel 用于停止信号的场景还是挺多的，经常是关闭某个 channel 或者向 channel 发送一个元素，使得接收 channel 的那一方获知道此信息，进而做一些其他的操作。")]),t._v(" "),a("h1",{attrs:{id:"任务定时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务定时"}},[t._v("#")]),t._v(" 任务定时")]),t._v(" "),a("p",[t._v("与 timer 结合，一般有两种玩法：实现超时控制，实现定期执行某个任务。")]),t._v(" "),a("p",[t._v("有时候，需要执行某项操作，但又不想它耗费太长时间，上一个定时器就可以搞定：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("select {\n\tcase <-time.After(100 * time.Millisecond):\n\tcase <-s.stopc:\n\t\treturn false\n}\n")])])]),a("p",[t._v("等待 100 ms 后，如果 s.stopc 还没有读出数据或者被关闭，就直接结束。这是来自 etcd 源码里的一个例子，这样的写法随处可见。")]),t._v(" "),a("p",[t._v("定时执行某个任务，也比较简单：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func worker() {\n\tticker := time.Tick(1 * time.Second)\n\tfor {\n\t\tselect {\n\t\tcase <- ticker:\n\t\t\t// 执行定时任务\n\t\t\tfmt.Println("执行 1s 定时任务")\n\t\t}\n\t}\n}\n')])])]),a("p",[t._v("每隔 1 秒种，执行一次定时任务。")]),t._v(" "),a("h1",{attrs:{id:"解耦生产方和消费方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解耦生产方和消费方"}},[t._v("#")]),t._v(" 解耦生产方和消费方")]),t._v(" "),a("p",[t._v("服务启动时，启动 n 个 worker，作为工作协程池，这些协程工作在一个 "),a("code",[t._v("for {}")]),t._v(" 无限循环里，从某个 channel 消费工作任务并执行：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func main() {\n\ttaskCh := make(chan int, 100)\n\tgo worker(taskCh)\n\n    // 塞任务\n\tfor i := 0; i < 10; i++ {\n\t\ttaskCh <- i\n\t}\n\n    // 等待 1 小时 \n\tselect {\n\tcase <-time.After(time.Hour):\n\t}\n}\n\nfunc worker(taskCh <-chan int) {\n\tconst N = 5\n\t// 启动 5 个工作协程\n\tfor i := 0; i < N; i++ {\n\t\tgo func(id int) {\n\t\t\tfor {\n\t\t\t\ttask := <- taskCh\n\t\t\t\tfmt.Printf("finish task: %d by worker %d\\n", task, id)\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t}\n\t\t}(i)\n\t}\n}\n')])])]),a("p",[t._v("5 个工作协程在不断地从工作队列里取任务，生产方只管往 channel 发送任务即可，解耦生产方和消费方。")]),t._v(" "),a("p",[t._v("程序输出：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("finish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nfinish task: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" by worker "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("h1",{attrs:{id:"控制并发数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制并发数"}},[t._v("#")]),t._v(" 控制并发数")]),t._v(" "),a("p",[t._v("有时需要定时执行几百个任务，例如每天定时按城市来执行一些离线计算的任务。但是并发数又不能太高，因为任务执行过程依赖第三方的一些资源，对请求的速率有限制。这时就可以通过 channel 来控制并发数。")]),t._v(" "),a("p",[t._v("下面的例子来自《Go 语言高级编程》：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var limit = make(chan int, 3)\n\nfunc main() {\n    // …………\n    for _, w := range work {\n        go func() {\n            limit <- 1\n            w()\n            <-limit\n        }()\n    }\n    // …………\n}\n")])])]),a("p",[t._v("构建一个缓冲型的 channel，容量为 3。接着遍历任务列表，每个任务启动一个 goroutine 去完成。真正执行任务，访问第三方的动作在 w() 中完成，在执行 w() 之前，先要从 limit 中拿“许可证”，拿到许可证之后，才能执行 w()，并且在执行完任务，要将“许可证”归还。这样就可以控制同时运行的 goroutine 数。")]),t._v(" "),a("p",[t._v("这里，"),a("code",[t._v("limit <- 1")]),t._v(" 放在 func 内部而不是外部，原因是：")]),t._v(" "),a("blockquote",[a("p",[t._v("如果在外层，就是控制系统 goroutine 的数量，可能会阻塞 for 循环，影响业务逻辑。")])]),t._v(" "),a("blockquote",[a("p",[t._v("limit 其实和逻辑无关，只是性能调优，放在内层和外层的语义不太一样。")])]),t._v(" "),a("p",[t._v("还有一点要注意的是，如果 w() 发生 panic，那“许可证”可能就还不回去了，因此需要使用 defer 来保证。")]),t._v(" "),a("h1",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[t._v("【channel 应用】https://www.s0nnet.com/archives/go-channels-practice")]),t._v(" "),a("p",[t._v("【应用举例】https://zhuyasen.com/post/go_queue.html")]),t._v(" "),a("p",[t._v("【应用】https://tonybai.com/2014/09/29/a-channel-compendium-for-golang/")]),t._v(" "),a("p",[t._v("【Go 语言高级并发编程】https://chai2010.cn/advanced-go-programming-book/")])])}),[],!1,null,null,null);n.default=e.exports}}]);