(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{763:function(e,r,t){"use strict";t.r(r);var o=t(44),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("谈到 goroutine，绕不开的一个话题是：它和 thread 有什么区别？")]),e._v(" "),t("p",[e._v("参考资料【How Goroutines Work】告诉我们可以从三个角度区别：内存消耗、创建与销毀、切换。")]),e._v(" "),t("ul",[t("li",[e._v("内存占用")])]),e._v(" "),t("p",[e._v("创建一个 goroutine 的栈内存消耗为 2 KB，实际运行过程中，如果栈空间不够用，会自动进行扩容。创建一个 thread 则需要消耗 1 MB 栈内存，而且还需要一个被称为 “a guard page” 的区域用于和其他 thread 的栈空间进行隔离。")]),e._v(" "),t("p",[e._v("对于一个用 Go 构建的 HTTP Server 而言，对到来的每个请求，创建一个 goroutine 用来处理是非常轻松的一件事。而如果用一个使用线程作为并发原语的语言构建的服务，例如 Java 来说，每个请求对应一个线程则太浪费资源了，很快就会出 OOM 错误（OutOfMermoryError）。")]),e._v(" "),t("ul",[t("li",[e._v("创建和销毀")])]),e._v(" "),t("p",[e._v("Thread 创建和销毀都会有巨大的消耗，因为要和操作系统打交道，是内核级的，通常解决的办法就是线程池。而 goroutine 因为是由 Go runtime 负责管理的，创建和销毁的消耗非常小，是用户级。")]),e._v(" "),t("ul",[t("li",[e._v("切换")])]),e._v(" "),t("p",[e._v("当 threads 切换时，需要保存各种寄存器，以便将来恢复：")]),e._v(" "),t("blockquote",[t("p",[e._v("16 general purpose registers, PC (Program Counter), SP (Stack Pointer), segment registers, 16 XMM registers, FP coprocessor state, 16 AVX registers, all MSRs etc.")])]),e._v(" "),t("p",[e._v("而 goroutines 切换只需保存三个寄存器：Program Counter, Stack Pointer and BP。")]),e._v(" "),t("p",[e._v("一般而言，线程切换会消耗 1000-1500 纳秒，一个纳秒平均可以执行 12-18 条指令。所以由于线程切换，执行指令的条数会减少 12000-18000。")]),e._v(" "),t("p",[e._v("Goroutine 的切换约为 200 ns，相当于 2400-3600 条指令。")]),e._v(" "),t("p",[e._v("因此，goroutines 切换成本比 threads 要小得多。")])])}),[],!1,null,null,null);r.default=n.exports}}]);