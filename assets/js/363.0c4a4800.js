(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{801:function(s,a,e){"use strict";e.r(a);var t=e(44),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("一般都是在向 slice 追加了元素之后，才会引起扩容。追加元素调用的是 "),e("code",[s._v("append")]),s._v(" 函数。")]),s._v(" "),e("p",[s._v("先来看看 "),e("code",[s._v("append")]),s._v(" 函数的原型：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("func append(slice []Type, elems ...Type) []Type\n")])])]),e("p",[s._v("append 函数的参数长度可变，因此可以追加多个值到 slice 中，还可以用 "),e("code",[s._v("...")]),s._v(" 传入 slice，直接追加一个切片。")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("slice = append(slice, elem1, elem2)\nslice = append(slice, anotherSlice...)\n")])])]),e("p",[e("code",[s._v("append")]),s._v("函数返回值是一个新的slice，Go编译器不允许调用了 append 函数后不使用返回值。")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("append(slice, elem1, elem2)\nappend(slice, anotherSlice...)\n")])])]),e("p",[s._v("所以上面的用法是错的，不能编译通过。")]),s._v(" "),e("p",[s._v("使用 append 可以向 slice 追加元素，实际上是往底层数组添加元素。但是底层数组的长度是固定的，如果索引 "),e("code",[s._v("len-1")]),s._v(" 所指向的元素已经是底层数组的最后一个元素，就没法再添加了。")]),s._v(" "),e("p",[s._v("这时，slice 会迁移到新的内存位置，新底层数组的长度也会增加，这样就可以放置新增的元素。同时，为了应对未来可能再次发生的 append 操作，新的底层数组的长度，也就是新 "),e("code",[s._v("slice")]),s._v(" 的容量是留了一定的 "),e("code",[s._v("buffer")]),s._v(" 的。否则，每次添加元素的时候，都会发生迁移，成本太高。")]),s._v(" "),e("p",[s._v("新 slice 预留的 "),e("code",[s._v("buffer")]),s._v(" 大小是有一定规律的。网上大多数的文章都是这样描述的：")]),s._v(" "),e("blockquote",[e("p",[s._v("当原 slice 容量小于 "),e("code",[s._v("1024")]),s._v(" 的时候，新 slice 容量变成原来的 "),e("code",[s._v("2")]),s._v(" 倍；原 slice 容量超过 "),e("code",[s._v("1024")]),s._v("，新 slice 容量变成原来的"),e("code",[s._v("1.25")]),s._v("倍。")])]),s._v(" "),e("p",[s._v("我在这里先说结论：以上描述是错误的。")]),s._v(" "),e("p",[s._v("为了说明上面的规律是错误的，我写了一小段玩具代码：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('package main\n\nimport "fmt"\n\nfunc main() {\n\ts := make([]int, 0)\n\n\toldCap := cap(s)\n\n\tfor i := 0; i < 2048; i++ {\n\t\ts = append(s, i)\n\n\t\tnewCap := cap(s)\n\n\t\tif newCap != oldCap {\n\t\t\tfmt.Printf("[%d -> %4d] cap = %-4d  |  after append %-4d  cap = %-4d\\n", 0, i-1, oldCap, i, newCap)\n\t\t\toldCap = newCap\n\t\t}\n\t}\n}\n')])])]),e("p",[s._v("我先创建了一个空的 "),e("code",[s._v("slice")]),s._v("，然后，在一个循环里不断往里面 "),e("code",[s._v("append")]),s._v(" 新的元素。然后记录容量的变化，并且每当容量发生变化的时候，记录下老的容量，以及添加完元素之后的容量，同时记下此时 "),e("code",[s._v("slice")]),s._v(" 里的元素。这样，我就可以观察，新老 "),e("code",[s._v("slice")]),s._v(" 的容量变化情况，从而找出规律。")]),s._v(" "),e("p",[s._v("运行结果：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   -1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("   \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("   \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("     cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("   \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("     cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("  \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("    cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("  \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("    cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("  \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("63")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("    cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("   cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),s._v("   cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("511")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),s._v("   cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1023")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("  cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1280")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1279")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1280")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1280")]),s._v("  cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1696")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1695")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1696")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  after append "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1696")]),s._v("  cap "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2304")]),s._v("\n")])])]),e("p",[s._v("在老 slice 容量小于1024的时候，新 slice 的容量的确是老 slice 的2倍。目前还算正确。")]),s._v(" "),e("p",[s._v("但是，当老 slice 容量大于等于 "),e("code",[s._v("1024")]),s._v(" 的时候，情况就有变化了。当向 slice 中添加元素 "),e("code",[s._v("1280")]),s._v(" 的时候，老 slice 的容量为 "),e("code",[s._v("1280")]),s._v("，之后变成了 "),e("code",[s._v("1696")]),s._v("，两者并不是 "),e("code",[s._v("1.25")]),s._v(" 倍的关系（1696/1280=1.325）。添加完 "),e("code",[s._v("1696")]),s._v(" 后，新的容量 "),e("code",[s._v("2304")]),s._v(" 当然也不是 "),e("code",[s._v("1696")]),s._v(" 的 "),e("code",[s._v("1.25")]),s._v(" 倍。")]),s._v(" "),e("p",[s._v("可见，现在网上各种文章中的扩容策略并不正确。我们直接搬出源码：源码面前，了无秘密。")]),s._v(" "),e("p",[s._v("从前面汇编代码我们也看到了，向 slice 追加元素的时候，若容量不够，会调用 "),e("code",[s._v("growslice")]),s._v(" 函数，所以我们直接看它的代码。")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// go 1.9.5 src/runtime/slice.go:82\nfunc growslice(et *_type, old slice, cap int) slice {\n    // ……\n    newcap := old.cap\n\tdoublecap := newcap + newcap\n\tif cap > doublecap {\n\t\tnewcap = cap\n\t} else {\n\t\tif old.len < 1024 {\n\t\t\tnewcap = doublecap\n\t\t} else {\n\t\t\tfor newcap < cap {\n\t\t\t\tnewcap += newcap / 4\n\t\t\t}\n\t\t}\n\t}\n\t// ……\n\t\n\tcapmem = roundupsize(uintptr(newcap) * ptrSize)\n\tnewcap = int(capmem / ptrSize)\n}\n")])])]),e("p",[s._v("看到了吗？如果只看前半部分，现在网上各种文章里说的 "),e("code",[s._v("newcap")]),s._v(" 的规律是对的。现实是，后半部分还对 "),e("code",[s._v("newcap")]),s._v(" 作了一个"),e("code",[s._v("内存对齐")]),s._v("，这个和内存分配策略相关。进行内存对齐之后，新 slice 的容量是要 "),e("code",[s._v("大于等于")]),s._v(" 老 slice 容量的 "),e("code",[s._v("2倍")]),s._v("或者"),e("code",[s._v("1.25倍")]),s._v("。")]),s._v(" "),e("p",[s._v("之后，向 Go 内存管理器申请内存，将老 slice 中的数据复制过去，并且将 append 的元素添加到新的底层数组中。")]),s._v(" "),e("p",[s._v("最后，向 "),e("code",[s._v("growslice")]),s._v(" 函数调用者返回一个新的 slice，这个 slice 的长度并没有变化，而容量却增大了。")]),s._v(" "),e("p",[s._v("【引申1】")]),s._v(" "),e("p",[s._v("来看一个例子，来源于"),e("a",{attrs:{href:"https://jiajunhuang.com/articles/2017_07_18-golang_slice.md.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),e("OutboundLink")],1)]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('package main\n\nimport "fmt"\n\nfunc main() {\n    s := []int{5}\n    s = append(s, 7)\n    s = append(s, 9)\n    x := append(s, 11)\n    y := append(s, 12)\n    fmt.Println(s, x, y)\n}\n')])])]),e("table",[e("thead",[e("tr",[e("th",[s._v("代码")]),s._v(" "),e("th",[s._v("切片对应状态")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("s := []int{5}")]),s._v(" "),e("td",[s._v("s 只有一个元素，"),e("code",[s._v("[5]")])])]),s._v(" "),e("tr",[e("td",[s._v("s = append(s, 7)")]),s._v(" "),e("td",[s._v("s 扩容，容量变为2，"),e("code",[s._v("[5, 7]")])])]),s._v(" "),e("tr",[e("td",[s._v("s = append(s, 9)")]),s._v(" "),e("td",[s._v("s 扩容，容量变为4，"),e("code",[s._v("[5, 7, 9]")]),s._v("。注意，这时 s 长度是3，只有3个元素")])]),s._v(" "),e("tr",[e("td",[s._v("x := append(s, 11)")]),s._v(" "),e("td",[s._v("由于 s 的底层数组仍然有空间，因此并不会扩容。这样，底层数组就变成了 "),e("code",[s._v("[5, 7, 9, 11]")]),s._v("。注意，此时 s = "),e("code",[s._v("[5, 7, 9]")]),s._v("，容量为4；x = "),e("code",[s._v("[5, 7, 9, 11]")]),s._v("，容量为4。这里 s 不变")])]),s._v(" "),e("tr",[e("td",[s._v("y := append(s, 12)")]),s._v(" "),e("td",[s._v("这里还是在 s 元素的尾部追加元素，由于 s 的长度为3，容量为4，所以直接在底层数组索引为3的地方填上12。结果：s = "),e("code",[s._v("[5, 7, 9]")]),s._v("，y = "),e("code",[s._v("[5, 7, 9, 12]")]),s._v("，x = "),e("code",[s._v("[5, 7, 9, 12]")]),s._v("，x，y 的长度均为4，容量也均为4")])])])]),s._v(" "),e("p",[s._v("所以最后程序的执行结果是：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),e("p",[s._v("这里要注意的是，append函数执行完后，返回的是一个全新的 slice，并且对传入的 slice 并不影响。")]),s._v(" "),e("p",[s._v("【引申2】")]),s._v(" "),e("p",[s._v("关于 "),e("code",[s._v("append")]),s._v("，我们最后来看一个例子，来源于 "),e("a",{attrs:{href:"https://jodezer.github.io/2017/05/golangSlice%E7%9A%84%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99",target:"_blank",rel:"noopener noreferrer"}},[s._v("Golang Slice的扩容规则"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('package main\n\nimport "fmt"\n\nfunc main() {\n\ts := []int{1,2}\n\ts = append(s,4,5,6)\n\tfmt.Printf("len=%d, cap=%d",len(s),cap(s))\n}\n')])])]),e("p",[s._v("运行结果是：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("cap")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n")])])]),e("p",[s._v("如果按网上各种文章中总结的那样：小于原 slice 长度小于 1024 的时候，容量每次增加 1 倍。添加元素 4 的时候，容量变为4；添加元素 5 的时候不变；添加元素 6 的时候容量增加 1 倍，变成 8。")]),s._v(" "),e("p",[s._v("那上面代码的运行结果就是：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("len")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(", "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("cap")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n")])])]),e("p",[s._v("这是错误的！我们来仔细看看，为什么会这样，再次搬出代码：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// go 1.9.5 src/runtime/slice.go:82\nfunc growslice(et *_type, old slice, cap int) slice {\n    // ……\n    newcap := old.cap\n\tdoublecap := newcap + newcap\n\tif cap > doublecap {\n\t\tnewcap = cap\n\t} else {\n\t\t// ……\n\t}\n\t// ……\n\t\n\tcapmem = roundupsize(uintptr(newcap) * ptrSize)\n\tnewcap = int(capmem / ptrSize)\n}\n")])])]),e("p",[s._v("这个函数的参数依次是 "),e("code",[s._v("元素的类型，老的 slice，新 slice 最小求的容量")]),s._v("。")]),s._v(" "),e("p",[s._v("例子中 "),e("code",[s._v("s")]),s._v(" 原来只有 2 个元素，"),e("code",[s._v("len")]),s._v(" 和 "),e("code",[s._v("cap")]),s._v(" 都为 2，"),e("code",[s._v("append")]),s._v(" 了三个元素后，长度变为 5，容量最小要变成 5，即调用 "),e("code",[s._v("growslice")]),s._v(" 函数时，传入的第三个参数应该为 5。即 "),e("code",[s._v("cap=5")]),s._v("。而一方面，"),e("code",[s._v("doublecap")]),s._v(" 是原 "),e("code",[s._v("slice")]),s._v("容量的 2 倍，等于 4。满足第一个 "),e("code",[s._v("if")]),s._v(" 条件，所以 "),e("code",[s._v("newcap")]),s._v(" 变成了 5。")]),s._v(" "),e("p",[s._v("接着调用了 "),e("code",[s._v("roundupsize")]),s._v(" 函数，传入 40。（代码中ptrSize是指一个指针的大小，在64位机上是8）")]),s._v(" "),e("p",[s._v("我们再看内存对齐，搬出 "),e("code",[s._v("roundupsize")]),s._v(" 函数的代码：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// src/runtime/msize.go:13\nfunc roundupsize(size uintptr) uintptr {\n\tif size < _MaxSmallSize {\n\t\tif size <= smallSizeMax-8 {\n\t\t\treturn uintptr(class_to_size[size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]])\n\t\t} else {\n\t\t\t//……\n\t\t}\n\t}\n    //……\n}\n\nconst _MaxSmallSize = 32768\nconst smallSizeMax = 1024\nconst smallSizeDiv = 8\n")])])]),e("p",[s._v("很明显，我们最终将返回这个式子的结果：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class_to_size[size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]]\n")])])]),e("p",[s._v("这是 "),e("code",[s._v("Go")]),s._v(" 源码中有关内存分配的两个 "),e("code",[s._v("slice")]),s._v("。"),e("code",[s._v("class_to_size")]),s._v("通过 "),e("code",[s._v("spanClass")]),s._v("获取 "),e("code",[s._v("span")]),s._v("划分的 "),e("code",[s._v("object")]),s._v("大小。而 "),e("code",[s._v("size_to_class8")]),s._v(" 表示通过 "),e("code",[s._v("size")]),s._v(" 获取它的 "),e("code",[s._v("spanClass")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var size_to_class8 = [smallSizeMax/smallSizeDiv + 1]uint8{0, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31}\n\nvar class_to_size = [_NumSizeClasses]uint16{0, 8, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 352, 384, 416, 448, 480, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1792, 2048, 2304, 2688, 3072, 3200, 3456, 4096, 4864, 5376, 6144, 6528, 6784, 6912, 8192, 9472, 9728, 10240, 10880, 12288, 13568, 14336, 16384, 18432, 19072, 20480, 21760, 24576, 27264, 28672, 32768}\n")])])]),e("p",[s._v("我们传进去的 "),e("code",[s._v("size")]),s._v(" 等于 40。所以 "),e("code",[s._v("(size+smallSizeDiv-1)/smallSizeDiv = 5")]),s._v("；获取 "),e("code",[s._v("size_to_class8")]),s._v(" 数组中索引为 "),e("code",[s._v("5")]),s._v(" 的元素为 "),e("code",[s._v("4")]),s._v("；获取 "),e("code",[s._v("class_to_size")]),s._v(" 中索引为 "),e("code",[s._v("4")]),s._v(" 的元素为 "),e("code",[s._v("48")]),s._v("。")]),s._v(" "),e("p",[s._v("最终，新的 slice 的容量为 "),e("code",[s._v("6")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-golang extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("newcap = int(capmem / ptrSize) // 6\n")])])]),e("p",[s._v("至于，上面的两个"),e("code",[s._v("魔法数组")]),s._v("的由来，就不展开了。")]),s._v(" "),e("p",[s._v("【引申2】\n向一个nil的slice添加元素会发生什么？为什么？")]),s._v(" "),e("p",[s._v("其实 "),e("code",[s._v("nil slice")]),s._v(" 或者 "),e("code",[s._v("empty slice")]),s._v(" 都是可以通过调用 append 函数来获得底层数组的扩容。最终都是调用 "),e("code",[s._v("mallocgc")]),s._v(" 来向 Go 的内存管理器申请到一块内存，然后再赋给原来的"),e("code",[s._v("nil slice")]),s._v(" 或 "),e("code",[s._v("empty slice")]),s._v("，然后摇身一变，成为“真正”的 "),e("code",[s._v("slice")]),s._v(" 了。")])])}),[],!1,null,null,null);a.default=n.exports}}]);