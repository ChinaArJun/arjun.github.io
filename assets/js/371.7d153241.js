(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{810:function(t,n,a){"use strict";a.r(n);var e=a(44),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"获取-slice-长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取-slice-长度"}},[t._v("#")]),t._v(" 获取 slice 长度")]),t._v(" "),a("p",[t._v("通过前面关于 slice 的"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/MTZ0C9zYsNrb8wyIm2D8BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),a("OutboundLink")],1),t._v("，我们知道了 slice header 的结构体定义：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// runtime/slice.go\ntype slice struct {\n    array unsafe.Pointer // 元素指针\n    len   int // 长度 \n    cap   int // 容量\n}\n")])])]),a("p",[t._v("调用 make 函数新建一个 slice，底层调用的是 makeslice 函数，返回的是 slice 结构体：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func makeslice(et *_type, len, cap int) slice\n")])])]),a("p",[t._v("因此我们可以通过 unsafe.Pointer 和 uintptr 进行转换，得到 slice 的字段值。")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func main() {\n\ts := make([]int, 9, 20)\n\tvar Len = *(*int)(unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + uintptr(8)))\n\tfmt.Println(Len, len(s)) // 9 9\n\n\tvar Cap = *(*int)(unsafe.Pointer(uintptr(unsafe.Pointer(&s)) + uintptr(16)))\n\tfmt.Println(Cap, cap(s)) // 20 20\n}\n")])])]),a("p",[t._v("Len，cap 的转换流程如下：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Len: &s => pointer => uintptr => pointer => *int => int\nCap: &s => pointer => uintptr => pointer => *int => int\n")])])]),a("h1",{attrs:{id:"获取-map-长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取-map-长度"}},[t._v("#")]),t._v(" 获取 map 长度")]),t._v(" "),a("p",[t._v("再来看一下上篇文章我们讲到的 map：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type hmap struct {\n\tcount     int\n\tflags     uint8\n\tB         uint8\n\tnoverflow uint16\n\thash0     uint32\n\n\tbuckets    unsafe.Pointer\n\toldbuckets unsafe.Pointer\n\tnevacuate  uintptr\n\n\textra *mapextra\n}\n")])])]),a("p",[t._v("和 slice 不同的是，makemap 函数返回的是 hmap 的指针，注意是指针：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func makemap(t *maptype, hint int64, h *hmap, bucket unsafe.Pointer) *hmap\n")])])]),a("p",[t._v("我们依然能通过 unsafe.Pointer 和 uintptr 进行转换，得到 hamp 字段的值，只不过，现在 count 变成二级指针了：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func main() {\n\tmp := make(map[string]int)\n\tmp["qcrao"] = 100\n\tmp["stefno"] = 18\n\n\tcount := **(**int)(unsafe.Pointer(&mp))\n\tfmt.Println(count, len(mp)) // 2 2\n}\n')])])]),a("p",[t._v("count 的转换过程：")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("&mp => pointer => **int => int\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);