(window.webpackJsonp=window.webpackJsonp||[]).push([[461],{900:function(n,t,a){"use strict";a.r(t);var s=a(44),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("对于一个结构体，通过 offset 函数可以获取结构体成员的偏移量，进而获取成员的地址，读写该地址的内存，就可以达到改变成员值的目的。")]),n._v(" "),a("p",[n._v("这里有一个内存分配相关的事实：结构体会被分配一块连续的内存，结构体的地址也代表了第一个成员的地址。")]),n._v(" "),a("p",[n._v("我们来看一个例子：")]),n._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package main\n\nimport (\n\t"fmt"\n\t"unsafe"\n)\n\ntype Programmer struct {\n\tname string\n\tlanguage string\n}\n\nfunc main() {\n\tp := Programmer{"stefno", "go"}\n\tfmt.Println(p)\n\t\n\tname := (*string)(unsafe.Pointer(&p))\n\t*name = "qcrao"\n\n\tlang := (*string)(unsafe.Pointer(uintptr(unsafe.Pointer(&p)) + unsafe.Offsetof(p.language)))\n\t*lang = "Golang"\n\n\tfmt.Println(p)\n}\n')])])]),a("p",[n._v("运行代码，输出：")]),n._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("stefno go"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("qcrao Golang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),a("p",[n._v("name 是结构体的第一个成员，因此可以直接将 &p 解析成 *string。这一点，在前面获取 map 的 count 成员时，用的是同样的原理。")]),n._v(" "),a("p",[n._v("对于结构体的私有成员，现在有办法可以通过 unsafe.Pointer 改变它的值了。")]),n._v(" "),a("p",[n._v("我把 Programmer 结构体升级，多加一个字段：")]),n._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("type Programmer struct {\n\tname string\n\tage int\n\tlanguage string\n}\n")])])]),a("p",[n._v("并且放在其他包，这样在 main 函数中，它的三个字段都是私有成员变量，不能直接修改。但我通过 unsafe.Sizeof() 函数可以获取成员大小，进而计算出成员的地址，直接修改内存。")]),n._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func main() {\n\tp := Programmer{"stefno", 18, "go"}\n\tfmt.Println(p)\n\n\tlang := (*string)(unsafe.Pointer(uintptr(unsafe.Pointer(&p)) + unsafe.Sizeof(int(0)) + unsafe.Sizeof(string(""))))\n\t*lang = "Golang"\n\n\tfmt.Println(p)\n}\n')])])]),a("p",[n._v("输出：")]),n._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("stefno "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("18")]),n._v(" go"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("stefno "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("18")]),n._v(" Golang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);