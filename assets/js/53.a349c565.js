(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{491:function(t,e,a){"use strict";a.r(e);var s=a(44),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_3-fabric核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-fabric核心模块"}},[t._v("#")]),t._v(" 3.  Fabric核心模块")]),t._v(" "),a("p",[t._v("Fabric是一个由五个核心模块组成的程序组. 在fabric在成功编译完成之后, 一共会有五个核心模块, 如下:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("模块名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("peer")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("主节点模块, 负责存储区块链数据, 运行维护链码")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("orderer")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("交易打包, 排序模块")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("cryptogen")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("组织和证书生成模块")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("configtxgen")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("区块和交易生成模块")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("configtxlator")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("区块和交易解析模块")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("五个模块中"),a("code",[t._v("peer")]),t._v("和"),a("code",[t._v("orderer")]),t._v("属于系统模块, "),a("code",[t._v("cryptogen")]),t._v(", "),a("code",[t._v("configtxgen")]),t._v(", "),a("code",[t._v("configtxlator")]),t._v("属于工具模块。工具模块负责证书文件、区块链创始块、通道创始块等相关文件和证书的生成工作，但是工具模块不参与系统的运行。peer模块和 orderer 模块作为系统模块是Fabric的核心模块，启动之后会以守护进程的方式在系统后台长期运行。")]),t._v(" "),a("p",[t._v("Fabric的5个核心模块都是基于命令行的方式运行的，目前Fabric没有为这些模块提供相关的图形界面，因此想要熟练使用Fabric的这些核心模块，必须熟悉这些模块的命令选项。")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-cryptogen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-cryptogen"}},[t._v("#")]),t._v(" 3.1 cryptogen")]),t._v(" "),a("blockquote",[a("p",[a("font",{attrs:{color:"red"}},[t._v("cryptogen模块主要用来生成组织结构和账号相关的文件")]),t._v("，任何Fabric系统的开发通常都是从cryptogen模块开始的。在Fabric项目中，当系统设计完成之后第一项工作就是根据系统的设计来编写cryptogen的配置文件，然后通过这些配置文件生成相关的证书文件。")],1),t._v(" "),a("p",[t._v("cryptogen模块所使用的配置文件是整个Fabric项目的基石。下面我们将介绍cryptogen模块命令行选项及其使用方式。")])]),t._v(" "),a("h4",{attrs:{id:"cryptogen-模块命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cryptogen-模块命令"}},[t._v("#")]),t._v(" cryptogen 模块命令")]),t._v(" "),a("blockquote",[a("p",[t._v("cryptogen模块是通过命令行的方式运行的，一个cryptogen命令由命令行参数和配置文件两部分组成，通过执行命令"),a("code",[t._v("cryptogen --help")]),t._v("可以显示cryptogen模块的命令行选项，执行结果如下所示：")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ cryptogen --help\nusage: cryptogen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nUtility "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" generating Hyperledger Fabric key material\nFlags:\n  --help  Show context-sensitive "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("also try --help-long and --help-man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\nCommands:\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示帮助信息")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据配置文件生成证书信息。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("generate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示系统默认的cryptogen模块配置文件信息")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("showtemplate\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前模块版本号")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("version"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 扩展现有网络")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("extend "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h4",{attrs:{id:"cryptogen-模块配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cryptogen-模块配置文件"}},[t._v("#")]),t._v(" cryptogen 模块配置文件")]),t._v(" "),a("blockquote",[a("p",[t._v("cryptogen模块的配置文件用来描述需要生成的证书文件的特性，比如：有多少个组织有多少个节点，需要多少个账号等。这里我们通过一个cryptogen模块配置文件的具体例子来初步了解配置文件的结构，该例子是Fabric源代码中自带的示例 -  crypto-config.yaml:")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[t._v("这个配置文件的名字可以根据自己的意愿进行自定义, 即: xxx.yaml")])],1)]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("OrdererOrgs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 排序节点的组织定义")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Orderer\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的名称")]),t._v("\n \t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Domain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" example.com\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的根域名 ")]),t._v("\n \t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Specs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Hostname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" orderer\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的主机名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("PeerOrgs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# peer节点的组织定义")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Org1\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织1的名称\t1\t1")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Domain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" org1.example.com\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织1的根域名")]),t._v("\n \t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("EnableNodeOUs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否支持node.js")]),t._v("\n \t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t\n\t    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织1中的节点(peer)数目")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n \t    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织1中的用户数目")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Org2\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Domain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" org2.example.com\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("EnableNodeOUs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("上述模板文件定义了一个orderer节点，这个orderer节点的名字为orderer，orderer节点的根域名为example.com，主机名为orderer。模板文件同时定义了两个组织，两个组织的名字分别为org1 和 org2，其中组织 org1 包含了2个节点和1个用户，组织 org2 包含2个点和1个用户。")]),t._v(" "),a("p",[t._v("除了Fabric源码中提供的例子，还可以通过命令"),a("code",[t._v("cryptogen showtemplate")]),t._v("获取默认的模板文件，在实际项目中稍加修改这些默认的模板文件即可使用。")])]),t._v(" "),a("h4",{attrs:{id:"生成证书文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成证书文件"}},[t._v("#")]),t._v(" 生成证书文件")]),t._v(" "),a("blockquote",[a("p",[t._v("在任意目录下创建一个新的目录如: MyTestNetWork， 在该目录下左如下操作：")]),t._v(" "),a("ul",[a("li",[t._v("编写yaml配置文件 - crypto-config.yaml\n"),a("ul",[a("li",[t._v("一个排序节点： orader\n"),a("ul",[a("li",[t._v("根域名：itcast.com")])])]),t._v(" "),a("li",[t._v("两个组织： java， go\n"),a("ul",[a("li",[t._v("go\n"),a("ul",[a("li",[t._v("peer节点数： 3个")]),t._v(" "),a("li",[t._v("用户个数： 2个")]),t._v(" "),a("li",[t._v("根域名：go.itcast.com")])])]),t._v(" "),a("li",[t._v("java\n"),a("ul",[a("li",[t._v("peer节点数： 3个")]),t._v(" "),a("li",[t._v("用户个数： 2个")]),t._v(" "),a("li",[t._v("根域名: java.itcast.com")])])])])])])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据默认模板在对应目录下生成证书")]),t._v("\n$ cryptogen generate\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据指定的模板在指定目录下生成证书")]),t._v("\n$ cryptogen generate --config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("./crycrypto-config.yaml --output ./crypto-config\n\t--config: 指定配置文件\n\t--output: 指定证书文件的存储位置, 可以不指定。会在对应路径生成目录，默认名字为：crypto-config\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Fabric证书文件结构")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("orderer节点")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看TestNetWork目录")]),t._v("\nitcast@ubuntu:~/TestNetWork$ tree -L "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n├── crypto-config\n│   ├── ordererOrganizations\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点相关的证书文件")]),t._v("\n│   └── peerOrganizations\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织相关的证书文件(组织的节点数, 用户数等证书文件)")]),t._v("\n└── crypto-config.yaml\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置文件")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看排序节点的证书目录, 进入到 ordererOrganizations 子目录中")]),t._v("\nitcast@ubuntu:ordererOrganizations$ tree -L "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n└── itcast.com\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根域名为itcast.com的orderer节点的相关证书文件")]),t._v("\n    ├── ca\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CA服务器的签名文件")]),t._v("\n    │   ├── 94db924d3be00c5adda6ac3c3cb7a5f8b80868681c3dd04b58c2920cdf56fdc7_sk\n    │   └── ca.itcast.com-cert.pem\n    ├── msp\n    │   ├── admincerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer管理员的证书")]),t._v("\n    │   │   └── Admin@itcast.com-cert.pem\n    │   ├── cacerts\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer根域名服务器的签名证书")]),t._v("\n    │   │   └── ca.itcast.com-cert.pem\n    │   └── tlscacerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tls连接用的身份证书")]),t._v("\n    │       └── tlsca.itcast.com-cert.pem\n    ├── orderers\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点需要的相关的证书文件")]),t._v("\n    │   └── ubuntu.itcast.com\n    │       ├── msp\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点相关证书")]),t._v("\n    │       └── tls\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点和其他节点连接用的身份证书")]),t._v("\n    ├── tlsca\n    │   ├── de45aeb112ee820197f7d4d475f2edbeb1705d53a690f3537dd794b66de1d6ba_sk\n    │   └── tlsca.itcast.com-cert.pem\n    └── "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("users")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点用户相关的证书")]),t._v("\n        └── Admin@itcast.com\n            ├── msp\n            └── tls\n")])])]),a("blockquote",[a("p",[t._v("在实际开发中orderer节点这些证书其实不需要直接使用, 只是在orderer节点启动时指明项目的位置即可。")])])]),t._v(" "),a("li",[a("p",[t._v("Peer节点")]),t._v(" "),a("blockquote",[a("p",[t._v("进入到 peerOrganizations 子目录中,  我们详细介绍这些证书的种类和作用。由于每个组织的目录结构都是一样的， 所以我们只对其中一个组织的目录进行详细介绍。")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 peerOrganizations 子目录中内容")]),t._v("\nitcast@ubuntu:peerOrganizations$ tree -L "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n├── go.itcast.com\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# go组织")]),t._v("\n└── java.itcast.com\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# java组织")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入go.itcast.com 组织目录中")]),t._v("\nitcast@ubuntu:go.itcast.com$ tree -L "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n├── ca \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根节点签名证书")]),t._v("\n│   ├── 4a367bf9e43142846e7c851830f69f72483ecb7a6def7c782278a9808bbb5fb0_sk\n│   └── ca.go.itcast.com-cert.pem\n├── msp\t\n│   ├── admincerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织管理员的证书")]),t._v("\n│   │   └── Admin@go.itcast.com-cert.pem\n│   ├── cacerts\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的根证书")]),t._v("\n│   │   └── ca.go.itcast.com-cert.pem\n│   ├── config.yaml\n│   └── tlscacerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TLS连接身份证书")]),t._v("\n│       └── tlsca.go.itcast.com-cert.pem\n├── peers\n│   ├── peer0.go.itcast.com\n│   │   ├── msp\n│   │   │   ├── admincerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的管理证书, 创建通道必须要有该证书")]),t._v("\n│   │   │   ├── cacerts\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织根证书")]),t._v("\n│   │   │   ├── config.yaml\t\n│   │   │   ├── keystore\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前节点的私钥")]),t._v("\n│   │   │   ├── signcerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前节点签名的数字证书")]),t._v("\n│   │   │   └── tlscacerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tls连接的身份证书")]),t._v("\n│   │   └── tls\n│   │       ├── ca.crt\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的根证书")]),t._v("\n│   │       ├── server.crt\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 验证本节点签名的证书")]),t._v("\n│   │       └── server.key\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前节点的私钥")]),t._v("\n│   ├── peer1.go.itcast.com\n│   │   ├── msp\n│   │   │   ├── admincerts\n│   │   │   ├── cacerts\n│   │   │   ├── config.yaml\n│   │   │   ├── keystore\n│   │   │   ├── signcerts\n│   │   │   └── tlscacerts\n│   │   └── tls\n│   │       ├── ca.crt\n│   │       ├── server.crt\n│   │       └── server.key\n│   └── peer2.go.itcast.com\n│       ├── msp\n│       │   ├── admincerts\n│       │   ├── cacerts\n│       │   ├── config.yaml\n│       │   ├── keystore\n│       │   ├── signcerts\n│       │   └── tlscacerts\n│       └── tls\n│           ├── ca.crt\n│           ├── server.crt\n│           └── server.key\n├── tlsca\n│   ├── 3273887b1da2f27a6cbad3ac4acb0379df3d7858e0553a91fb9acb93da50b670_sk\n│   └── tlsca.go.itcast.com-cert.pem\n└── "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("users")]),t._v("\n    ├── Admin@go.itcast.com\n    │   ├── msp\n    │   │   ├── admincerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的根证书, 作为管理身份的验证")]),t._v("\n    │   │   ├── cacerts\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户所属组织的根证书")]),t._v("\n    │   │   ├── keystore\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户私钥")]),t._v("\n    │   │   ├── signcerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户的签名证书")]),t._v("\n    │   │   └── tlscacerts\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tls连接通信证书, sdk客户端使用")]),t._v("\n    │   └── tls\n    │       ├── ca.crt\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的根证书")]),t._v("\n    │       ├── client.crt\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 客户端身份的证书")]),t._v("\n    │       └── client.key\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 客户端的私钥")]),t._v("\n    ├── User1@go.itcast.com\n    │   ├── msp\n    │   │   ├── admincerts\n    │   │   ├── cacerts\n    │   │   ├── keystore\n    │   │   ├── signcerts\n    │   │   └── tlscacerts\n    │   └── tls\n    │       ├── ca.crt\n    │       ├── client.crt\n    │       └── client.key\n    └── User2@go.itcast.com\n        ├── msp\n        │   ├── admincerts\n        │   ├── cacerts\n        │   ├── keystore\n        │   ├── signcerts\n        │   └── tlscacerts\n        └── tls\n            ├── ca.crt\n            ├── client.crt\n            └── client.key\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"_3-2-configtxgen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-configtxgen"}},[t._v("#")]),t._v(" 3.2 configtxgen")]),t._v(" "),a("blockquote",[a("p",[t._v("configtxgen 模块的功能一共有两个:")]),t._v(" "),a("ul",[a("li",[t._v("生成 orderer 节点的初始化文件")]),t._v(" "),a("li",[t._v("生成 channel 的初始化文件")])])]),t._v(" "),a("h4",{attrs:{id:"configtxgen-模块命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configtxgen-模块命令"}},[t._v("#")]),t._v(" configtxgen 模块命令")]),t._v(" "),a("blockquote",[a("p",[t._v("configtxgen 模块是通过命令行的方式运行的，通过执行命令"),a("code",[t._v("configtxgen --help")]),t._v("可以显示 configtxgen 模块的命令行选项，执行结果如下所示：")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ configtxgen --help\nUsage of ./configtxgen:\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定所属的组织")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-asOrg string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        Performs the config generation as a particular organization "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("by name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", only \n        including values "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" that org "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("likely"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" has privilege to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定创建的channel的名字, 如果没指定系统会提供一个默认的名字.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-channelID string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        The channel ID to use "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the configtx\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行命令要加载的配置文件的路径, 不指定会在当前目录下查找")]),t._v("\n  -configPath string\n        The path containing the configuration to use "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印指定区块文件中的配置内容，string：查看的区块文件的名字")]),t._v("\n  -inspectBlock string\n        Prints the configuration contained "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the block at the specified path\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印创建通道的交易的配置文件")]),t._v("\n  -inspectChannelCreateTx string\n        Prints the configuration contained "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the transaction at the specified path\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定锚节点更新文件的路径和名字")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-outputAnchorPeersUpdate string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        Creates an config update to update an anchor peer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("works only with the default \n        channel creation, and only "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the first update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定生成的创始区块文件的路径和名字")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-outputBlock string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        The path to "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" the genesis block to "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标示输出的通道文件路径和名字")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-outputCreateChannelTx string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        The path to "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" a channel creation configtx to "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  将组织的定义打印为JSON(这对在组织中手动添加一个通道很有用)。")]),t._v("\n  -printOrg string\n        Prints the definition of an organization as JSON. "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("useful "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" adding an org to\n        a channel manually"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定配置文件中的节点 - configtx.yaml")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-profile string"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n        The profile from configtx.yaml to use "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" generation. "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SampleInsecureSolo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示版本信息")]),t._v("\n  -version\n        Show version information\n")])])]),a("h4",{attrs:{id:"configtxgen模块配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configtxgen模块配置文件"}},[t._v("#")]),t._v(" configtxgen模块配置文件")]),t._v(" "),a("blockquote",[a("p",[t._v("configtxgen 模块的配置文件包含Fabric系统初始块、Channel初始块文件等信息。configtxgen 模块的配置文件样例如下所示，以下部分定义了整个系统的配置信息：")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Profiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织定义标识符，可自定义，命令中的 -profile 参数对应该标识符， 二者要保持一致")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ItcastOrgsOrdererGenesis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Capabilities")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*ChannelCapabilities")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用下面为 ChannelCapabilities 的属性")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Orderer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置属性，系统关键字，不能修改")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrdererDefaults")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用下面为 OrdererDefaults 的属性")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrdererOrg")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用下面为 OrdererOrg 的属性")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Capabilities")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrdererCapabilities")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用下面为 OrdererCapabilities 的属性")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Consortiums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义了系统中包含的组织")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SampleConsortium")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 系统中包含的组织")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrgGo")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用了下文包含的配置")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrgJava")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通道定义标识符，可自定义")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("TwoOrgsChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Consortium")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" SampleConsortium\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*ApplicationDefaults")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrgGo")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*OrgJava")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Capabilities")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("*ApplicationCapabilities")]),t._v("\n                \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有的值使用默认的true即可， 不要修改                ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Capabilities")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Global")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&ChannelCapabilities")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("V1_1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Orderer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&OrdererCapabilities")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("V1_1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&ApplicationCapabilities")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("V1_2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n        \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织节点相关配置信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点配置信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&OrdererOrg")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrdererOrg\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点名称")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrdererMSP\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点编号")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MSPDir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config/ordererOrganizations/itcast.com/msp\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# msp文件路径")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#orderer节点中包含的组织，如果有有多个需要配置多个")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&OrgGo")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrgGoMSP\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织名称")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrgGoMSP\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织编号")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织msp文件路径")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MSPDir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config/peerOrganizations/go.itcast.com/msp\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("AnchorPeers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 组织的访问域名和端口")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" peer0.go.itcast.com\n              "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7051")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&OrgJava")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrgJavaMSP\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OrgJavaMSP\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MSPDir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config/peerOrganizations/java.itcast.com/msp\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("AnchorPeers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" peer0.java.itcast.com\n              "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7051")]),t._v("\n              \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的配置信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Orderer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&OrdererDefaults")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# orderer节点共识算法，有效值："solo" 和 "kafka"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("OrdererType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" solo\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Addresses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ubuntu.itcast.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7050")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点监听的地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("BatchTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2s\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("BatchSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MaxMessageCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("AbsoluteMaxBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 99 MB\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("PreferredMaxBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 512 KB\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# kafka相关配置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Kafka")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Brokers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9092")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&ApplicationDefaults")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Organizations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("上述配置文件中的 Profiles节点定义了整个系统的结构和channel的结构, 配置文件中的"),a("code",[t._v("Profiles")]),t._v("关键字不允许修改，否则配置无效。系统配置信息中设置了系统中orderer节点的信息以及系统中包含的组织数。")])]),t._v(" "),a("h4",{attrs:{id:"configtxgen-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configtxgen-的使用"}},[t._v("#")]),t._v(" configtxgen 的使用")]),t._v(" "),a("blockquote",[a("p",[t._v("为了统一管理，我们可以将生成的初始块文件放入指定目录中，如：channel-artifacts，我们在TestNetWork目录中创建该子目录。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[t._v("configtxgen  命令在执行的时候需要加载一个叫做configtx.yaml的配置文件, 如果没有指定默认重命令执行的当前目录查找，我们可以通过参数 "),a("code",[t._v("-configPath")]),t._v("进行指定，也可以将这个目录设置到环境变量"),a("code",[t._v("FABRIC_CFG_PATH")]),t._v("中。")])],1),t._v(" "),a("p",[a("code",[t._v("export FABRIC_CFG_PATH=$(pwd)/networks/config/")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建 "),a("code",[t._v("orderer")]),t._v(" 的初始块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("itcast@ubuntu:TestNetWork$ configtxgen -profile ItcastOrgOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ItcastOrgOrdererGenesis: 要和配置文件中的配置项对应, 可以由数字和字母构成.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer初始块文件为genesis.block，生成在channel-artifacts目录中")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("创建 "),a("code",[t._v("channel")]),t._v(" 的初始块")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("itcast@ubuntu:TestNetWork$ configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TwoOrgsChannel: 要和配置文件中的配置项对应")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# channel.tx 为生成的频道文件, 在channel-artifacts目录中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建的频道名称为: mychannel")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("创建锚点更新文件 - 每个组织分别进行更新")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新第一个组织 OrgGoMSP 的peer节点")]),t._v("\nitcast@ubuntu:TestNetWork$ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/GoMSPanchors.tx -channelID mychannel -asOrg OrgGoMSP\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TwoOrgsChannel: 要和配置文件中的配置项对应")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OrgGoMSP组织使用的频道为 mychannel 生成的配置信息文件名为 GoMSPanchors.tx")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#==============================================================================")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新第2个组织 OrgJavaMSP 的peer节点")]),t._v("\nitcast@ubuntu:TestNetWork$ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/JavaMSPanchors.tx -channelID mychannel -asOrg OrgJavaMSP\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TwoOrgsChannel: 要和配置文件中的配置项对应")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OrgJavaMSP组织使用的频道为 mychannel 生成的配置信息文件名为 JavaMSPanchors.tx")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_3-3-orderer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-orderer"}},[t._v("#")]),t._v(" 3.3 orderer")]),t._v(" "),a("blockquote",[a("p",[t._v("orderer 模块负责对交易进行排序, 并将排序好的交易打包成区块。orderer节点的配置信息通常放在环境变量或者配置文件中，在具体操作中，如果是通过docker镜像文件的方式启动orderer，推荐使用环境变量的方式，如果是采用命令的方式直接启动，推荐将所有的信息放到配置文件中。下面将会详细介绍其用到的环境变量。")]),t._v(" "),a("p",[t._v("orader配置文件可参考实例程序中的"),a("code",[t._v("orderer.yaml")])]),t._v(" "),a("p",[a("code",[t._v("~/hyperledger-fabric/fabric-samples/config/orderer.yaml")])])]),t._v(" "),a("h4",{attrs:{id:"orderer模块命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orderer模块命令"}},[t._v("#")]),t._v(" orderer模块命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ orderer --help\nusage: orderer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nHyperledger Fabric orderer node\nFlags:\n  --help  Show context-sensitive "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("also try --help-long and --help-man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n\nCommands:\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示帮助信息")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n     Show help.\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动orderer节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("start*\n     Start the orderer node\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示版本信息")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("version\n     Show version information\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 采用基准模式运行orderer")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("benchmark\n     Run orderer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" benchmark mode\n")])])]),a("h4",{attrs:{id:"orderer模块的配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orderer模块的配置信息"}},[t._v("#")]),t._v(" orderer模块的配置信息")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点运行需要配置一些环境变量")]),t._v("\nORDERER_GENERAL_LOGLEVEL\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志级别")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("critical "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" error "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" warning "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" notice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" debug\nORDERER_GENERAL_LISTENADDRESS\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer服务器监听的地址")]),t._v("\nORDERER_GENERAL_LISTENPORT\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer服务器监听的端口")]),t._v("\nORDERER_GENERAL_GENESTSMETHOD\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化块(Genesis)的来源方式, 一般赋值为 file 即可")]),t._v("\nORDERER_GENERAL_GENESISFILE\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储初始块文件的路径")]),t._v("\nORDERER_GENERAL_LOCALMSPID\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的编号,在configtxgen模块配置文件中指定的")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("configtx.yaml配置文件中排序节点的组织的ID\nORDERER_GENERAL_LOCALMSPDIR\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点msp文件路径")]),t._v("\nORDERER_GENERAL_LEDGERTYPE\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 账本类型, ram, json, file")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("ram: 账本数据存储在内存, 一般用于测试环境\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("json/file: 账本数据保存在文件中, 生成环境中推荐使用file \nORDERER_GENERAL_BATCHTIMEOUT\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批处理超时, 创建批处理之前的等待时间")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("每隔一个BATCHTIMEOUT时长, 就会生成一个新的区块\nORDERER_GENERAL_MAXMESSAGECOUNT\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最大消息计数, 批处理的最大消息数量")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("只要一个区块的消息达到MAXMESSAGECOUNT指定的数量, 就会生成一个新的区块\nORDERER_GENERAL_TLS_ENABLED\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否启用TLS, true/false")]),t._v("\nORDERER_GENERAL_TLS_PRIVATEKEY\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# orderer节点的私钥文件, 按照下边的示例目录找")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/server.key\nORDERER_GENERAL_TLS_CERTIFICATE\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 证书文件")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/server.crt\nORDERER—GENERAL_TLS_ROOTCAS\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根证书文件")]),t._v("\n\t- `crypto-config/ordererOrganizations/xx.com/orderers/orderer.xx.com/tls/ca.crt\n")])])]),a("h3",{attrs:{id:"_3-4-peer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-peer"}},[t._v("#")]),t._v(" 3.4 peer")]),t._v(" "),a("blockquote",[a("p",[t._v("peer模块是Fabric中最重要的模块，也是在Fabric系统使用最多的模块。peer模块在Fabric中被称为主节点模块，主要负责存储区块链数据、运行维护链码、提供对外服务接口等作用。")])]),t._v(" "),a("h4",{attrs:{id:"命令行和常用参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行和常用参数"}},[t._v("#")]),t._v(" 命令行和常用参数")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过docker启动peer节点的镜像文件, 可查看相关操作命令")]),t._v("\n$ docker run -it hyperledger/fabric-peer "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n$ peer --help\nUsage:\n  peer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nAvailable Commands:\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("chaincode"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("   相关的子命令:\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("instantiate"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("invoke"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("package"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("signpackage"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("upgrade"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  channel     通道操作: create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("update"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("signconfigtx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("getinfo.\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v("        查看相关命令的帮助信息\n  logging     日志级别: getlevel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("setlevel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("revertlevels.\n  node        node节点操作: start"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("status.\n  version     当前peer的版本.\n\nFlags:\n  -h, --help                   "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" peer\n      --logging-level string   Default logging level and overrides, see core.yaml "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" full syntax\n")])])]),a("h4",{attrs:{id:"peer-channel子命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-channel子命令"}},[t._v("#")]),t._v(" peer channel子命令")]),t._v(" "),a("blockquote",[a("p",[t._v("peer channel的子命令可以通过 "),a("code",[t._v("peer channel --help")]),t._v("进行查看. 这里介绍一个这些子命令可以共用的一些参数:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("--cafile")]),t._v(":  当前orderer节点pem格式的tls证书文件, "),a("font",{attrs:{color:"red"}},[t._v("要使用绝对路径")]),t._v(".")],1),t._v(" "),a("p",[a("code",[t._v("crypto-config/ordererOrganizations/itcast.com/orderers/ubuntu.itcast.com/msp/tlscacerts/tlsca.itcast.com-cert.pem")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("-o, --orderer")]),t._v(": orderer节点的地址")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("--tls")]),t._v(": 通信时是否使用tls加密")])])])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("create")]),t._v(" - 创建通道")]),t._v(" "),a("blockquote",[a("p",[t._v("命令: "),a("code",[t._v("peer channel create [flags]")]),t._v(", 可用参数为:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-c, --channelID")]),t._v(": 要创建的通道的ID, 必须小写, 在250个字符以内")]),t._v(" "),a("li",[a("code",[t._v("-f, --file")]),t._v(": 由configtxgen 生成的通道文件, 用于提交给orderer")]),t._v(" "),a("li",[a("code",[t._v("-t, --timeout")]),t._v(": 创建通道的超时时长")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer channel create -o orderer.itcast.com:7050 -c itcastchannel -f ./channel-artifacts/channel.tx --tls "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/itcast.com/msp/tlscacerts/tlsca.itcast.com-cert.pem\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("join")]),t._v(" - 将peer加入到通道中")]),t._v(" "),a("blockquote",[a("p",[t._v("命令: "),a("code",[t._v("peer channel join[flags]")]),t._v(", 可用参数为:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-b, --blockpath")]),t._v(": 通道文件")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer channel "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" -b itcastchannel.block\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("list")]),t._v(" - 列出peer加入的通道")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer channel list\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("update")]),t._v(" - 更新")]),t._v(" "),a("blockquote",[a("p",[t._v("命令: "),a("code",[t._v("peer channel update [flags]")]),t._v(", 可用参数为:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-c, --channelID")]),t._v(": 要创建的通道的ID, 必须小写, 在250个字符以内")]),t._v(" "),a("li",[a("code",[t._v("-f, --file")]),t._v(": 由configtxgen 生成的组织锚节点文件, 用于提交给orderer")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer channel update -o orderer.example.com:7050 -c itcastchannel -f ./channel-artifacts/Org1MSPanchors.tx --tls "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"peer-chaincode-子命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-chaincode-子命令"}},[t._v("#")]),t._v(" peer chaincode 子命令")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("chaincode")]),t._v("一共有四个公共参数选项, 这些选项所有的子命令都可以使用, 他们分别是:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("--cafile")]),t._v(": PEM格式证书的位置")]),t._v(" "),a("li",[a("code",[t._v("-o, --orderer")]),t._v(": orderer服务器的访问地址")]),t._v(" "),a("li",[a("code",[t._v("--tls")]),t._v(": 使用orderer的TLS证书位置")]),t._v(" "),a("li",[a("code",[t._v("--transient")]),t._v(": JSON参数的编码映射")])]),t._v(" "),a("p",[t._v("chaincode命令的运行需要一些参数，这些参数可以是配置文件也可以是环境变量，由于涉及的参数并不是很多，因此大多数时候都会采用环境变量的方式来设置参数。")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("install")])]),t._v(" "),a("blockquote",[a("p",[t._v("install命令负责安装chaincode，在这个过程中如果chaincode的源代码存在语法错误，install命令会报错。install命令的选项如下所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-c, --ctor")]),t._v(": JSON格式的构造参数, 默认是"),a("code",[t._v('"{}"')])]),t._v(" "),a("li",[a("code",[t._v("-l, --lang")]),t._v(": 编写chaincode的编程语言, 默认值是 "),a("code",[t._v("golang")])]),t._v(" "),a("li",[a("code",[t._v("-n, --name")]),t._v(": chaincode的名字")]),t._v(" "),a("li",[a("code",[t._v("-p, --path")]),t._v(": chaincode源代码的名字")]),t._v(" "),a("li",[a("code",[t._v("-v, --version")]),t._v(": 当前操作的chaincode的版本, 适用这些命令"),a("code",[t._v("install/instantiate/upgrade")])])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer chaincode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -n mycc -v "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" -l golang -p github.com/chaincode/chaincode_example02/go/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装成功之后, 会在peer模块的数据文件中生成一个由 -n 参数和 -v 参数组成的文件,在本例中为:")]),t._v("\n$ docker-compose -f docker-compose-cli.yaml images\n      Container                  Repository            Tag      Image Id      Size  \n------------------------------------------------------------------------------------\ncli                      hyperledger/fabric-tools     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("379602873003")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.41")]),t._v(" GB\norderer.example.com      hyperledger/fabric-orderer   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   4baf7789a8ec   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("145")]),t._v(" MB \npeer0.org1.example.com   hyperledger/fabric-peer      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   82c262e65984   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("151")]),t._v(" MB \npeer0.org2.example.com   hyperledger/fabric-peer      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   82c262e65984   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("151")]),t._v(" MB \npeer1.org1.example.com   hyperledger/fabric-peer      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   82c262e65984   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("151")]),t._v(" MB \npeer1.org2.example.com   hyperledger/fabric-peer      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v(".0   82c262e65984   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("151")]),t._v(" MB \nitcast@ubuntu:first-network$ docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it peer0.org1.example.com "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\nroot@661a44ad6677:/opt/gopath/src/github.com/hyperledger/fabric/peer"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# find / -name mycc.1.0")]),t._v("\n/var/hyperledger/production/chaincodes/mycc.1.0\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询到的结果 - mycc.1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过find命令搜索到的 mycc.1.0 文件就是chaincode打包之后的文件")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("instantiate")])]),t._v(" "),a("blockquote",[a("p",[t._v("instantiate可以对已经执行过instanll命令的Chaincode进行实例化，instantiate命令执行完成之后会启动Chaincode运行的Docker镜像，同时instantiate命令还会对Chaincode进行初始化。instantiate命令的选项如下所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-C，--channelID")]),t._v("：当前命令运行的通道，默认值是"),a("code",[t._v('“testchainid"')]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("-c, --ctor")]),t._v("：JSON格式的构造参数，默认值是"),a("code",[t._v('“{}"')])]),t._v(" "),a("li",[a("code",[t._v("-E ， --escc")]),t._v(" ： 应用于当前Chaincode的系统背书Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-l，--lang")]),t._v("：编写Chaincode的编程语言，默认值是golang")]),t._v(" "),a("li",[a("code",[t._v("-n，--name")]),t._v("：Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-P，--policy")]),t._v("：当前Chaincode的背书策略。")]),t._v(" "),a("li",[a("code",[t._v("-v，--version")]),t._v("：当前操作的Chaincode的版本，适用于"),a("code",[t._v("install/instantiate/upgrade")]),t._v("等命令")]),t._v(" "),a("li",[a("code",[t._v("-V，--vscc")]),t._v("：当前Chaincode调用的验证系统Chaincode的名字。")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer chaincode instantiate -o orderer.example.com:7050 --tls "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C itcastchannel -n mycc -l golang -v "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"Args":["init","a","100","b","200"]}\'')]),t._v(" -P "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"AND ('Org1MSP.member', 'Org2MSP.member')\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# instantiate命令成功执行之后，可以通过docker ps命令查看己经启动的运行Chaincode的docker容器。")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("invoke")])]),t._v(" "),a("blockquote",[a("p",[t._v("invoke命令用来调用chaincode。invoke命令的选项如下所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-C，--channelID")]),t._v("：当前命令运行的通道，默认值是"),a("code",[t._v('“testchainid"')])]),t._v(" "),a("li",[a("code",[t._v("-c, --ctor")]),t._v("：JSON格式的构造参数，默认值是"),a("code",[t._v('“{}"')])]),t._v(" "),a("li",[a("code",[t._v("-n，--name")]),t._v("：Chaincode的名字。")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用示例")]),t._v("\n$ peer chaincode invoke -o orderer.test.com:7050  -C testchannel -n testcc --tls "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/test.com/orderers/orderer.test.com/msp/tlscacerts/tlsca.test.com-cert.pem --peerAddresses peer0.orgGo.test.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/orgGo.test.com/peers/peer0.orgGo.test.com/tls/ca.crt --peerAddresses peer0.orgcpp.test.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/orgcpp.test.com/peers/peer0.orgcpp.test.com/tls/ca.crt -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"Args":["invoke","a","b","10"]}\'')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("list")])]),t._v(" "),a("blockquote",[a("p",[t._v("list命令用来查询已经安装的Chaincode，list命令的选项如下所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-C，--channelID")]),t._v("：当前命令运行的通道，默认值是"),a("code",[t._v('“testchainid"')])]),t._v(" "),a("li",[a("code",[t._v("--installed")]),t._v("：获取当前Peer节点已经被安装的chaincode")]),t._v(" "),a("li",[a("code",[t._v("--instantiated")]),t._v("：获取当前channel中已经被实例化的chaincode")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用示例")]),t._v("\n$ peer chaincode list --installed\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("package")])]),t._v(" "),a("blockquote",[a("p",[t._v("package用来将Chaincode打包。package命令的选项如下所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-s，--cc-package")]),t._v("：对打包后的Chaincode进行签名。")]),t._v(" "),a("li",[a("code",[t._v("-c, --ctor")]),t._v("：JSON格式的构造参数，默认值是"),a("code",[t._v('“{}"')])]),t._v(" "),a("li",[a("code",[t._v("-i，--instantiate-policy")]),t._v("：Chaincode的权限")]),t._v(" "),a("li",[a("code",[t._v("-l，--lang")]),t._v("：编写Chaincode的编程语言，默认值是golang")]),t._v(" "),a("li",[a("code",[t._v("-n，--name")]),t._v("：Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-p，--path")]),t._v("：Chaincode源代码的路径。")]),t._v(" "),a("li",[a("code",[t._v("-S，--sign")]),t._v("：对打包的文件用本地的MSP进行签名。")]),t._v(" "),a("li",[a("code",[t._v("-v，--version")]),t._v("：当前操作的Chaincode的版本，适用于"),a("code",[t._v("install/instantiate/upgrade")]),t._v("等命令")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用示例")]),t._v("\n$ peer chaincode package — github.com/hyperledger/fabric/examples/chaincode/go/example  —n mycc —v "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" -s —S -i "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"OR ('Org1MSP.member'，'Org2MSP.member')\"")]),t._v(" mycc.1.0.out \n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("query")])]),t._v(" "),a("blockquote",[a("p",[t._v("query命令用来执行chaincode代码中的query方法。query命令的选项如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-C，--channelID")]),t._v("：当前命令运行的通道，默认值是"),a("code",[t._v('“testchainid"')])]),t._v(" "),a("li",[a("code",[t._v("-c, --ctor")]),t._v("：JSON格式的构造参数，默认值是"),a("code",[t._v('“{}"')])]),t._v(" "),a("li",[a("code",[t._v("-x，--hex")]),t._v("：是否对输出的内容进行编码处理")]),t._v(" "),a("li",[a("code",[t._v("-n，--name")]),t._v("：Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-r，--raw")]),t._v("：是否输出二进制内容")]),t._v(" "),a("li",[a("code",[t._v("-t, --tid")]),t._v(": 指定当前查询的编号")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用示例")]),t._v("\n$ peer chaincode query -C testchannel -n testcc -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"Args":["query","a"]}\'')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("upgrade")])]),t._v(" "),a("blockquote",[a("p",[t._v("upgrade用来更新已经存在的chaincode。命令选项如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-C，--channelID")]),t._v("：当前命令运行的通道，默认值是"),a("code",[t._v('“testchainid"')])]),t._v(" "),a("li",[a("code",[t._v("-c, --ctor")]),t._v("：JSON格式的构造参数，默认值是"),a("code",[t._v('“{}"')])]),t._v(" "),a("li",[a("code",[t._v("-E ， --escc")]),t._v(" ： 应用于当前Chaincode的系统背书Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-l，--lang")]),t._v("：编写Chaincode的编程语言，默认值是golang")]),t._v(" "),a("li",[a("code",[t._v("-n，--name")]),t._v("：Chaincode的名字。")]),t._v(" "),a("li",[a("code",[t._v("-p, --path")]),t._v(": chaincode源代码的名字")]),t._v(" "),a("li",[a("code",[t._v("-P，--policy")]),t._v("：当前Chaincode的背书策略。")]),t._v(" "),a("li",[a("code",[t._v("-v，--version")]),t._v("：当前操作的Chaincode的版本，适用于"),a("code",[t._v("install/instantiate/upgrade")]),t._v("等命令")]),t._v(" "),a("li",[a("code",[t._v("-V，--vscc")]),t._v("：当前Chaincode调用的验证系统Chaincode的名字。")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ peer chaincode upgrade -o orderer.example.com:7050 -n mycc -v "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" -C mychannel -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"Args":["init","a","100","b","200"]}\'')]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"peer-的环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-的环境变量"}},[t._v("#")]),t._v(" "),a("strong",[t._v("peer 的环境变量")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置文件和环境变量是设置peer启动参数的重要手段, 相关环境变量如下:")]),t._v("\nCORE_VM_ENDPOINT\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker服务器的Deamon地址, 默认取端口的套接字, 如下:")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("unix:///var/run/docker.sock\nCORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# chaincode容器的网络命名模式, 自己取名即可")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("节点运行在同一个网络中才能相互通信, 不同网络中的节点相互隔离\nCORE_PEER_PROFILE_ENABLED\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用peer内置的 profile server")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("fabric的peer内置有profile server，默认时运行在6060端口上的，并且默认关闭。\nCORE_LOGGING_LEVEL\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log日志的级别")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("critical "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" error "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" warning "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" notice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" debug\nCORE_PEER_ID\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# peer节点的编号, 自定义一个即可")]),t._v("\nCORE_PEER_GOSSIP_USELEADERELECTION\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否自动选举leader节点, 自动:true")]),t._v("\nCORE_PEER_GOSSIP_ORGLEADER\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前节点是否为leader节点, 是:true")]),t._v("\nCORE_PEER_ADDRESS\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前peer节点的访问地址")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("格式: 域名:端口 / IP:端口\nCORE_PEER_CHAINCODELISTENADDRESS\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# chaincode的监听地址")]),t._v("\nCORE_PEER_GOSSIP_EXTERNALENDPOINT\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 节点被组织外节点感知时的地址")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("默认为空, 代表不被其他组织节点所感知\nCORE_PEER_GOSSIP_BOOTSTRAP\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动节点后向哪些节点发起gossip连接, 以加入网络")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("这些节点与本地节点需要属于同一个网络\nCORE_PEER_LOCALMSPID \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# peer节点所属的组织的编号, 在configtxgen.yaml中设置的")]),t._v("\nCORE_CHAINCODE_MODE\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# chaincode的运行模式")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("net: 网络模式\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("dev: 开发模式, 该模式下可以在容器外运行chaincode\nCORE_PEER_MSPCONFIGPATH\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前节点的msp文件路径")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("启动peer的时候需要使用msp账号文件\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/msp\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("创建channel的时候需要使用msp账号文件\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("crypto-config/peerOrganizations/org1.x.com/users/Admin@org1.x.com/msp\nCORE_PEER_TLS_ENABLED\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否激活tls, 激活:true, 不激活:false")]),t._v("\nCORE_PEER_TLS_CERT_FILE\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务器身份验证证书")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/server.crt\nCORE_PEER_TLS_KEY_FILE\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务器的私钥文件")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/server.key\nCORE_PEER_TLS_ROOTCERT_FILE\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根服务器证书")]),t._v("\n\t- "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("crypto-config/peerOrganizations/org1.x.com/peers/peer0.org1.x.com/tls/ca.crt\n")])])]),a("blockquote",[a("p",[a("font",{attrs:{color:"red"}},[t._v("每个 org 会选举出一个 "),a("strong",[t._v("leader peer")]),t._v("（实际上可以存在多个），负责连接到 orderer。"),a("strong",[t._v("leader peer")]),t._v("从orderer 拿到新块的信息后分发给其他 peer。")])],1),t._v(" "),a("ul",[a("li",[a("p",[t._v("静态选择leader peer")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CORE_PEER_GOSSIP_USELEADERELECTION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CORE_PEER_GOSSIP_ORGLEADER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#指定某一个peer为leader peer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 如果都配置为 false，那么 peer 不会尝试变成一个 leader")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 如果都配置为 true，会引发异常")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3. 静态配置的方式，需要自行保证 leader 的可用性")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("动态选择leader peer")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CORE_PEER_GOSSIP_USELEADERELECTION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CORE_PEER_GOSSIP_ORGLEADER")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false\n")])])])])])]),t._v(" "),a("h4",{attrs:{id:"peer-默认监听的端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-默认监听的端口"}},[t._v("#")]),t._v(" "),a("strong",[t._v("peer 默认监听的端口")])]),t._v(" "),a("blockquote",[a("p",[t._v("下面是Hyperledger中相关监听的服务端口（默认）")]),t._v(" "),a("ul",[a("li",[t._v("7050: REST 服务端口")]),t._v(" "),a("li",[t._v("7051：peer gRPC 服务监听端口")]),t._v(" "),a("li",[t._v("7052：peer 代码调试模式使用的端口")]),t._v(" "),a("li",[t._v("7053：peer 事件服务端口")]),t._v(" "),a("li",[t._v("7054：eCAP")]),t._v(" "),a("li",[t._v("7055：eCAA")]),t._v(" "),a("li",[t._v("7056：tCAP")]),t._v(" "),a("li",[t._v("7057：tCAA")]),t._v(" "),a("li",[t._v("7058：tlsCAP")]),t._v(" "),a("li",[t._v("7059：tlsCAA")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);