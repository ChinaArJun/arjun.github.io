(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{497:function(e,r,c){"use strict";c.r(r);var a=c(44),t=Object(a.a)({},(function(){var e=this,r=e.$createElement,c=e._self._c||r;return c("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[c("p",[e._v("通过上一篇文章我们已经将fabric的基本环境搭建成功，接下来我们开始运行使用并初步认识fabric。")]),e._v(" "),c("p",[e._v("创建项目目录\nmkdir -p ~/go/src/github.com/hyperledger")]),e._v(" "),c("p",[e._v("cd ~/go/src/github.com/hyperledger")]),e._v(" "),c("p",[e._v("拉取fabric项目\ngit clone https://github.com/hyperledger/fabric.git")]),e._v(" "),c("p",[e._v("切换fabric版本\ncd fabric")]),e._v(" "),c("p",[e._v("git checkout v2.0.0")]),e._v(" "),c("p",[e._v("拉取fabric镜像\n先进入到scripts目录")]),e._v(" "),c("p",[e._v("cd ~/go/src/github.com/hyperledger/fabric/scripts")]),e._v(" "),c("p",[e._v("注意：\n此处我们需要修改当前目录下的bootstrap.sh脚本")]),e._v(" "),c("p",[e._v("通过阅读bootstrap脚本我们可以知道，此脚本先会拉去fabric-samples脚本，再切换分支，但由于官方切换的分支为2.0.0，可实际上现在官方提供的版本库中没有这个分支，所以会导致无法切换，而且回去拉取环境所用的二进制文件，但国内网络是无法访问的，从而导致后面的操作失败，所以我们选择手动拉取fabric-samples脚本再切换到v2.0.0-beta分支，在这之前此脚本仅仅作为拉取镜像的操作，操作如下：")]),e._v(" "),c("p",[e._v("进入编辑页面")]),e._v(" "),c("p",[e._v("vim ~/go/src/github.com/hyperledger/fabric/scripts/bootstrap.sh")]),e._v(" "),c("p",[e._v("修改脚本")]),e._v(" "),c("p",[e._v("#DOCKER=true\n#SAMPLES=true\n#BINARIES=true")]),e._v(" "),c("p",[e._v("为")]),e._v(" "),c("p",[e._v("DOCKER=true\nSAMPLES=false\nBINARIES=false")]),e._v(" "),c("p",[e._v("此出我们修改脚本之后，bootstrap.sh只进行拉取镜像的操作")]),e._v(" "),c("p",[e._v("开始运行脚本\n./bootstrap.sh")]),e._v(" "),c("p",[e._v("拉去的镜像如下")]),e._v(" "),c("p",[e._v("拉去镜像之后下面我们进入目录\ncd ~/go/src/github.com/hyperledger")]),e._v(" "),c("p",[e._v("然后开始拉取fabric-samples\ngit clone https://github.com/hyperledger/fabric-samples.git")]),e._v(" "),c("p",[e._v("拉取成功后切换到v2.0.0-beta分支\ngit checkout v2.0.0-beta")]),e._v(" "),c("p",[e._v("进入目录\ncd ~/go/src/github.com/hyperledger/fabric-samples")]),e._v(" "),c("p",[e._v("紧接着我们需要下所需要的二进制文件\nwget https://github.com/hyperledger/fabric/releases/download/v2.0.1/hyperledger-fabric-linux-amd64-2.0.1.tar.gz")]),e._v(" "),c("p",[e._v("然后在当前目录解压包\ntar -xzvf hyperledger-fabric-linux-amd64-2.0.1.tar.gz")]),e._v(" "),c("p",[e._v("然后进入目录\ncd ~/go/src/github.com/hyperledger/fabric-samples/first-network")]),e._v(" "),c("p",[e._v("然后运行命令\n./byfn.sh up")]),e._v(" "),c("p",[e._v("出现end之后就代表我们运行成功了！！")]),e._v(" "),c("p",[e._v("我们查看一下启动的服务\ndocker ps")]),e._v(" "),c("p",[e._v("查看镜像完全正常，说明我们已经部署成功一个单机多节点的fabric-samples的简单例子了")]),e._v(" "),c("p",[e._v("接下来我们开始在这个基础上加一个组织进去，通过手动加入一个新的组织，来更清楚的认识fabric的机制")]),e._v(" "),c("h1",{attrs:{id:"遇到问题"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#遇到问题"}},[e._v("#")]),e._v(" 遇到问题?")]),e._v(" "),c("h2",{attrs:{id:"中间可能会遇到链码无法打包的问题"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#中间可能会遇到链码无法打包的问题"}},[e._v("#")]),e._v(" 中间可能会遇到链码无法打包的问题")]),e._v(" "),c("p",[e._v("在以下代码中报错，原因是链码依赖找不到，需要到链码所在的文件夹下下载依赖")]),e._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[e._v("peer lifecycle chaincode package mycc.tar.gz --path \ngithub.com/hyperledger/fabric-samples/chaincode/abstore/go/ --lang golang --label mycc_1\n")])])]),c("p",[e._v("在github.com/hyperledger/fabric-samples/chaincode/abstore/go/\n目录执行以下代码进行修复")]),e._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[e._v("cd fabric-samples/chaincode/abac/go\ngo env -w GOPROXY=https://goproxy.io,direct\ngo env -w GO111MODULE=on\ngo mod vendor\n\n")])])]),c("h2",{attrs:{id:"部分docker无法运行"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#部分docker无法运行"}},[e._v("#")]),e._v(" 部分docker无法运行")]),e._v(" "),c("p",[e._v("请检查配置是否按以上要求运行")]),e._v(" "),c("h2",{attrs:{id:"本地测试安装链码查询链码操作上链"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#本地测试安装链码查询链码操作上链"}},[e._v("#")]),e._v(" 本地测试安装链码查询链码操作上链")]),e._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[e._v(' #查询已安装的链码\n docker exec cli peer lifecycle chaincode queryinstalled\n #安装链码\n docker exec cli peer lifecycle chaincode package mycc.tar.gz --path \\\n github.com/hyperledger/fabric-samples/chaincode/abstore/go/ --lang golang --label mycc_1\n \n #查询已安装链码的组织\n docker exec cli peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name mycc --version 1 --init-required --package-id mycc_1:4622fb602aa60c6368716a70474dc9d9ba2776200f70eccca07a4df4360eaff3 --sequence 1 --waitForEvent\n\n docker exec cli peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name mycc --version 1 --init-required --package-id mycc_1:4622fb602aa60c6368716a70474dc9d9ba2776200f70eccca07a4df4360eaff3 --sequence 1 --waitForEvent\n\n#上链\n docker exec cli peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit -c \'{"Args":["Init","a","100","b","100"]}\'\n\n#上链赋值\n docker exec cli peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit -c \'{"Args":["Init","b","999999","b","999999999999"]}\'\n\n  docker exec cli peer chaincode invoke -o orderer.finebaas.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/finebaas.com/orderers/orderer.finebaas.com/msp/tlscacerts/tlsca.finebaas.com-cert.pem -C mychannel -n mycc --peerAddresses peer0.org1.finebaas.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.finebaas.com/peers/peer0.org1.finebaas.com/tls/ca.crt --peerAddresses peer0.org2.finebaas.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.finebaas.com/peers/peer0.org2.finebaas.com/tls/ca.crt --isInit -c \'{"Args":["Init","b","999999","b","999999999999"]}\'\n\n#查询\ndocker exec cli peer chaincode query -C mychannel -n mycc -c \'{"Args":["query","a"]}\'\n\n#安装\ndocker exec cli peer lifecycle chaincode install mycc.tar.gz\n\n#查询\ndocker exec cli peer chaincode query -C mychannel -n mycc -c \'{"Args":["query","b"]}\'\n\n')])])])])}),[],!1,null,null,null);r.default=t.exports}}]);