(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{517:function(v,_,t){"use strict";t.r(_);var s=t(44),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"微服务架构和整体式架构的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构和整体式架构的区别？"}},[v._v("#")]),v._v(" 微服务架构和整体式架构的区别？")]),v._v(" "),t("h3",{attrs:{id:"开发单体式（整体式）应用的不足之处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发单体式（整体式）应用的不足之处"}},[v._v("#")]),v._v(" 开发单体式（整体式）应用的不足之处")]),v._v(" "),t("p",[v._v("​                                                  "),t("img",{attrs:{src:"assets/1538300913589.png",alt:"1538300913589"}})]),v._v(" "),t("p",[t("strong",[v._v("三层架构（MVC）的具体内容如下：")])]),v._v(" "),t("p",[v._v("​       "),t("strong",[v._v("表示层（view）")]),v._v("： 用户使用应用程序时，看到的、听见的、输入的或者交互的部分。")]),v._v(" "),t("p",[v._v("​       "),t("strong",[v._v("业务逻辑层（controller）")]),v._v("： 根据用户输入的信息，进行逻辑计算或者业务处理的部分。")]),v._v(" "),t("p",[v._v("​       "),t("strong",[v._v("数据访问层（model）")]),v._v("： 关注有效地操作原始数据的部分，如将数据存储到存储介质（如数据库、文件系统）及从存储介质中读取数据等。")]),v._v(" "),t("p",[v._v("​       虽然现在程序被分成了三层，但只是逻辑上的分层，并不是物理上的分层。也就是说，对不同层的代码而言，经过编译、打包和部署后，所有的代码最终还是运行在同一个进程中。而这，就是所谓的单块架构。")]),v._v(" "),t("p",[v._v("​       单体架构在规模比较小的情况下工作情况良好，但是随着系统规模的扩大，它暴露出来的问题也越来越多，主要有以下几点：")]),v._v(" "),t("p",[t("strong",[v._v("复杂性逐渐变高")])]),v._v(" "),t("p",[v._v("​       比如有的项目有几十万行代码，各个模块之间区别比较模糊，逻辑比较混乱，代码越多复杂性越高，越难解决遇到的问题。")]),v._v(" "),t("p",[t("strong",[v._v("技术债务逐渐上升")])]),v._v(" "),t("p",[v._v("​       公司的人员流动是再正常不过的事情，有的员工在离职之前，疏于代码质量的自我管束，导致留下来很多坑，由于单体项目代码量庞大的惊人，留下的坑很难被发觉，这就给新来的员工带来很大的烦恼，人员流动越大所留下的坑越多，也就是所谓的技术债务越来越多。")]),v._v(" "),t("p",[t("strong",[v._v("维护成本大")])]),v._v(" "),t("p",[v._v("​       当应用程序的功能越来越多、团队越来越大时，沟通成本、管理成本显著增加。当出现 bug 时，可能引起 bug 的原因组合越来越多，导致分析、定位和修复的成本增加；并且在对全局功能缺乏深度理解的情况下，容易在修复 bug 时引入新的 bug。")]),v._v(" "),t("p",[t("strong",[v._v("持续交付周期长")])]),v._v(" "),t("p",[v._v("​       构建和部署时间会随着功能的增多而增加，任何细微的修改都会触发部署流水线。新人培养周期长：新成员了解背景、熟悉业务和配置环境的时间越来越长。")]),v._v(" "),t("p",[t("strong",[v._v("技术选型成本高")])]),v._v(" "),t("p",[v._v("​       单块架构倾向于采用统一的技术平台或方案来解决所有问题，如果后续想引入新的技术或框架，成本和风险都很大。")]),v._v(" "),t("p",[t("strong",[v._v("可扩展性差")])]),v._v(" "),t("p",[v._v("​       随着功能的增加，垂直扩展的成本将会越来越大；而对于水平扩展而言，因为所有代码都运行在同一个进程，没办法做到针对应用程序的部分功能做独立的扩展。")]),v._v(" "),t("h3",{attrs:{id:"微服务架构的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构的特性"}},[v._v("#")]),v._v(" 微服务架构的特性")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538300922896.png",alt:"1538300922896"}})]),v._v(" "),t("p",[t("strong",[v._v("单一职责")])]),v._v(" "),t("p",[v._v("​       微服务架构中的每个服务，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。")]),v._v(" "),t("p",[t("strong",[v._v("轻量级通信")])]),v._v(" "),t("p",[v._v("​       服务之间通过轻量级的通信机制实现互通互联，而所谓的轻量级，通常指语言无关、平台无关的交互方式。")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538300930493.png",alt:"1538300930493"}})]),v._v(" "),t("p",[v._v("​       对于轻量级通信的格式而言，我们熟悉的 XML 和 JSON，它们是语言无关、平台无关的；对于通信的协议而言，通常基于 HTTP，能让服务间的通信变得标准化、无状态化。目前大家熟悉的 REST（Representational State Transfer）是实现服务间互相协作的轻量级通信机制之一。使用轻量级通信机制，可以让团队选择更适合的语言、工具或者平台来开发服务本身。")]),v._v(" "),t("p",[t("strong",[v._v("独立性")])]),v._v(" "),t("p",[v._v("​       每个服务在应用交付过程中，独立地开发、测试和部署。")]),v._v(" "),t("p",[v._v("​       在单块架构中所有功能都在同一个代码库，功能的开发不具有独立性；当不同小组完成多个功能后，需要经过集成和回归测试，测试过程也不具有独立性；当测试完成后，应用被构建成一个包，如果某个功能存在 bug，将导致整个部署失败或者回滚。")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538299837736.png",alt:"1538299837736"}})]),v._v(" "),t("p",[v._v("​       在微服务架构中，每个服务都是独立的业务单元，与其他服务高度解耦，只需要改变当前服务本身，就可以完成独立的开发、测试和部署。")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538299837737.png",alt:"1538299837737"}})]),v._v(" "),t("p",[t("strong",[v._v("进程隔离")])]),v._v(" "),t("p",[v._v("​       单块架构中，整个系统运行在同一个进程中，当应用进行部署时，必须停掉当前正在运行的应用，部署完成后再重启进程，无法做到独立部署。")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538299837738.png",alt:"1538299837738"}})]),v._v(" "),t("p",[v._v("​       有时候我们会将重复的代码抽取出来封装成组件，在单块架构中，组件通常的形态叫做共享库（如 jar 包或者 DLL），但是当程序运行时，所有组件最终也会被加载到同一进程中运行。")]),v._v(" "),t("p",[t("img",{attrs:{src:"assets/1538299837739.png",alt:"1538299837739"}})]),v._v(" "),t("p",[v._v("​       在微服务架构中，应用程序由多个服务组成，每个服务都是高度自治的独立业务实体，可以运行在独立的进程中，不同的服务能非常容易地部署到不同的主机上。")]),v._v(" "),t("h3",{attrs:{id:"微服务架构的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构的缺点"}},[v._v("#")]),v._v(" 微服务架构的缺点")]),v._v(" "),t("p",[t("strong",[v._v("运维要求较高")])]),v._v(" "),t("p",[v._v("​       对于单体架构来讲，我们只需要维护好这一个项目就可以了，但是对于微服务架构来讲，由于项目是由多个微服务构成的，每个模块出现问题都会造成整个项目运行出现异常，想要知道是哪个模块造成的问题往往是不容易的，因为我们无法一步一步通过debug的方式来跟踪，这就对运维人员提出了很高的要求。")]),v._v(" "),t("p",[t("strong",[v._v("分布式的复杂性")])]),v._v(" "),t("p",[v._v("​       对于单体架构来讲，我们可以不使用分布式，但是对于微服务架构来说，分布式几乎是必会用的技术，由于分布式本身的复杂性，导致微服务架构也变得复杂起来。")]),v._v(" "),t("p",[t("strong",[v._v("接口调整成本高")])]),v._v(" "),t("p",[v._v("​       比如，用户微服务是要被订单微服务和电影微服务所调用的，一旦用户微服务的接口发生大的变动，那么所有依赖它的微服务都要做相应的调整，由于微服务可能非常多，那么调整接口所造成的成本将会明显提高。")]),v._v(" "),t("p",[t("strong",[v._v("重复劳动")])]),v._v(" "),t("p",[v._v("​       对于单体架构来讲，如果某段业务被多个模块所共同使用，我们便可以抽象成一个工具类，被所有模块直接调用，但是微服务却无法这样做，因为这个微服务的工具类是不能被其它微服务所直接调用的，从而我们便不得不在每个微服务上都建这么一个工具类，从而导致代码的重复。")]),v._v(" "),t("p",[t("strong",[v._v("对比表格")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("传统单体架构")]),v._v(" "),t("th",[v._v("分布式微服务化架构")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("新功能开发")]),v._v(" "),t("td",[v._v("需要时间")]),v._v(" "),t("td",[v._v("容易开发和实现")])]),v._v(" "),t("tr",[t("td",[v._v("部署")]),v._v(" "),t("td",[v._v("不经常而且容易部署")]),v._v(" "),t("td",[v._v("经常发布，部署复杂")])]),v._v(" "),t("tr",[t("td",[v._v("隔离性")]),v._v(" "),t("td",[v._v("故障影响范围大")]),v._v(" "),t("td",[v._v("故障影响范围小")])]),v._v(" "),t("tr",[t("td",[v._v("架构设计")]),v._v(" "),t("td",[v._v("初期技术选型难度大")]),v._v(" "),t("td",[v._v("设计逻辑难度大")])]),v._v(" "),t("tr",[t("td",[v._v("系统性能")]),v._v(" "),t("td",[v._v("相对时间快，吞吐量小")]),v._v(" "),t("td",[v._v("相对时间慢，吞吐量大")])]),v._v(" "),t("tr",[t("td",[v._v("系统运维")]),v._v(" "),t("td",[v._v("运维难度简单")]),v._v(" "),t("td",[v._v("运维难度复杂")])]),v._v(" "),t("tr",[t("td",[v._v("新人上手")]),v._v(" "),t("td",[v._v("学习曲线大（应用逻辑）")]),v._v(" "),t("td",[v._v("学习曲线大（架构逻辑）")])]),v._v(" "),t("tr",[t("td",[v._v("技术")]),v._v(" "),t("td",[v._v("技术单一而且封闭")]),v._v(" "),t("td",[v._v("技术多样而且容易开发")])]),v._v(" "),t("tr",[t("td",[v._v("测试和差错")]),v._v(" "),t("td",[v._v("简单")]),v._v(" "),t("td",[v._v("复杂（每个服务都要进行单独测试，还需要集群测试）")])]),v._v(" "),t("tr",[t("td",[v._v("系统扩展性")]),v._v(" "),t("td",[v._v("扩展性差")]),v._v(" "),t("td",[v._v("扩展性好")])]),v._v(" "),t("tr",[t("td",[v._v("系统管理")]),v._v(" "),t("td",[v._v("重点在于开发成本")]),v._v(" "),t("td",[v._v("重点在于服务治理和调度")])])])]),v._v(" "),t("h3",{attrs:{id:"为什么还要使用微服务架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么还要使用微服务架构"}},[v._v("#")]),v._v(" 为什么还要使用微服务架构")]),v._v(" "),t("h4",{attrs:{id:"开发简单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发简单"}},[v._v("#")]),v._v(" 开发简单")]),v._v(" "),t("p",[v._v("​\t微服务架构将复杂系统进行拆分之后，让每个微服务应用都开放变得非常简单，没有太多的累赘。对于每一个开发者来说，这无疑是一种解脱，因为再也不用进行繁重的劳动了，每天都在一种轻松愉快的氛围中工作，其效率也会整备地提高")]),v._v(" "),t("h4",{attrs:{id:"快速响应需求变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速响应需求变化"}},[v._v("#")]),v._v(" 快速响应需求变化")]),v._v(" "),t("p",[v._v("​\t一般的需求变化都来自于局部功能的改变，这种变化将落实到每个微服务上，二每个微服务的功能相对来说都非常简单，更改起来非常容易，所以微服务非常适合敏捷开发方法，能够快速的影响业务的需求变化。")]),v._v(" "),t("h4",{attrs:{id:"随时随地更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#随时随地更新"}},[v._v("#")]),v._v(" 随时随地更新")]),v._v(" "),t("p",[v._v("​\t一方面，微服务的部署和更新并不会影响全局系统的正常运行；另一方面，使用多实例的部署方法，可以做到一个服务的重启和更新在不易察觉的情况下进行。所以每个服务任何时候都可以进行更新部署。")]),v._v(" "),t("h4",{attrs:{id:"系统更加稳定可靠"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统更加稳定可靠"}},[v._v("#")]),v._v(" 系统更加稳定可靠")]),v._v(" "),t("p",[v._v("​\t微服务运行在一个高可用的分布式环境之中，有配套的监控和调度管理机制，并且还可以提供自由伸缩的管理，充分保障了系统的稳定可靠性")])])}),[],!1,null,null,null);_.default=r.exports}}]);